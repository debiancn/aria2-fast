.\" Man page generated from reStructuredText.
.
.TH "ARIA2C" "1" "nov 08, 2017" "1.33.1" "aria2"
.SH NAME
aria2c \- Utilitário para download super ultra rápido
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SINOPSE
.sp
\fBaria2c\fP [<OPÇÕES>] [<URI>|<MAGNET>|<ARQUIVO_TORRENT>|<ARQUIVO_METALINK>] …
.SH DESCRIÇÃO
.sp
\fBAVISO:\fP
.INDENT 0.0
.INDENT 3.5
This translation has been outdated quite sometime now, and lacks
many recent changes.  Please consult English version manual for
updated information.
.UNINDENT
.UNINDENT
.sp
Observação: Para executar o aria2 em um terminal ou no prompt da
linha de comando do windows, utilize o comando aria2c.
.sp
aria2 é um utilitário para download de arquivos. Os protocolos suportados são
HTTP, HTTPS, FTP, BitTorrent e Metalink. aria2 pode efetuar download de arquivos
a partir de múltiplas fontes e protocolos e tenta utilizar a máxima capacidade
de banda. Há suporte para download de arquivos que tem origem em HTTP, HTTPS,
FTP, BitTorrent e Metalink ao mesmo tempo, enquanto os dados baixados podem ser
(uploaded) e compartilhados pelo BitTorrent. Usando conferência / aferição (checksum) nos
Metalinks, aria2 automaticamente valida o conteúdo dos dados enquanto faz
o download do arquivo como BitTorrent.
.SH OPÇÕES BÁSICAS DO ARIA2
.SS Opções Comuns
.INDENT 0.0
.TP
.B \-d, \-\-dir=<DIR>
O diretório onde será armazenado o arquivo baixado.
.UNINDENT
.INDENT 0.0
.TP
.B \-i, \-\-input\-file=<ARQUIVO>
Executa download da(s) URI encontradas no ARQUIVO. Podem ser especificados
múltiplos URI para uma simples entidade: separe URI na mesma linha com
um caracter TAB (tabulação).
Quando desejar ler a entrada padrão (stdin) especificar \fB\-\fP (hífen).
Adicionalmente, diversas opções podem ser especificadas após cada linha de URI.
Esta(s) linha(s) opcional(is) deve(m) começar(em) com um ou mais espaços em
branco e possuir(em) apenas uma opção por linha.
Ver subseção \fI\%Arquivo de Entrada\fP para mais detalhes.
Ver também opção \fI\%\-\-deferred\-input\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-l, \-\-log=<LOG>
O nome do arquivo de log. Se \fB\-\fP for especificado (entrada padrão), log é
gravado em stdout (saída padrão). Se uma string vazia(“”) é especificada, log
não será gravado em arquivo.
.UNINDENT
.INDENT 0.0
.TP
.B \-j, \-\-max\-concurrent\-downloads=<N>
Configura o número máximo de downloads paralelos para cada URI (HTTP,
HTTPS, FTP), Torrent e Metalink. Ver também opção \fI\%\-\-split\fP\&.
Padrão: \fB5\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-V, \-\-check\-integrity [true|false]
Verifica a integridade do arquivo validando pedaços hashes ou um hash do
arquivo inteiro.  Essa opção tem efeito só em downloads BitTorrent, Metalink
com checksums ou HTTP, HTTPS e FTP com a opção \fI\%\-\-checksum\fP\&. Se pedaços
de hashes são providos, essa opção pode detectar porções danificadas de um
arquivo e efetuar novamente o download desses pedaços. Se especificar hash
do arquivo inteiro, a verificação do hash ocorrerá só ao final do download,
validação que leva em conta o tamanho do arquivo, e o download reinicirá a
partir do início.  Se houver especificação de ambos métodos de hash será
utilizado o hash de pedações.
Padrão:
\fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-c, \-\-continue [true|false]
Continua o download a partir de um download parcial, anteriormente
interrompido.  Use esta opção para retormar um download iniciado a partir
de um browser (navegador) ou outro programa que faz baixa de arquivos
sequencialmente desde o início.
Atualmente esta opção só é aplicavel a download de HTTP, HTTPS e FTP.
.UNINDENT
.INDENT 0.0
.TP
.B \-h, \-\-help[=<TÓPICO>|<PALAVRA\-CHAVE>]
As mensagens de Ajuda são classificadas em temas. Um tema se inicia com
\fB#\fP\&. Por exemplo, digitar \fB\-\-help=#http\fP para obter a explicação do uso das
opções do tema \fB#http\fP\&. Se digitar um termo que não é tema, haverá exibição
das opções que incluem o termo informado.
Valores disponíveis para temas podem ser: \fB#basic\fP, \fB#advanced\fP,
\fB#http\fP, \fB#https\fP, \fB#ftp\fP,
\fB#metalink\fP, \fB#bittorrent\fP, \fB#cookie\fP, \fB#hook\fP, \fB#file\fP, \fB#rpc\fP,
\fB#checksum\fP, \fB#experimental\fP, \fB#deprecated\fP, \fB#help\fP, \fB#all\fP
Padrão: \fB#basic\fP
.UNINDENT
.SS Opções HTTP / FTP
.INDENT 0.0
.TP
.B \-\-all\-proxy=<PROXY>
Usar este servidor proxy para todos protocolos.  Para limpar proxy
previamente definido, use “”.  Esta configuração pode ser sobreposta através
da especificação de um servidor proxy para um determinado protocolo usando
opções \fI\%\-\-http\-proxy\fP, \fI\%\-\-https\-proxy\fP e \fI\%\-\-ftp\-proxy\fP\&.
Isto afeta todas as URIs.
O formato da opção PROXY é \fB[http://][USUÁRIO:SENHA@]SERVIDOR[:PORTA]\fP\&.
Ver também seção \fI\%VARIÁVEIS DE AMBIENTE\fP  section.
.sp
\fBNOTA:\fP
.INDENT 7.0
.INDENT 3.5
Se usuário e senha são embutidos na URI do proxy eles também podem ser
especificados através das opções
\fI–{http,https,ftp,all}\-proxy\-{usuário,senha}\fP,
aqueles que aparecerem por último assumem a precedência.
Por exemplo, quando temos:
\fBhttp\-proxy\-user=meunome\fP, \fBhttp\-proxy\-passwd=minhasenha\fP
em aria2.conf e especificamos \fB\-\-http\-proxy="http://svrproxy"\fP na
linha de comando, então obtemos como proxy HTTP \fBhttp://svrproxy\fP
com o usuário \fBmeunome\fP e senha \fBminhasenha\fP\&.
.sp
Outro exemplo: quando especificamos na linha de comando:
\fB\-\-http\-proxy="http://usuário:senha@svrproxy" \-\-http\-proxy\-user="meunome"
\-\-http\-proxy\-passwd="minhasenha"\fP, então obtemos proxy HTTP
\fBhttp://svrproxy\fP com usuário \fBmeunome\fP e senha \fBminhasenha\fP\&.
.sp
Mais um exemplo: se especificamos na linha de comando:
\fB\-\-http\-proxy\-user="meunome" \-\-http\-proxy\-passwd="minhasenha"
\-\-http\-proxy="http://utilizador:acesso@svrproxy"\fP, então obtemos
o proxy HTTP \fBhttp://svrproxy\fP com o usuário \fButilizador\fP
e a senha \fBacesso\fP\&.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-all\-proxy\-passwd=<SENHA>
Define senha para a opção \fI\%\-\-all\-proxy\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-all\-proxy\-user=<USUÁRIO>
Define usuário para opção \fI\%\-\-all\-proxy\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-checksum=<TIPO>=<ALGORITMO>
Define verificação (checksum). TIPO é o tipo de algoritmo(hash). Os tipos de
algoritmos estão listados em \fBAlgoritmos de Hash\fP e podem ser obtidos
através do do comando \fBaria2c \-v\fP\&. DIGEST é o código hexadecimal.  Por
examplo, definindo sha\-1 o resultado parece com:
\fBsha\-1=0192ba11326fe2298c8cb4de616f4d4140213838\fP Essa opção aplica\-se
apenas para downloads HTTP, HTTPS e FTP.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-connect\-timeout=<SEGUNDOS>
Define o tempo de espera em segundos para estabelecer a conexão com o servidor
proxy. Após o estabelecimento da conexão, esta opção não tem mais efeito, mas
a opção \fI\%\-\-timeout\fP será utilizada.
Padrão: \fB60\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dry\-run [true|false]
Se \fBtrue\fP é informado, aria2 apenas verifica se o arquivo remoto está
disponível para download dos dados. Esta opção tem efeito em downloads de
servidores HTTP, HTTPS e FTP.  Downloads de BitTorrent serão cancelados se for
especificado \fBtrue\fP\&.
Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-lowest\-speed\-limit=<VELOCIDADE>
Fecha a conexão se a velocidade de download é menor ou igual ao valor
especificado, bytes por segundo.
\fB0\fP significa que aria2 não levará em conta limite de velocidade mínima.
Pode ser anexado \fBK\fP ou \fBM\fP (1K = 1024, 1M = 1024K).
Esta opção não abrange downloads do tipo BitTorrent.
Padrão: \fB0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-x, \-\-max\-connection\-per\-server=<NÚMERO>
O número máximo de conexões para um servidor em cada download.
Padrão: \fB1\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-max\-file\-not\-found=<NÚMERO>
Se aria2 recebe çódigo de retorno “arquivo não encontrado” de um servidor
remoto de HTTP / FTP um NÚMERO de vezes sem obter nenhum byte, então o
download é forçado a falhar.
Especificar \fB0\fP para desabilitar esta opção. Esta opção só é válida
para servidores HTTP / FTP.
Padrão: \fB0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-m, \-\-max\-tries=<NÚMERO>
Define o número de tentativas. \fB0\fP significa ilimitadas.
See also \fI\%\-\-retry\-wait\fP\&.
Padrão: \fB5\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-k, \-\-min\-split\-size=<TAMANHO>
aria2 não divide menos que 2 * TAMANHO o intervalo de bytes.  Por exemplo,
considere download de um arquivo de 20MiB. Se o TAMANHO é 10M, aria2 pode
dividir o arquivo em 2 intervalos de [0\-10MiB) e [10MiB\-20MiB) e executar o
download usando 2 fontes (logicamente se a opção \fI\%\-\-split\fP >= 2).
Se o TAMANHO é 15M, desde que 2 * 15M > 20Mib, aria2 não dividirá o arquivo e
fará o download de 1 fonte.  Pde ser anexado \fBK\fP ou \fBM\fP
(1K = 1024, 1M = 1024K).
Valores Possíveis: \fB1M\fP \-\fB1024M\fP
Padrão: \fB20M\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-n, \-\-no\-netrc [true|false]
Desabilita suporte netrc.
Padrão: Suporte a netrc é habilitado por padrão.
.sp
\fBNOTA:\fP
.INDENT 7.0
.INDENT 3.5
arquivo netrc é lido somente no início se a opção \fI\%\-\-no\-netrc\fP é
\fBfalse\fP\&.
Portanto se a opção \fI\%\-\-no\-netrc\fP é \fBtrue\fP no início, não haverá
netrc disponível durante toda a sessão, mesmo que seja utilizada a opção
\fI\%aria2.changeGlobalOption()\fP para executar a opção :option:
\fI–no\-netrc=false <\-n>\fP\&.
.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-proxy=<DOMÍNIOS>
Especifica nomes de servidores, domínios e endereços de redes com ou sem blocos
CIDR para os quais não serão utilizados proxy.
.sp
\fBNOTA:\fP
.INDENT 7.0
.INDENT 3.5
Para endereço de rede com blocos CIDR, ambos endereços IPv4 ou IPv6 funcionam.
Implementação atual, não resolve nome host em URI para comparar com endereço
especificado na opção \fI\%\-\-no\-proxy\fP\&. Portanto só será efetiva se a URI
possuir números de endereço IP.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-o, \-\-out=<ARQUIVO>
O nome do arquivo baixado. Quando a opção \fI\%\-\-force\-sequential\fP é
utilizada esta opção será ignorada.
.sp
\fBNOTA:\fP
.INDENT 7.0
.INDENT 3.5
Em um download Metalink ou BitTorrent não poderá ser especificado o nome
do arquivo. O nome do arquivo especificado aqui é usado quando através
da linha de comando é informada para o aria2 sem a utilização da opção
\fI\%\-\-input\-file\fP, \fI\%\-\-force\-sequential\fP\&.
Por exemplo:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-o meuarquivo.zip "http://server1/arquivo.zip" "http://server2/arquivo.zip"
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-proxy\-method=<MÉTODO>
Define o método utilizado para requisições de proxy.  MÉTODO é \fBget\fP ou
\fBtunnel\fP\&. Downloads HTTPS sempre utiliza \fBtunnel\fP, independentemente
desta opção.
Padrão: \fBget\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-R, \-\-remote\-time [true|false]
Recuperar timestamp do arquivo remoto a partir do servidor remoto HTTP / FTP
e se disponível, aplicá\-lo ao arquivo local.
Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-reuse\-uri [true|false]
Reutilizar uma URI já utilizada. Se não habilitada as URIs já utilizadas serão
abandonadas.
Padrão: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-retry\-wait=<SEGUNDOS>
Define quantos segundos haverá entre as tentativas. Com SEGUNDOS > 0, aria2 irá
tentará fazer o download quando o servidor HTTP retornar código resposta 503.
Padrão:  \fB0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-server\-stat\-of=<ARQUIVO>
Define o nome do arquivo no qual será salvo o perfil de performance de um
ou mais servidores acessados.
Para carregar dados já salvos utilizar opção \fI\%\-\-server\-stat\-if\fP\&.
Ver subseção \fI\%Perfil Performance Servidor\fP abaixo,
para o formato do arquivo.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-server\-stat\-if=<ARQUIVO>
Specify the filename to load performance profile of the servers. The
loaded data will be used in some URI selector such as \fBfeedback\fP\&.
See also \fI\%\-\-uri\-selector\fP option. See
\fI\%Perfil Performance Servidor\fP
subsection below for file format.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-server\-stat\-timeout=<SEGUNDOS>
Specifies timeout in seconds to invalidate performance profile of
the servers since the last contact to them.
Padrão: \fB86400\fP (24hours)
.UNINDENT
.INDENT 0.0
.TP
.B \-s, \-\-split=<N>
Download a file using N connections.  If more than N URIs are given,
first N URIs are used and remaining URIs are used for backup.  If
less than N URIs are given, those URIs are used more than once so
that N connections total are made simultaneously.  The number of
connections to the same host is restricted by
\fI\%\-\-max\-connection\-per\-server\fP option.
See also \fI\%\-\-min\-split\-size\fP option.
Padrão: \fB5\fP
.sp
\fBNOTA:\fP
.INDENT 7.0
.INDENT 3.5
Some Metalinks regulate the number of servers to connect.  aria2
strictly respects them.  This means that if Metalink defines the
maxconnections attribute lower than N, then aria2 uses the
value of maxconnections attribute instead of N.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-stream\-piece\-selector=<SELECTOR>
Specify piece selection algorithm used in HTTP e FTP download. Piece
means fixed length segment which is downloaded in parallel in
segmented download. If \fBdefault\fP is given, aria2 selects piece so
that it reduces the number of establishing connection. This is
reasonable default behaviour because establishing connection is an
expensive operation.  If \fBinorder\fP is given, aria2 selects piece
which has minimum index. Index=0 means first of the file. This will
be useful to view movie while downloading it.
\fI\%\-\-enable\-http\-pipelining\fP option may
be useful to reduce reconnection overhead.  Please note that aria2
honors
\fI\%\-\-min\-split\-size\fP option,
so it will be necessary to specify a reasonable value to
\fI\%\-\-min\-split\-size\fP option.
If \fBgeom\fP is given, at the beginning aria2 selects piece which has
minimum index like \fBinorder\fP, but it exponentially increasingly
keeps space from previously selected piece. This will reduce the
number of establishing connection and at the same time it will
download the beginning part of the file first. This will be useful
to view movie while downloading it.
Padrão: \fBdefault\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-t, \-\-timeout=<SEGUNDOS>
Set timeout in seconds.
Padrão: \fB60\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-uri\-selector=<SELECTOR>
Specify URI selection algorithm. The possible values are \fBinorder\fP,
\fBfeedback\fP and \fBadaptive\fP\&.  If \fBinorder\fP is given, URI is tried in
the order appeared in the URI list.  If \fBfeedback\fP is given, aria2
uses download speed observed in the previous downloads and choose
fastest server in the URI list. This also effectively skips dead
mirrors. The observed download speed is a part of performance
profile of servers mentioned in \fI\%\-\-server\-stat\-of\fP and
\fI\%\-\-server\-stat\-if\fP options.  If \fBadaptive\fP is given, selects one of
the best mirrors for the first and reserved connections.  For
supplementary ones, it returns mirrors which has not been tested
yet, and if each of them has already been tested, returns mirrors
which has to be tested again. Otherwise, it doesn’t select anymore
mirrors. Like \fBfeedback\fP, it uses a performance profile of servers.
Padrão: \fBfeedback\fP
.UNINDENT
.SS Opções Específicas de HTTP e HTTPS
.INDENT 0.0
.TP
.B \-\-ca\-certificate=<ARQUIVO>
Utilizar o certificado do ARQUIVO FILE para verificar os Servidores.
O certificado precisa estar no formato PEM e pode conter múltiplos
certificados CA.
.sp
Utilizar a opção \fI\%\-\-check\-certificate\fP para habilitar a verificação.
.sp
\fBNOTA:\fP
.INDENT 7.0
.INDENT 3.5
Se aria2 foi compilado com OpenSSL ou versão mais recente de GnuTLS a qual
tem a função \fBgnutls_certificate_set_x509_system_trust()\fP e a biblioteca
foi adequadamente configurada para localizar o certificado CA existente,
aria2 irá carregar automaticamente estes certificados no início.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-certificate=<ARQUIVO>
Usar arquivo com certificado cliente.
O certificado deve estar no formato PEM.
Pode ser usada a opção \fI\%\-\-private\-key\fP para especificar uma chave
particular.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-check\-certificate [true|false]
Verifica se o peer esta usando o certificado especificado na opção
\fI\%\-\-ca\-certificate\fP\&.
Padrão: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-http\-accept\-gzip [true|false]
Envia cabeçalho requisição \fBAccept: deflate, gzip\fP e faz (inflate) se
o servidor remoto responder com  \fBContent\-Encoding: gzip\fP ou
\fBContent\-Encoding: deflate\fP\&.  Padrão: \fBfalse\fP
.sp
\fBNOTA:\fP
.INDENT 7.0
.INDENT 3.5
Alguns servidores respondem com \fBContent\-Encoding: gzip\fP para arquivos
que são gzip. aria2 faz inflate destes por causa do cabeçalho de resposta.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-http\-auth\-challenge [true|false]
Envia cabeçalho de autorização HTTP só quando requisitado pelo servidor.
Se \fBfalse\fP é habilitado, então o cabeçalho de autorização sempre será
enviado ao servidor.  Há uma exceção: se o nome do usuário de senha são
embutidas na URI, o cabeçalho de autorização sempre será enviado ao servidor
independente desta opção.  Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-http\-no\-cache [true|false]
Envia Cache\-Control: no\-cache e Pragma: cabeçalho no\-cache para evitar
conteúdo do cache.  Se \fBfalse\fP é fornecido, esses cabeçalhos não serão
enviados e poderá ser adicionado o cabeçalho de Cache\-Control com a diretiva
desejada usando a opção \fI\%\-\-header\fP\&. Padrão: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-http\-user=<USUÁRIO>
Define usuário HTTP. Isto afeta todas as URIs.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-http\-passwd=<PASSWD>
Define senha HTTP. Isto afeta todas as URIs.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-http\-proxy=<PROXY>
Usar este servidor proxy para HTTP.  Para limpar o proxy anteriormente
definido use “”.  Ver também opção \fI\%\-\-all\-proxy\fP\&.  Isto afeta todas
URIs.  O formato de PROXY é \fB[http://][USUÁRIO:SENHA@]SERVIDOR[:PORTA]\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-http\-proxy\-passwd=<SENHA>
Define a senha para opção \fI\%\-\-http\-proxy\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-http\-proxy\-user=<USUÁRIO>
Define o usuário para a opção \fI\%\-\-http\-proxy\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-https\-proxy=<PROXY>
Usar este servidor proxy para HTTPS. Para limpar o proxy anteriormente,
use “”.  Ver também opção \fI\%\-\-all\-proxy\fP\&.  Isto afeta todas URIs.  O
formato de PROXY é \fB[https://][USUÁRIO:SENHA@]SERVIDOR[:PORTA]\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-https\-proxy\-passwd=<SENHA>
Define senha para a opção \fI\%\-\-https\-proxy\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-https\-proxy\-user=<USUÁRIO>
Define usuário para a opção \fI\%\-\-https\-proxy\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-private\-key=<ARQUIVO>
Define o arquivo de chave particular que será usado.
A chave particular deve estar no formato PEM e não pode estar criptografada.
O comportamento quando estiver criptografada é indefinido.
Ver também a opção \fI\%\-\-certificate\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-referer=<REFERER>
Define a referência. Afeta todas URIs. Se \fB*\fP é usado, cada URI requisitada é usada
como referência (referer). Pode ser útil quando usado em conjunto com a opção
\fI\%\-\-parameterized\-uri\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-enable\-http\-keep\-alive [true|false]
Enable HTTP/1.1 persistent connection.
Padrão: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-enable\-http\-pipelining [true|false]
Habilita pipelining para HTTP/1.1.
Padrão: \fBfalse\fP
.sp
\fBNOTA:\fP
.INDENT 7.0
.INDENT 3.5
Da perspectiva de performance, não há vantagem em habilitar esta opção.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-header=<HEADER>
Anexa CABEÇALHOao ao cabeçalho HTTP requisitado.
Pode usar esta opção várias vezes para especificar múltiplos cabeçalhos:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-header="X\-A: b78" \-\-header="X\-B: 9J1" "http://servidor/arquivo"
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-load\-cookies=<ARQUIVO>
Carregar Cookies do ARQUIVO usando formato Firefox3 format (SQLite3),
Chromium / Google Chrome (SQLite3) e formato
Mozilla / Firefox(1.x/2.x) / Netscape.
.sp
\fBNOTA:\fP
.INDENT 7.0
.INDENT 3.5
Se aria2 é compilado sem libsqlite3, então não havera suporte aos formatos
de cookie Firefox3 e Chromium / Google Chrome.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-save\-cookies=<ARQUIVO>
Salva Cookies para o ARQUIVO no formato Mozilla / Firefox(1.x/2.x) /
Netscape.  Se ARQUIVO já existe, será sobreposto.  Cookies da Sessão também
serão salvos e seus valores de expiração serão tratados como 0.
Valores Possíveis: \fB/caminho/do/arquivo\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-use\-head [true|false]
Usar método HEAD para a primeira requisição ao servidor HTTP.
Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-U, \-\-user\-agent=<AGENTE_USUÁRIO>
Define usuário agente para download HTTP, HTTPS.
Padrão: \fBaria2/$VERSION\fP, $VERSION é substituída pela versão do aria2.
.UNINDENT
.SS Opções Específicas de FTP
.INDENT 0.0
.TP
.B \-\-ftp\-user=<USUÁRIO>
Definir o usuário FTP. Isto afeta todas as URIs.
Padrão: \fBanonymous\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ftp\-passwd=<SENHA_FTP>
Definir senha FTP. Isto afeta todas as URIs.
Se o nome existe, mas a senha esta ausente, para login em uma URI, aria2
tenta obter a senha usando o arquivo .netrc, caso exista senha declarada
no .netrc. Se não existir será utilizada a senha declarada nesta opção.
Padrão: \fBARIA2USER@\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-p, \-\-ftp\-pasv [true|false]
Usar modo passivo no FTP.
Se \fBfalse\fP é informado, o modo ativo será usado.
Padrão: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ftp\-proxy=<PROXY>
Usar este servidor proxy para FTP.  Para limpar definição proxy previamente
definido, use “”.  Ver também opção \fI\%\-\-all\-proxy\fP\&.
Isto afeta todas URIs.  O formato do PROXY é
\fB[http://][USUÁRIO:SENHA@]SERVIDOR[:PORTA]\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ftp\-proxy\-passwd=<PASSWD>
Define senha para a opção \fI\%\-\-ftp\-proxy\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ftp\-proxy\-user=<USUÁRIO>
Define senha para opção \fI\%\-\-ftp\-proxy\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ftp\-type=<TYPE>
Define tipo de transferência FTP. Que pode ser: \fBbinary\fP ou \fBascii\fP\&.
Padrão: \fBbinary\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ftp\-reuse\-connection [true|false]
Reutilizar conexão FTP.
Padrão: \fBtrue\fP
.UNINDENT
.SS Opções Comuns de BitTorrent / Metalink
.INDENT 0.0
.TP
.B \-\-select\-file=<INDEX>...
Define arquivo para download através da especificação de seu index.
Para achar o index do arquivo use a opção \fI\%\-\-show\-files\fP\&.
Múltiplos indíces podem ser especificados usando\-se \fB,\fP, por exemplo:
\fB3,6\fP\&.  Também pode ser usado \fB\-\fP para especificar intervalos:
\fB1\-5\fP\&.  Ambos podem ser usados juntos \fB,\fP e \fB\-\fP exemplo:
\fB1\-5,8,9\fP\&.  Quando usados com a opção \-M, o índice pode variar dependendo
das opções da query. Ver opções (\fI–metalink\-*\fP).
.sp
\fBNOTA:\fP
.INDENT 7.0
.INDENT 3.5
Em torrent de múltiplos arquivos, os arquivos adjacentes especificados
por essa opção também podem ser baixados. Esse é o comportamento esperado
não é um bug/erro.  Um simples pedaço pode incluir diversos arquivos ou
partes de arquivos, e aria2 grava o pedaço(s) no(s) arquivo(s)
apropriado(s).
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-S, \-\-show\-files [true|false]
Imprimir a lista de arquivos do “.torrent”, “.meta4” e “.metalink” e termina.
No caso de arquivo “.torrent”, informações adicionais são impressas.
(infohash, tamanho pedaço, etc).
.UNINDENT
.SS Opções Específicas de BitTorrent
.INDENT 0.0
.TP
.B \-\-bt\-enable\-lpd [true|false]
Habilita Descobrir Peer Local.  Se indicador particular é configurado
no torrent, aria2 não usa esta funcionalidade mesmo que \fBtrue\fP foi
informato.
Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-exclude\-tracker=<URI>[,...]
Lista separada por vírgulas, de trackers de URI BitTorrent que devem ser
removidas.  Pode ser usado o valor especial \fB*\fP para especificar todas
URIs; isso irá excluir todas URIs de “announce”.  Quando especificar \fB*\fP
em uma linha de comando do shell, lembre\-se de forçar o escape or delimite
com aspas, apóstrofo ou em linux com crase caracter \fI\&.
Ver também opção :option: \(ga–bt\-tracker\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-external\-ip=<ENDEREÇO\-IP>
Especificar o IP externo para reportar um track BitTorrent.  Mesmo que esta
função tenha o nome \fBexternal\fP, ela pode aceitar qualquer tipo de endereço
IP.  ENDEREÇO\-IP deve ser um endereço IP numérico.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-hash\-check\-seed [true|false]
Se \fBtrue\fP é informado, após o check do hash usando a opção :option:
\fI–check\-integrity <\-V>\fP e o arquivo esta completo, continue o arquivo seed.
Se desejar verificar o arquivo e efetuar o download somente quando ele estiver
imcompleto ou danificado, defina esta opção para \fBfalse\fP\&.  Esta opção
só tem efeito para download de BitTorrent.
Padrão: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-lpd\-interface=<INTERFACE>
Use o interface de rede informado para Descobrir o Peer Local. Se esta opção
não é especificada, o interface padrão é usado. Pode ser especificado o nome
do interface e o endereço IP.
Valores possíveis: interface, endereço IP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-max\-open\-files=<NÚMERO>
Especificar o número máximo de arquivos para abrir para cada download
BitTorrent.
Padrão: \fB100\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-max\-peers=<NÚMERO>
Especificar o número máximo de peers para cada torrent.  \fB0\fP significa
ilimitado.  Ver também a opção :option: \fI–bt\-request\-peer\-speed\-limit\fP\&.
Padrão: \fB55\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-metadata\-only [true|false]
Download somente os metadados. O(s) arquivo(s) descrito(s) no(s) metadado(s)
não será(ão) baixado(s). Esta opção só tem efeito para URI BitTorrent Magnet.
Ver também a opção :option: \fI–bt\-save\-metadata\fP\&.
Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-min\-crypto\-level=plain|arc4
Define o nível mínimo do método de critografia.
Se existem diversos métodos são fornecidos por um peer, aria2 escolhe o que
satisfaz o menor nível especificado.
Padrão: \fBplain\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-prioritize\-piece=head[=<TAMANHO>],tail[=<TAMANHO>]
Tentar primeiramente o download do primeiro e último pedaço de cada arquivo
Isto é útil para ver antecipadamente os arquivos. O argumento pode conter
duas palavras chave:
\fBhead\fP e \fBtail\fP\&. Para incluir ambos, devem estar separados por vírgula.
Estas palavras chave possuem um parâmetro tamanho. Por examplo,
se \fBhead=<TAMANHO>\fP é especificado, pedaço no intervalo do número de bytes
iniciais de cada arquivo terão prioridade.    \fBtail=<TAMANHO>\fP significa
que o intervalo final no TAMANHO informado de cada arquivo. TAMANHO pode
incluir \fBK\fP ou \fBM\fP (1K = 1024, 1M = 1024K). Se TAMANHO é omitido,
TAMNHA de 1M será usado.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-remove\-unselected\-file [true|false]
Remove os arquivos não selecionados quando o download do BitTorrent estiver
completo. Para selecionar arquivo(s) use a opção \fI\%\-\-select\-file\fP\&.
Se não for usada esta opção, é assumido que todos os arquivos serão
selecionados. Use esta opção com critério pois ela realmente remove
arquivo(s) do seu disco.
Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-require\-crypto [true|false]
Se true é informado, aria2 não aceita nem estabelece conexão com handshake de
BitTorrent (protocolo 19BitTorrent). Em vez disso aria2 usa
(Obfuscation handshake.
Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-request\-peer\-speed\-limit=<VELOCIDADE>
Se a velocidade total de download do torrent é menor que a <VELOCIDADE>,
aria2 temporariamente incrementa o número de peers para tentar maior
velocidade de download.  Configurando esta opção com sua velocidade
preferida pode incrementar a velocidade de download em alguns casos. Pode
ser anexado \fBK\fP ou \fBM\fP (1K = 1024, 1M = 1024K).
Padrão: \fB50K\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-save\-metadata [true|false]
Salvar metadados como arquivo “.torrent” file. Esta opção tem efeito somente
se URI usada é de BitTorrent Magnet.  O nome do arquivo é codificado em hash
em hexadecimal com sufixo de “.torrent”. O diretório onde será salvo o
o metadado, é o mesmo onde aponta o download do arquivo. Se o arquivo já
existe, o metadado não será salvo. Ver tambémn a opção :option:
\fI–bt\-metadata\-only\fP\&.
Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-seed\-unverified [true|false]
Faz Seed do arquivo previamente baixado sem verificar os hashes dos pedaços.
Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-stop\-timeout=<SEGUNDOS>
Interrompe o download do BitTorrent se a velocidade do for zero por
consecutivos SEGUNDOS. Se \fB0\fP é informado, esta funcionalidade é
desabilitada.
Padrão: \fB0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-tracker=<URI>[,...]
Lista URI, separada por vírgulas, dos rastreadores BitTorrent. Estas URIs não
são afetadas pela opção \fI\%\-\-bt\-exclude\-tracker\fP, porque elas são
adicionadas após as URIs da opção \fI\%\-\-bt\-exclude\-tracker\fP serem
removidas.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-tracker\-connect\-timeout=<SEGUNDOS>
Define o tempo de conexão em segundos para estabelecera conexão com o tracker.
Após a conexão ser estabelecida, esta opção não tem mais efeito e a opção
\fI\%\-\-bt\-tracker\-timeout\fP é usada.
Padrão: \fB60\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-tracker\-interval=<SEGUNDOS>
Define o intervalo em segundos, entre as requisições ao tracker / rastreador.
Isso sobrepõe o valor do intervalo e aria2 passa a usá\-los e ignorar o
valor mínimo de resposta do tracker / rastreador. Se \fB0\fP é definido, aria2
assume que o intervalo será baseado no tracker / rastreador e o download
irá prosseguir.
Padrão: \fB0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-tracker\-timeout=<SEGUNDOS>
Define em segundos o intervalo do timeout.
Padrão: \fB60\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dht\-entry\-point=<SERVIDOR>:<PORTA>
Define servidor e a porta da rede DHT IPv4.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dht\-entry\-point6=<SERVIDOR>:<PORTA>
Define servidor e a porta da rede DHT IPv6.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dht\-file\-path=<CAMINHO>
Modifica o caminho (CAMINHO) para o arquivo da tabela de roteamento DHT IPv4.
Padrão: \fB$HOME/.aria2/dht.dat\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dht\-file\-path6=<PATH>
Modifica o caminho (CAMINHO) para o arquivo da tabela de roteamento DHT IPv6.
Padrão: \fB$HOME/.aria2/dht6.dat\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dht\-listen\-addr6=<ADDR>
Define o endereço para o bind do socket para DHT IPv6.  Deve ser endereço
global IPv6 do servidor.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dht\-listen\-port=<PORT>...
Define portas UDP para ouvir para DHT (IPv4 e IPv6) e rastreador UDP.
Múltiplas portas podem ser especificadas através do uso de \fB,\fP,
por exemplo: \fB6881,6885\fP\&.  Também pode ser usado \fB\-\fP para especificar
intervalo, exemplo: \fB6881\-6999\fP\&.  Ambos \fB,\fP and \fB\-\fP podem ser
usados em conjunto.
Padrão: \fB6881\-6999\fP
.sp
\fBNOTA:\fP
.INDENT 7.0
.INDENT 3.5
Cerfifique\-se que as portas especificadas estão disponíveis para tráfego UDP
de entrada.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dht\-message\-timeout=<SEGUNDOS>
Define timeout em segundos.
Padrão: \fB10\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-enable\-dht [true|false]
Habilita funcionalidade DHT IPv4. Tambem habilita suporte a rastreador UDP.
Se um identificador particular é usado em um torrente, aria2 não usa DHT
para aquele download, mesmo que \fBtrue\fP foi informado.
Padrão: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-enable\-dht6 [true|false]
Habilita funcionalidade DHT IPv6. Se identificador particular é usado em um
torrent, aria2 não usa DHT para aquele download mesmo que \fBtrue\fP foi
informado. Usar opção \fI\%\-\-dht\-listen\-port\fP para especificar número(s)
de porta(s) para ser(em) ouvida(s). Ver também opção :option:\(ga
–dht\-listen\-addr6\(ga
Padrão: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-enable\-peer\-exchange [true|false]
Habilita extensão Peer Exchange.  Se um indicador particular é usado nesse
torrent, essa funcionalidade será desabilitada para o download, mesmo que
\fBtrue\fP foi informado.
Padrão: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-follow\-torrent=true|false|mem
Se \fBtrue\fP ou \fBmem\fP é especificado, quando um arquivo cujo sufixo é
\fB\&.torrent\fP ou o tipo de conteúdo é \fBapplication/x\-bittorrent\fP é baixado,
aria2 faz o parse como arquivo torrent e executa o download dos arquivos
mencionados nele.
Se \fBmem\fP é especificado, o arquivo torrent não será gravado em disco, apenas
será mantido em memória.
Se \fBfalse\fP é especificado, a ação acima descrita não será executada.
Padrão: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-O, \-\-index\-out=<INDEX>=<PATH>
Define o caminho do arquivo com índice=INDEX. O arquivo índice pode ser
localizado usando\-se a opção \fI\%\-\-show\-files\fP\&. PATH é o caminho
relativo ao caminho especificado na opção \fI\%\-\-dir\fP\&.
Esta opção pode ser usada múltiplas vezes. Com esta opção pode\-se especificar
o nome dos arquivos que serão baixados pelo BitTorrent.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-listen\-port=<PORT>...
Define o número das portas TCP para download de BitTorrent.
Multiplas portas são especificadas usando \fB,\fP,  por exemplo: \fB6881,6885\fP\&.
Também pode usar \fB\-\fP para especificar intervalos: \fB6881\-6999\fP\&.
Ambos \fB,\fP and \fB\-\fP podem ser usados em conjunto: \fB6881\-6889,6999\fP\&.
Padrão: \fB6881\-6999\fP
.sp
\fBNOTA:\fP
.INDENT 7.0
.INDENT 3.5
Certifique\-se que as portas estejam habilitadas para tráfego TCP de entrada.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-max\-overall\-upload\-limit=<VELOCIDADE>
Define a velocidade máxima geral de upload em bytes/seg.  \fB0\fP significa
irrestrito.  Pode anexar \fBK\fP ou \fBM\fP (1K = 1024, 1M = 1024K).  Para
limitar a velocidade de upload por torrent, usar opção
\fI\%\-\-max\-upload\-limit\fP\&.
Padrão: \fB0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-u, \-\-max\-upload\-limit=<VELOCIDADE>
Define a velocidade máxima para cada torrent em bytes/seg.  \fB0\fP significa
irrestrito.  Pode anexar \fBK\fP ou \fBM\fP (1K = 1024, 1M = 1024K).  Para
limitar a velocidade global de upload de torrent, usar opção
\fI\%\-\-max\-overall\-upload\-limit\fP\&.
Padrão: \fB0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-peer\-id\-prefix=<PEER_ID_PREFIX>
Especifica o prefixo para ID do peer. O ID do peer em um BitTorrent tem o
tamanho de 20 bytes. Se mais de 20 bytes são especificados, somente os 20
bytes iniciais serão usados. Se menos de 20 bytes são especificados, dados
randomicos serão adicionados para completar o tamanho de 20 bytes.
Padrão: \fBaria2/$VERSÃO\-\fP, $VERSÃO é a versão do pacote aria2.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-seed\-ratio=<RATIO>
Specify share ratio. Seed completed torrents until share ratio reaches
RATIO.
You are strongly encouraged to specify equals or more than \fB1.0\fP here.
Specify \fB0.0\fP if you intend to do seeding regardless of share ratio.
If \fI\%\-\-seed\-time\fP option is specified along with this option,
seeding ends when at least one of the conditions is satisfied.
Padrão: \fB1.0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-seed\-time=<MINUTES>
Especificar o tempo de (seeding) em minutos. Ver também a opção
\fI\%\-\-seed\-ratio\fP\&.
.sp
\fBNOTA:\fP
.INDENT 7.0
.INDENT 3.5
Especificando \fI\%\-\-seed\-time=0\fP desabilita o (seeding)
após o download ter sido completado.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-T, \-\-torrent\-file=<TORRENT_FILE>
O caminho para o arquivo “.torrent”.  Não é obrigatório usar esta opção pois
pode ser especificado arquivo “.torrent” sem a opção
\fI\%\-\-torrent\-file\fP\&.
.UNINDENT
.SS Opções Específicas de Metalink
.INDENT 0.0
.TP
.B \-\-follow\-metalink=true|false|mem
If \fBtrue\fP or \fBmem\fP is specified, when a file whose suffix is \fB\&.meta4\fP
or \fB\&.metalink\fP or content type of \fBapplication/metalink4+xml\fP or
\fBapplication/metalink+xml\fP is downloaded, aria2 parses it as a metalink
file and downloads files mentioned in it.
If \fBmem\fP is specified, a metalink file is not written to the disk,
but is just kept in memory.
If \fBfalse\fP is specified, the action mentioned above is not taken.
Padrão: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-metalink\-base\-uri=<URI>
Specify base URI to resolve relative URI in metalink:url and
metalink:metaurl element in a metalink file stored in local disk. If
URI points to a directory, URI must end with \fB/\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-M, \-\-metalink\-file=<METALINK_FILE>
The file path to “.meta4” and “.metalink” file. Reads input from stdin when
\fB\-\fP is specified.  You are not required to use this option because you can
specify “.metalink” files without \fI\%\-\-metalink\-file\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-metalink\-language=<LANGUAGE>
The language of the file to download.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-metalink\-location=<LOCATION>[,...]
The location of the preferred server.
A comma\-delimited list of locations is acceptable, for example, \fBjp,us\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-metalink\-os=<OS>
The operating system of the file to download.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-metalink\-version=<VERSION>
The version of the file to download.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-metalink\-preferred\-protocol=<PROTO>
Specify preferred protocol.
The possible values are \fBhttp\fP, \fBhttps\fP, \fBftp\fP and \fBnone\fP\&.
Specify \fBnone\fP to disable this feature.
Padrão: \fBnone\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-metalink\-enable\-unique\-protocol [true|false]
If \fBtrue\fP is given and several protocols are available for a mirror in a
metalink file, aria2 uses one of them.
Use \fI\%\-\-metalink\-preferred\-protocol\fP option to specify
the preference of protocol.
Padrão: \fBtrue\fP
.UNINDENT
.SS Opções específicas de RPC
.INDENT 0.0
.TP
.B \-\-enable\-rpc [true|false]
Enable JSON\-RPC/XML\-RPC server.  It is strongly recommended to set username
and password using \fI\%\-\-rpc\-user\fP and \fI\%\-\-rpc\-passwd\fP
option. See also \fI\%\-\-rpc\-listen\-port\fP option.  Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-pause [true|false]
Pause o download após adicionado.  Está opção só é efetiva quando
a opção \fI\%\-\-enable\-rpc=true\fP é informada.
Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rpc\-allow\-origin\-all [true|false]
Adiciona o campo de cabeçalho,  \fBAccess\-Control\-Allow\-Origin\fP,
com o valor \fB*\fP á resposta RPC.
Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rpc\-certificate=<ARQUIVO>
Usar o certificado no ARQUIVO para servidor RPC. O certificado
deve estar no formato PEM.  Usar opção \fI\%\-\-rpc\-private\-key\fP
para especificar chave particular. Usar a opção
\fI\%\-\-rpc\-secure\fP para habilitar criptografia.
Usuários de \fIAppleTLS\fP precisam antes gerar o certificado próprio
auto\-assinado através do utilitário \fBKeychain Access\fP, por ex:
usando o assistente e tomando nota da identificação SHA\-1 do
certificado gerado.
Para executar o aria2c com a opção \fI\%\-\-rpc\-secure\fP usar
\fI–rpc\-certificate=<SHA\-1>\fP e apenas omitir a opção
\fI\%\-\-rpc\-private\-key\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rpc\-listen\-all [true|false]
Listen incoming JSON\-RPC/XML\-RPC requests on all network interfaces. If false
is given, listen only on local loopback interface.  Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rpc\-listen\-port=<PORT>
Specify a port number for JSON\-RPC/XML\-RPC server to listen to.  Possible
Values: \fB1024\fP \-\fB65535\fP Padrão: \fB6800\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rpc\-max\-request\-size=<TAMANHO>
Set max size of JSON\-RPC/XML\-RPC request. If aria2 detects the request is
more than SIZE bytes, it drops connection. Padrão: \fB2M\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rpc\-passwd=<PASSWD>
Set JSON\-RPC/XML\-RPC password.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rpc\-private\-key=<FILE>
Use the private key in FILE for RPC server.  The private key must be
decrypted and in PEM format. Use \fI\%\-\-rpc\-secure\fP option to
enable encryption. See also \fI\%\-\-rpc\-certificate\fP option.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rpc\-save\-upload\-metadata [true|false]
Save the uploaded torrent or metalink metadata in the directory
specified by \fI\%\-\-dir\fP option. The filename consists of SHA\-1
hash hex string of metadata plus extension. For torrent, the
extension is ‘.torrent’. For metalink, it is ‘.meta4’.  If false is
given to this option, the downloads added by
\fI\%aria2.addTorrent()\fP or \fI\%aria2.addMetalink()\fP will not be
saved by \fI\%\-\-save\-session\fP option. Default: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rpc\-secure [true|false]
RPC transport will be encrypted by SSL/TLS.  The RPC clients must
use https scheme to access the server. For WebSocket client, use wss
scheme. Use \fI\%\-\-rpc\-certificate\fP and
\fI\%\-\-rpc\-private\-key\fP options to specify the server
certificate and private key.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rpc\-user=<USUÁRIO>
Set JSON\-RPC/XML\-RPC user.
.UNINDENT
.SS Opções Avançadas
.INDENT 0.0
.TP
.B \-\-allow\-overwrite [true|false]
Reiniciar o download desde o início se o correspondente arquivo de controle
não existir.  Ver também a opção \fI\%\-\-auto\-file\-renaming\fP\&.
Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-allow\-piece\-length\-change [true|false]
Se \fBfalse\fP é informado, aria2 interrompe o download quando o tamanho de um
pedaço for diferente do especificado no arquivo controle. Se \fBtrue\fP
é informado, o download prossegue mas o progresso será perdido.
Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-always\-resume [true|false]
Sempre continuar. Se If \fBtrue\fP é informado, aria2 sempre tentará
retomar o download do ponto interrompido e se não for possivel o download
será interrompido.  Se \fBfalse\fP é informado, quando todas URIs fornecidas
não suportarem a continuidade do download ou aria2 encontrar \fBN\fP URIs as
quais não suportem retomar o download (\fBN\fP é o valor especificado na
opção \fI\%\-\-max\-resume\-failure\-tries\fP), aria2 irá iniciar o download
do início.  Ver opção \fI\%\-\-max\-resume\-failure\-tries\fP
Padrão: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-async\-dns [true|false]
Habilita DNS assíncrono.
Padrão: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-async\-dns\-server=<ENDEREÇO\-IP>[,...]
Lista separada por vírgulas, dos endereços dos servidores DNS assíncronos
usados pelo resolvedor. Normalmente o resolvedor de DNS assíncronos faz a
leitura dos endereços a partir do arquivo \fB/etc/resolv.conf\fP\&.
Quando essa opção é usada é feito uso dos servidores DNS especificados na
opção em detrimento do conteúdo do arquivo \fB/etc/resolv.conf\fP\&.
Podem ser usados ambos endereços IPv4 e IPv6. Essa opção é útil
quando o sistema não possui \fB/etc/resolv.conf\fP e o usuário não tem
permissão para criá\-lo.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-auto\-file\-renaming [true|false]
Renomear o arquivo se o mesmo já existir.
Essa opção só funciona em download HTTP, HTTPS e FTP.
O novo nome do arquivo terá um ponto e uma sequência (1..9999) como sufixo.
Padrão: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-auto\-save\-interval=<SEGUNDOS>
Salvar o arquivo de controle (*.aria2) a cada intervalo de SEGUNDOS.
Se \fB0\fP é informado, o arquivo de controle não será salvo durante o
download. aria2 salva o arquivo de controle quando parar, independentemente
do valor. As possibilidades vão desde \fB0\fP até \fB600\fP\&.
Padrão: \fB60\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-conditional\-get [true|false]
Download file only when the local file is older than remote
file. This function only works with HTTP, HTTPS,  downloads only.  It does
not work if file size is specified in Metalink. It also ignores
Content\-Disposition header.  If a control file exists, this option
will be ignored.  This function uses If\-Modified\-Since header to get
only newer file conditionally. When getting modification time of
local file, it uses user supplied filename(see \fI\%\-\-out\fP option) or
filename part in URI if \fI\%\-\-out\fP is not specified.
To overwrite existing file, \fI\%\-\-allow\-overwrite\fP is required.
Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-conf\-path=<PATH>
Change the configuration file path to PATH.
Padrão: \fB$HOME/.aria2/aria2.conf\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-console\-log\-level=<LEVEL>
Set log level to output to console.  LEVEL is either \fBdebug\fP,
\fBinfo\fP, \fBnotice\fP, \fBwarn\fP or \fBerror\fP\&.  Default: \fBnotice\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-D, \-\-daemon [true|false]
Run as daemon. The current working directory will be changed to \fB/\fP
and standard input, standard output and standard error will be
redirected to \fB/dev/null\fP\&. Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-deferred\-input [true|false]
If \fBtrue\fP is given, aria2 does not read all URIs and options from file
specified by \fI\%\-\-input\-file\fP option at startup,
but it reads one by one when it
needs later. This may reduce memory usage if input file contains a
lot of URIs to download.  If \fBfalse\fP is given, aria2 reads all URIs
and options at startup.
Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-disable\-ipv6 [true|false]
Disable IPv6. This is useful if you have to use broken DNS and want
to avoid terribly slow AAAA record lookup. Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-disk\-cache=<SIZE>
Enable disk cache. If SIZE is \fB0\fP, the disk cache is
disabled. This feature caches the downloaded data in memory, which
grows to at most SIZE bytes. The cache storage is created for aria2
instance and shared by all downloads. The one advantage of the disk
cache is reduce the disk I/O because the data are written in larger
unit and it is reordered by the offset of the file.  If hash
checking is involved and the data are cached in memory, we don’t
need to read them from the disk.  SIZE can include \fBK\fP or \fBM\fP
(1K = 1024, 1M = 1024K). Default: \fB16M\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-download\-result=<OPT>
This option changes the way \fBDownload Results\fP is formatted. If OPT
is \fBdefault\fP, print GID, status, average download speed and
path/URI. If multiple files are involved, path/URI of first
requested file is printed and remaining ones are omitted.  If OPT is
\fBfull\fP, print GID, status, average download speed, percentage of
progress and path/URI. The percentage of progress and path/URI are
printed for each requested file in each row.
Padrão: \fBdefault\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-enable\-async\-dns6 [true|false]
Enable IPv6 name resolution in asynchronous DNS resolver. This
option will be ignored when \fI\%\-\-async\-dns=false.\fP
Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-enable\-mmap [true|false]
Map files into memory. This option may not work if the file space
is not pre\-allocated. See \fI\%\-\-file\-allocation\fP\&.
.sp
Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-event\-poll=<POLL>
Specify the method for polling events.  The possible values are
\fBepoll\fP, \fBkqueue\fP, \fBport\fP, \fBpoll\fP and \fBselect\fP\&.  For each \fBepoll\fP,
\fBkqueue\fP, \fBport\fP and \fBpoll\fP, it is available if system supports it.
\fBepoll\fP is available on recent Linux. \fBkqueue\fP is available on
various *BSD systems including Mac OS X. \fBport\fP is available on Open
Solaris. The default value may vary depending on the system you use.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-file\-allocation=<METHOD>
Specify file allocation method.
\fBnone\fP doesn’t pre\-allocate file space. \fBprealloc\fP pre\-allocates file space
before download begins. This may take some time depending on the size of the
file.
If you are using newer file systems such as ext4
(with extents support), btrfs, xfs or NTFS(MinGW build only), \fBfalloc\fP is
your best choice. It allocates large(few GiB)
files almost instantly. Don’t use \fBfalloc\fP with
legacy file systems such as ext3 and FAT32 because it takes
almost same time as \fBprealloc\fP and it blocks aria2
entirely until allocation finishes. \fBfalloc\fP may
not be available if your system doesn’t have
\fBposix_fallocate(3)\fP function.
\fBtrunc\fP uses \fBftruncate(2)\fP system call or
platform\-specific counterpart to truncate a file to a specified
length.
.sp
Possible Values: \fBnone\fP, \fBprealloc\fP, \fBtrunc\fP, \fBfalloc\fP
Padrão: \fBprealloc\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-force\-save [true|false]
Save download with \fI\%\-\-save\-session\fP option
even if the download is completed or removed. This may be useful to
save BitTorrent seeding which is recognized as completed state.
Default: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-gid=<GID>
Set GID manually. aria2 identifies each download by the ID called
GID. The GID must be hex string of 16 characters, thus [0\-9a\-zA\-Z]
are allowed and leading zeros must not be stripped. The GID all 0 is
reserved and must not be used. The GID must be unique, otherwise
error is reported and the download is not added.  This option is
useful when restoring the sessions saved using
\fI\%\-\-save\-session\fP option. If this option is
not used, new GID is generated by aria2.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-hash\-check\-only [true|false]
If \fBtrue\fP is given, after hash check using
\fI\%\-\-check\-integrity\fP option,
abort download whether or not download is complete.
Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-human\-readable [true|false]
Print sizes and speed in human readable format (e.g., 1.2Ki, 3.4Mi)
in the console readout. Padrão: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-interface=<INTERFACE>
Bind sockets to given interface. You can specify interface name, IP
address and hostname.
Possible Values: interface, IP address, hostname
.sp
\fBNOTA:\fP
.INDENT 7.0
.INDENT 3.5
If an interface has multiple addresses, it is highly recommended to
specify IP address explicitly. See also \fI\%\-\-disable\-ipv6\fP\&.  If your
system doesn’t have \fBgetifaddrs(3)\fP, this option doesn’t accept interface
name.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-max\-download\-result=<NÚMERO>
Set maximum number of download result kept in memory. The download
results are completed/error/removed downloads. The download results
are stored in FIFO queue and it can store at most NUM download
results. When queue is full and new download result is created,
oldest download result is removed from the front of the queue and
new one is pushed to the back. Setting big number in this option may
result high memory consumption after thousands of
downloads. Specifying 0 means no download result is kept. Padrão:
\fB1000\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-max\-resume\-failure\-tries=<N>
When used with \fI\%\-\-always\-resume=false,\fP aria2 downloads file from
scratch when aria2 detects N number of URIs that does not support
resume. If N is \fB0\fP, aria2 downloads file from scratch when all
given URIs do not support resume.  See \fI\%\-\-always\-resume\fP option.
Padrão: \fB0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-log\-level=<LEVEL>
Set log level to output.
LEVEL is either \fBdebug\fP, \fBinfo\fP, \fBnotice\fP, \fBwarn\fP or \fBerror\fP\&.
Padrão: \fBdebug\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-on\-bt\-download\-complete=<COMMAND>
For BitTorrent, a command specified in \fI\%\-\-on\-download\-complete\fP is
called after download completed and seeding is over. On the other
hand, this option set the command to be executed after download
completed but before seeding.
See \fI\%Interação com Eventos (Hook)\fP for more details about COMMAND.
Possible Values: \fB/path/to/command\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-on\-download\-complete=<COMMAND>
Set the command to be executed after download completed.  See
See \fI\%Interação com Eventos (Hook)\fP for more details about COMMAND.
See also \fI\%\-\-on\-download\-stop\fP option.
Possible Values: \fB/path/to/command\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-on\-download\-error=<COMMAND>
Set the command to be executed after download aborted due to error.
See \fI\%Interação com Eventos (Hook)\fP for more details about COMMAND.
See also \fI\%\-\-on\-download\-stop\fP option.  Possible Values:
\fB/path/to/command\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-on\-download\-pause=<COMMAND>
Set the command to be executed after download was paused.
See \fI\%Interação com Eventos (Hook)\fP for more details about COMMAND.
Possible Values: \fB/path/to/command\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-on\-download\-start=<COMMAND>
Set the command to be executed after download got started.
See \fI\%Interação com Eventos (Hook)\fP for more details about COMMAND.
Possible Values: \fB/path/to/command\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-on\-download\-stop=<COMMAND>
Set the command to be executed after download stopped. You can override
the command to be executed for particular download result using
\fI\%\-\-on\-download\-complete\fP and \fI\%\-\-on\-download\-error\fP\&. If they are
specified, command specified in this option is not executed.
See \fI\%Interação com Eventos (Hook)\fP for more details about COMMAND.
Possible Values: \fB/path/to/command\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-piece\-length=<LENGTH>
Set a piece length for HTTP e FTP downloads. This is the boundary when
aria2 splits a file. All splits occur at multiple of this
length. This option will be ignored in BitTorrent downloads.  It
will be also ignored if Metalink file contains piece hashes.
Padrão: \fB1M\fP
.sp
\fBNOTA:\fP
.INDENT 7.0
.INDENT 3.5
The possible usecase of \fI\%\-\-piece\-length\fP
option is change the request range in one HTTP pipelined request.
To enable HTTP pipelining use
\fI\%\-\-enable\-http\-pipelining\fP\&.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-show\-console\-readout [true|false]
Show console readout. Padrão: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-summary\-interval=<SEGUNDOS>
Set interval in seconds to output download progress summary.
Setting \fB0\fP suppresses the output.
Padrão: \fB60\fP
.sp
\fBNOTA:\fP
.INDENT 7.0
.INDENT 3.5
In multi file torrent downloads, the files adjacent forward to the specified files
are also allocated if they share the same piece.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-Z, \-\-force\-sequential [true|false]
Fetch URIs in the command\-line sequentially and download each URI in a
separate session, like the usual command\-line download utilities.
Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-max\-overall\-download\-limit=<VELOCIDADE>
Set max overall download speed in bytes/sec.  \fB0\fP means
unrestricted.  You can append \fBK\fP or \fBM\fP (1K = 1024, 1M = 1024K).  To
limit the download speed per download, use \fI\%\-\-max\-download\-limit\fP
option.  Padrão: \fB0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-max\-download\-limit=<VELOCIDADE>
Set max download speed per each download in bytes/sec. \fB0\fP means
unrestricted.  You can append \fBK\fP or \fBM\fP (1K = 1024, 1M = 1024K).  To
limit the overall download speed, use \fI\%\-\-max\-overall\-download\-limit\fP
option.  Padrão: \fB0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-conf [true|false]
Disable loading aria2.conf file.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-file\-allocation\-limit=<TAMANHO>
No file allocation is made for files whose size is smaller than SIZE.
You can append \fBK\fP or \fBM\fP (1K = 1024, 1M = 1024K).
Padrão: \fB5M\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-P, \-\-parameterized\-uri [true|false]
Enable parameterized URI support.
You can specify set of parts: \fBhttp://{sv1,sv2,sv3}/foo.iso\fP\&.
Also you can specify numeric sequences with step counter:
\fBhttp://host/image[000\-100:2].img\fP\&.
A step counter can be omitted.
If all URIs do not point to the same file, such as the second example above,
\-Z option is required.
Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-q, \-\-quiet [true|false]
Make aria2 quiet (no console output).
Padrão: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-realtime\-chunk\-checksum [true|false]
Validate chunk of data by calculating checksum while downloading a file if
chunk checksums are provided.
Padrão: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-remove\-control\-file [true|false]
Remove control file before download. Using with
\fI\%\-\-allow\-overwrite=true,\fP download always starts from
scratch. This will be useful for users behind proxy server which
disables resume.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-save\-session=<ARQUIVO>
Salvar downloads não concluídos ou com erro, para um ARQUIVO quando sair.
Pode ser informado o nome do arquivo para o aria2 com a opção
\fI\%\-\-input\-file\fP no restart.  Note que downloads adicionados
pela função \fI\%aria2.addTorrent()\fP e pela função
\fI\%aria2.addMetalink()\fP método RPC e seus respectivos metadados não podem
ser salvos. Downloads removidos usando a função \fI\%aria2.remove()\fP e
\fI\%aria2.forceRemove()\fP não serão salvos.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-save\-session\-interval=<SEC>
Save error/unfinished downloads to a file specified by
\fI\%\-\-save\-session\fP option every SEC seconds. If \fB0\fP is
given, file will be saved only when aria2 exits. Default: \fB0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-stop=<SEGUNDOS>
Finaliza a aplicação após SEGUNDOS se passarem.
Se \fB0\fP é informado, essa funcionalidade é desabilitada.
Padrão: \fB0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-stop\-with\-process=<PID>
Finaliza a aplicação quando o processo de número PID não estiver executando.
Isso é útil se o processo aria2 foi derivado de um processo precursor.
O processo precursor pode ter criado o processo aria2 com seu próprio pid
e quando o processo precursor terminar por alguma razão, aria2 pode
detectar por ele mesmo, essa situação e executar ele mesmo o shutdown.
Este recurso evita que um processo gere subprocessos que ficam no
limbo.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-truncate\-console\-readout [true|false]
Truncar a linha da console para ajustar\-se a uma linha.
Padrão: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-v, \-\-version
Exibe o número da versão, copyright e informação da configuração e sai.
.UNINDENT
.SS Argumento(s) Opcional(is)
.sp
As opções que possuem seus argumentos delimitados por colchetes ([]), são
opcionais. Normalmente omitindo o argumento, ele será assumido como \fBtrue\fP
(verdadeiro).
Se for usada a forma abreviada dessas opções (como em \fB\-V\fP) e informado
um argumento, estão o nome da opção e seu argumento devem ser concatenados,
por exemplo: (\fB\-Vfalse\fP). Se houver espaços entre a opção e o argumento o
argumento será tratado como URI e normalmente não é isto o esperado.
.SS Unidades (K and M)
.sp
Algumas opções usam \fBK\fP e \fBM\fP para convenientemente representar
1.024 e 1.048.576 respectivamente.  aria2 detecta estas caracteres de maneira
transparente (maiúsculas e minúsculas), portanto podem ser usados
\fIk\(ga\fP ou \fBK\fP e \fBm\fP ou \fBM\fP\&.
.SS URI, MAGNET, TORRENT_FILE, METALINK_FILE
.sp
Podemos especificar múltiplas URIs em uma linha de comando.  A menos que seja
especificada a opção \fI\%\-\-force\-sequential\fP, todas as URIs devem
apontar para o mesmo arquivo que será baixado ou o download falhará.
.sp
Pode\-se especificar um número arbitrátio de URIs de BitTorrent Magnet URI.
Nove que eles sempre serão tratados como downloads separados.
São suportados Hash de Info de 40 characters  e Hast de Info Base32 de 32
characters. Múltiplos parâmetros \fBtr\fP são suportados.  Devido a URI
BitTorrent Magnet poder conter o caracter \fB&\fP, é altamente recomendável
delimitar a URI com apóstrofo single(\fB\(aq\fP) ou aspas double(\fB"\fP).
É altamente recomendável habilitar DHT especialmente quando \fBtr\fP o parâmetro
estiver ausente.  Ver \fI\%http://www.bittorrent.org/beps/bep_0009.html\fP
para maiores detalhes sobre URI BitTorrent Magnet.
.sp
Pode\-se também especificar um número arbitrário de arquivos torrent e
Documentos Metalink armazenados em um dispositivo local. Note que sempre serão
tratados como download distintos. Tanto Metalink4 quanto Metalink da versão 3
são suportados.
.sp
Pode\-se especificar arquivo torrent usando a opção \-T e URI. Fazendo isso
o download será baixado do servidor swarm e HTTP, HTTPS e FTP ao mesmo tempo,
enquanto os dados do HTTP, HTTPS e FTP serão uploaded para o swarm torrent.
Para torrent de um arquivo a URI deve ser completa e apontar inclusive o
recurso ou se a URI terminar com / o nome do torrent será adicionado. Para
múltiplos torrents, name e caminho serão adicionados para formar a URI, para
cada um dos arquivos.
.sp
\fBNOTA:\fP
.INDENT 0.0
.INDENT 3.5
Certifique\-se que a URI seja delimitada por apóstrofo single(\fB\(aq\fP) ou
aspas double(\fB"\fP) se a URI contiver \fB&\fP ou qualquer outro caracter que
tenha significado especial para o shell.
.UNINDENT
.UNINDENT
.SS Continuar Download Interrompido
.sp
Normalmente pode\-se retomar uma transferência apenas executando\-se o comando
aria2c URI, caso a transferência anterior estava sendo feita pelo aria2.
.sp
Caso a transferência anterior estava sendo feita por um navegador ou wget de
maneira sequencial, então utilize a opção \fI\%\-\-continue\fP para
retomar do ponto onde foi interrompida a transferência.
.SS Interação com Eventos (Hook)
.sp
aria2 possui opções para especificar comando arbitrário após um evento
específico ocorrer. Atualmente as seguintes opções estão disponíveis:
.sp
\fI\%\-\-on\-bt\-download\-complete\fP,
\fI\%\-\-on\-download\-pause\fP,
\fI\%\-\-on\-download\-complete\fP\&.
\fI\%\-\-on\-download\-start\fP,
\fI\%\-\-on\-download\-error\fP,
\fI\%\-\-on\-download\-stop\fP\&.
.sp
aria2 passa 3 argumentos para um comando especificado quando este comando for
executado. Estes argumentos são: GID, o número de arquivos e o caminho dos
arquivos.  Para downloads HTTP, HTTPS e FTP normalmente o número de arquivos é 1.
BitTorrent podem conter múltiplos arquivos. Se o número de arquivos é maior
que 1, o caminho do arquivo é o primeiro.  Em outras palavras, este é o valor
da chave path da primeira estrutura se aquela chave for verdadeira como
resposta do método da função \fI\%aria2.getFiles()\fP RPC.
Se for necessário todos os caminhos dos arquivos, considere usar o método
JSON\-RPC/XML\-RPC.  Lembre\-se que o caminho do arquivo pode ser modificado
durante o download no HTTP por causa do redirecionamento ou Disposição do
Conteúdo do Cabeçalho.
.sp
Observemos um exemplo de como são passados argumentos para um comando:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ cat hook.sh
#!/bin/sh
echo "chamado com [$1] [$2] [$3]"
$ aria2c \-\-on\-download\-complete hook.sh http://dobrasil.org/arquivo.iso
chamado com [1] [1] [/caminho/para/arquivo.iso]
.ft P
.fi
.UNINDENT
.UNINDENT
.SH CÓDIGO DE RETORNO OU SAÍDA
.sp
Como aria2 pode manipular múltiplos downloads concomitantemente, podem ser
encontrados vários erros durante uma sessão.  aria2 retorna os códigos de
retorno ou saída com base no último erro encontrado.
.INDENT 0.0
.TP
.B 0
Se todos os downloads terminam com sucesso.
.TP
.B 1
Erro desconhecido ocorreu.
.TP
.B 2
Tempo transcorrido (time out).
.TP
.B 3
Recurso não encontrado.
.TP
.B 4
Se aria2 tentou um número especificado de vezes e obteve “recurso não encontrado”.
Ver opção \fI\%\-\-max\-file\-not\-found\fP\&.
.TP
.B 5
Se download interrompido porque a velocidade de download é muito baixa.
Ver opção \fI\%\-\-lowest\-speed\-limit\fP
.TP
.B 6
Erro na rede (network).
.TP
.B 7
Se existem downloads não concluidos.  Esse erro é reportado somente se
todos os downloads foram concluídos com sucesso mas existe uma fila quando
aria2 foi interrompido por quando foi pressionado \fBCtrl\-C\fP pelo usuário
ou enviado o sinal TERM ou INT.
.TP
.B 8
Se o servidor remoto não suporta retomar um download que deve ser completado.
.TP
.B 9
Não há espaço em disco suficiente para os downloads.
.TP
.B 10
Se o tamanho do pedaço (piece) foi diferente do arquivo de controle .aria2.
Ver opção \fI\%\-\-allow\-piece\-length\-change\fP\&.
.TP
.B 11
Se aria2 estava fazendo o download do mesmo arquivo no momento.
.TP
.B 12
If aria2 estava fazendo o download do mesmo, hash do torrent, no momento.
.TP
.B 13
Se o arquivo já existe. Ver opção \fI\%\-\-allow\-overwrite\fP\&.
.TP
.B 14
Se renomer o arquivo falhou. Ver opção \fI\%\-\-auto\-file\-renaming\fP\&.
.TP
.B 15
Se aria2 não pode abrir o arquivo existente.
.TP
.B 16
Se aria2 não pode criar novo arquivo ou truncar um arquivo já existente.
.TP
.B 17
Se ocorreu erro de I/O no arquivo.
.TP
.B 18
Se aria2 não pode criar diretório.
.TP
.B 19
Se resolução de nomes falhou.
.TP
.B 20
Se aria2 não pode passar documento Metalink.
.TP
.B 21
Se comando FTP falhou.
.TP
.B 22
Se cabeçalho de resposta HTTP está errado ou inesperado.
.TP
.B 23
Se muitos redirecionamentos ocorreram.
.TP
.B 24
Se autorização HTTP falhou.
.TP
.B 25
Se aria2 não pode passar arquivo bencoded file (normalmente arq.  “.torrent”).
.TP
.B 26
Se arquivo “.torrent” estava corrompido ou inexistem informações que aria2
necessita.
.TP
.B 27
Se URI Magnet URI está errada.
.TP
.B 28
Se opção está errada ou não é reconhecida ou argumento inválido de uma opção
foi informado.
.TP
.B 29
Se o servidor remoto não pode manusear uma requisição devido a sobrecarga
temporária ou manutenção.
.TP
.B 30
Se aria2 não pode passar uma requisição JSON\-RPC.
.UNINDENT
.sp
\fBNOTA:\fP
.INDENT 0.0
.INDENT 3.5
Um erro ocorrido em um download completado não será reportado como um
status de saida nem como código de retorno (exit status).
.UNINDENT
.UNINDENT
.SH VARIÁVEIS DE AMBIENTE
.sp
aria2 reconhece as seguintes variáveis de ambiente.
.INDENT 0.0
.TP
.B \fBhttp_proxy [http://][USUÁRIO:SENHA@]SERVIDOR[:PORTA]\fP
Especifica o servidor para uso do HTTP.
Sobrepõe o valor do http\-proxy do arquivo de configuração.
A opção linha de comando \fI\%\-\-http\-proxy\fP sobrepõe este valor.
.TP
.B \fBhttps_proxy [http://][USUÁRIO:SENHA@]SERVIDOR[:PORTA]\fP
Especifica o servidor proxy para uso do HTTPS.
Sobrepõe o valor do https\-proxy do arquivo de configuração.
A opção linha de comando \fI\%\-\-https\-proxy\fP sobrepõe este valor.
.TP
.B \fBftp_proxy [http://][USUÁRIO:SENHA@]SERVIDOR[:PORTA]\fP
Especifica o servidor proxy para uso do FTP.
Sobrepõe o valor do http\-proxy do arquivo de configuração.
A opção linha de comando \fI\%\-\-ftp\-proxy\fP sobrepõe este valor.
.TP
.B \fBall_proxy [http://][USUÁRIO:SENHA@]SERVIDOR[:PORTA]\fP
Especifica o servidor proxy para uso se nenhum protocolo\-específico de proxy
é informado.
Sobrepõe o valor all\-proxy do arquivo de configuração.
A opção linha de comando \fI\%\-\-all\-proxy\fP sobrepõe este valor.
.UNINDENT
.sp
\fBNOTA:\fP
.INDENT 0.0
.INDENT 3.5
Apesar de aria2 aceitar os esquemas \fBftp://\fP e \fBhttps://\fP para proxy de
URI, aria2 assume que \fBhttp://\fP é especificado e não troca o comportamento
com base no esquema especificado.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \fBno_proxy [DOMÍNIO,...]\fP
Especifica nome de servidores, separados por vírgula, domínios e endereços
de rede com ou sem blocos CIDR para os quais não será usado proxy.
Sobrepõe o valor no\-proxy do arquivo de configuração.
A opção linha de comando \fI\%\-\-no\-proxy\fP sobrepõe este valor.
.UNINDENT
.SH ARQUIVOS DE CONFIGURAÇÃO
.SS aria2.conf
.sp
Por padrão, aria2 utiliza \fB$HOME/.aria2/aria2.conf\fP como arquivo de
configuração. Pode ser especificado o caminho do arquivo usando\-se a opção
\fI\%\-\-conf\-path\fP\&.  Se não desejar usar a configuração de arquivo utilize
a opção \fI\%\-\-no\-conf\fP\&.
.sp
O arquivo de configuração é um arquivo texto e possui uma opção por linha.
Em cada linha, deve haver um par (nome\-valor), no formato:
\fBNOME=VALOR\fP, onde nome é o nome longo da linha de comando sem o prefixo
\fB\-\-\fP\&. Pode ser usada a mesma sintaxe da opção da linha de comando.
Linhas que começam com \fB#\fP são tratados como comentários:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# arquivo de simples configuração para aria2c
listen\-port=60000
dht\-listen\-port=60000
seed\-ratio=1.0
max\-upload\-limit=50K
ftp\-pasv=true
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTA:\fP
.INDENT 0.0
.INDENT 3.5
Informações confidenciais como usuário/senha podem ser incluídas no arquivo
de configuração, mas recomenda\-se trocar os bits de seu modo de acesso
(por exemplo: \fBchmod 600 aria2.conf\fP), dessa maneira nenhum outro usuário
consegue ver o conteúdo desse arquivo de configuração.
.UNINDENT
.UNINDENT
.SS dht.dat
.sp
Por padrão, a tabela de rota do IPv4 DHT está em \fB$HOME/.aria2/dht.dat\fP e a
tabela de rota do IPv6 DHT está em \fB$HOME/.aria2/dht6.dat\fP\&.
.SS Netrc
.sp
Por padrão, o suporte a Netrc está habilitado para HTTP, HTTPS e FTP.  Para
desabilitar o suporte a netrc especificar \fI\%\-\-no\-netrc\fP\&.  Seu
arquivo .netrc precisa ter as permissões corretas (600).
.sp
Se o nome do servidor inicia com \fB\&.\fP, aria2 executa pesquisa domínio ao
invés de pesquisa exata. Isto é uma extensão de aria2. Exemplo de pesquisa
de domínio, imagine as seguinte entrada no arquivo .netrc:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
machine .dobrasil.org login meuid password minhasenha
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBaria2.dobrasil.org\fP pesquisa domínio \fB\&.dobrasil.org\fP e usa \fBmeuid\fP e
\fBminhasenha\fP\&.
.sp
Mais exemplos de pesquisa domínio: \fBnobrasil.net\fP não executa pesquisa
domínio \fB\&.nobrasil.net\fP\&. \fBdobrasil.org\fP não faz pesquisa domínio \fB\&.dobrasil.org\fP
pois tem maior amplitude hierárquica por causa do ponto precedente \fB\&.\fP\&.  Se
desejar utilizar \fBdobrasil.org\fP, especificar \fBdobrasil.org\fP\&.
.SS Arquivo de Controle
.sp
aria2 utiliza um arquivo de controle para rastrear o progresso
de um download.  Este arquivo é gravado no mesmo diretório do
arquivo que está sendo baixado e possui o sufixo \fB\&.aria2\fP\&.
Por exemplo,se está baixando arquivo.zip, então o arquivo de controle
será arquivo.zip.aria2.  (Existe apenas uma exceção para essa convenção
que é quando você está baixando um multi torrent, o arquivo de controle
estará no “diretório topo” do torrent com o sufixo \fB\&.aria2\fP\&.  O nome do
“diretório topo” é o valor da chave “name” no diretório “info” do arquivo
torrent).
.sp
Normalmente um arquivo controle é apagado quando o download se completa.  Se
aria2 detecta que o download não pode ser retomado (por exemplo, quando faz
download de um servidor HTTP que não suporta retomar o processamento de um
ponto mas sempre do início), o arquivo de controle não será criado.
.sp
Se você perder o arquivo de controle, não será possivel retomar o download do
ponto onde estava. Mas se há um torrent ou metalink com checksum (verificação) do
arquivo, poderá ser retomado do último ponto especificando a opção \-V na linha
de comando.
.SS Arquivo de Entrada
.sp
O arquivo de entrada pode conter uma lista de URIs para que o aria2 efetua
download.  Podem ser especificados múltiplas URIs para cada simples entidade:
separar as entidades por um caracter TAB ou espaço.
.sp
Cada linha é tratada como se fosse especificada através de um argumento da linha
de comando. Entretando estas linhas são afetadas pela opção
\fI\%\-\-force\-sequential\fP e pela opção \fI\%\-\-parameterized\-uri\fP
.sp
Quando as URIs do arquivo de entrada são diretamente lidas pelo aria2, as URIs
não precisam necessáriamente estarem delimitadas por apóstrofo (\fB\(aq\fP) nem
aspas(\fB"\fP).
.sp
Linhas que começam com \fB#\fP são tratadas como comentário e desprezadas.
.sp
Adicionalmente, as seguintes opções podem ser especificadas após cada linha de
URI. Estas linhas opcionais precisam iniciar com um ou mais espaços.
.INDENT 0.0
.INDENT 2.0
.IP \(bu 2
\fI\%all\-proxy\fP
.IP \(bu 2
\fI\%all\-proxy\-passwd\fP
.IP \(bu 2
\fI\%all\-proxy\-user\fP
.IP \(bu 2
\fI\%allow\-overwrite\fP
.IP \(bu 2
\fI\%allow\-piece\-length\-change\fP
.IP \(bu 2
\fI\%always\-resume\fP
.IP \(bu 2
\fI\%async\-dns\fP
.IP \(bu 2
\fI\%auto\-file\-renaming\fP
.IP \(bu 2
\fI\%bt\-enable\-lpd\fP
.IP \(bu 2
\fI\%bt\-exclude\-tracker\fP
.IP \(bu 2
\fI\%bt\-external\-ip\fP
.IP \(bu 2
\fI\%bt\-hash\-check\-seed\fP
.IP \(bu 2
\fI\%bt\-max\-open\-files\fP
.IP \(bu 2
\fI\%bt\-max\-peers\fP
.IP \(bu 2
\fI\%bt\-metadata\-only\fP
.IP \(bu 2
\fI\%bt\-min\-crypto\-level\fP
.IP \(bu 2
\fI\%bt\-prioritize\-piece\fP
.IP \(bu 2
\fI\%bt\-remove\-unselected\-file\fP
.IP \(bu 2
\fI\%bt\-request\-peer\-speed\-limit\fP
.IP \(bu 2
\fI\%bt\-require\-crypto\fP
.IP \(bu 2
\fI\%bt\-save\-metadata\fP
.IP \(bu 2
\fI\%bt\-seed\-unverified\fP
.IP \(bu 2
\fI\%bt\-stop\-timeout\fP
.IP \(bu 2
\fI\%bt\-tracker\fP
.IP \(bu 2
\fI\%bt\-tracker\-connect\-timeout\fP
.IP \(bu 2
\fI\%bt\-tracker\-interval\fP
.IP \(bu 2
\fI\%bt\-tracker\-timeout\fP
.IP \(bu 2
\fI\%check\-integrity\fP
.IP \(bu 2
\fI\%checksum\fP
.IP \(bu 2
\fI\%conditional\-get\fP
.IP \(bu 2
\fI\%connect\-timeout\fP
.IP \(bu 2
\fI\%continue\fP
.IP \(bu 2
\fI\%dir\fP
.IP \(bu 2
\fI\%dry\-run\fP
.IP \(bu 2
\fI\%enable\-async\-dns6\fP
.UNINDENT
.INDENT 2.0
.IP \(bu 2
\fI\%enable\-http\-keep\-alive\fP
.IP \(bu 2
\fI\%enable\-http\-pipelining\fP
.IP \(bu 2
\fI\%enable\-mmap\fP
.IP \(bu 2
\fI\%enable\-peer\-exchange\fP
.IP \(bu 2
\fI\%file\-allocation\fP
.IP \(bu 2
\fI\%follow\-metalink\fP
.IP \(bu 2
\fI\%follow\-torrent\fP
.IP \(bu 2
\fI\%force\-save\fP
.IP \(bu 2
\fI\%ftp\-passwd\fP
.IP \(bu 2
\fI\%ftp\-pasv\fP
.IP \(bu 2
\fI\%ftp\-proxy\fP
.IP \(bu 2
\fI\%ftp\-proxy\-passwd\fP
.IP \(bu 2
\fI\%ftp\-proxy\-user\fP
.IP \(bu 2
\fI\%ftp\-reuse\-connection\fP
.IP \(bu 2
\fI\%ftp\-type\fP
.IP \(bu 2
\fI\%ftp\-user\fP
.IP \(bu 2
\fI\%hash\-check\-only\fP
.IP \(bu 2
\fI\%header\fP
.IP \(bu 2
\fI\%http\-accept\-gzip\fP
.IP \(bu 2
\fI\%http\-auth\-challenge\fP
.IP \(bu 2
\fI\%http\-no\-cache\fP
.IP \(bu 2
\fI\%http\-passwd\fP
.IP \(bu 2
\fI\%http\-proxy\fP
.IP \(bu 2
\fI\%http\-proxy\-passwd\fP
.IP \(bu 2
\fI\%http\-proxy\-user\fP
.IP \(bu 2
\fI\%http\-user\fP
.IP \(bu 2
\fI\%https\-proxy\fP
.IP \(bu 2
\fI\%https\-proxy\-passwd\fP
.IP \(bu 2
\fI\%https\-proxy\-user\fP
.IP \(bu 2
\fI\%index\-out\fP
.IP \(bu 2
\fI\%lowest\-speed\-limit\fP
.IP \(bu 2
\fI\%max\-connection\-per\-server\fP
.IP \(bu 2
\fI\%max\-download\-limit\fP
.IP \(bu 2
\fI\%max\-file\-not\-found\fP
.IP \(bu 2
\fI\%max\-resume\-failure\-tries\fP
.UNINDENT
.INDENT 2.0
.IP \(bu 2
\fI\%max\-tries\fP
.IP \(bu 2
\fI\%max\-upload\-limit\fP
.IP \(bu 2
\fI\%metalink\-base\-uri\fP
.IP \(bu 2
\fI\%metalink\-enable\-unique\-protocol\fP
.IP \(bu 2
\fI\%metalink\-language\fP
.IP \(bu 2
\fI\%metalink\-location\fP
.IP \(bu 2
\fI\%metalink\-os\fP
.IP \(bu 2
\fI\%metalink\-preferred\-protocol\fP
.IP \(bu 2
\fI\%metalink\-version\fP
.IP \(bu 2
\fI\%min\-split\-size\fP
.IP \(bu 2
\fI\%no\-file\-allocation\-limit\fP
.IP \(bu 2
\fI\%no\-netrc\fP
.IP \(bu 2
\fI\%no\-proxy\fP
.IP \(bu 2
\fI\%out\fP
.IP \(bu 2
\fI\%parameterized\-uri\fP
.IP \(bu 2
\fI\%pause\fP
.IP \(bu 2
\fI\%piece\-length\fP
.IP \(bu 2
\fI\%proxy\-method\fP
.IP \(bu 2
\fI\%realtime\-chunk\-checksum\fP
.IP \(bu 2
\fI\%referer\fP
.IP \(bu 2
\fI\%remote\-time\fP
.IP \(bu 2
\fI\%remove\-control\-file\fP
.IP \(bu 2
\fI\%retry\-wait\fP
.IP \(bu 2
\fI\%reuse\-uri\fP
.IP \(bu 2
\fI\%rpc\-save\-upload\-metadata\fP
.IP \(bu 2
\fI\%seed\-ratio\fP
.IP \(bu 2
\fI\%seed\-time\fP
.IP \(bu 2
\fI\%select\-file\fP
.IP \(bu 2
\fI\%split\fP
.IP \(bu 2
\fI\%stream\-piece\-selector\fP
.IP \(bu 2
\fI\%timeout\fP
.IP \(bu 2
\fI\%uri\-selector\fP
.IP \(bu 2
\fI\%use\-head\fP
.IP \(bu 2
\fI\%user\-agent\fP
.UNINDENT
.UNINDENT
.sp
Estas opções possuem exatamente o mesmo significado das opções existentes na
linha de comando, mas aplicam\-se apenas a URI a que pertencem.
Por favor perceba que dentro de um arquivo, elas não terão o prefixo \fB\-\-\fP\&.
.sp
Por exemplo, o conteúdo do arquivo de entrada uri.txt é:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
http://servidor/arquivo.iso http://espelho/arquivo.iso
  dir=/imagens_iso
  out=arquivo.img
http://fu/ba
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Se aria2 é executado com as opções \fB\-i uri.txt \-d /tmp\fP, então o
\fBarquivo.iso\fP será salvo como \fB/imagens_iso/arquivo.img\fP e será baixado
dos servidores \fBhttp://servidor/arquivo.iso\fP e
\fBhttp://espelho/arquivo.iso\fP\&.
O arquivo \fBba\fP e baixado de \fBhttp://fu/ba\fP e salvo como \fB/tmp/ba\fP\&.
.sp
Em alguns casos, o parâmetro \fI\%out\fP não tem efeito.
Ver nota da opção \fI\%\-\-out\fP para entender as restrições.
.SS Perfil Performance Servidor
.sp
Esta seção descreve o formato do perfil de performance do servidor, composto
por um arquivo de texto plano com cada linha contendo um par \fBNOME=VALOR\fP,
delimitados por virgula. Atualmente esta é a lista de nomes reconhecidos:
.INDENT 0.0
.TP
.B \fBhost\fP
Nome do servidor. Requerido.
.TP
.B \fBprotocol\fP
Protocolo para este perfil, como ftp, http, https. http é requerido.
.TP
.B \fBdl_speed\fP
Velocidade média de download observada no download prévio, em bytes por
segundo.  Requerido.
.TP
.B \fBsc_avg_speed\fP
The average download speed observed in the previous download in
bytes per sec. This value is only updated if the download is done in
single connection environment and only used by
AdaptiveURISelector. Optional.
.TP
.B \fBmc_avg_speed\fP
The average download speed observed in the previous download in
bytes per sec. This value is only updated if the download is done in
multi connection environment and only used by
AdaptiveURISelector. Optional.
.TP
.B \fBcounter\fP
How many times the server is used. Currently this value is only used
by AdaptiveURISelector.  Optional.
.TP
.B \fBlast_updated\fP
Last contact time in GMT with this server, specified in the seconds
since the Epoch(00:00:00 on January 1, 1970, UTC). Required.
.TP
.B \fBstatus\fP
ERROR is set when server cannot be reached or out\-of\-service or
timeout occurred. Otherwise, OK is set.
.UNINDENT
.sp
Estes campos devem existir em uma linha. A ordem dos campos não importa.
Podem ser colocados pares; eles serão simplesmente ignorados.
.sp
Um exemplo abaixo:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
host=localhost, protocol=http, dl_speed=32000, last_updated=1222491640,
status=OK
host=localhost, protocol=ftp, dl_speed=0, last_updated=1222491632,
status=ERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INTERFACE RPC
.sp
aria2 provê o serviço JSON\-RPC sobre HTTP e XML\-RPC sobre HTTP e eles
basicamente possuem a mesma funcionalidade.  aria2 também provê JSON\-RPC
sobre WebSocket que utiliza o mesmo formato, do método e assinatura e
de resposta do formato JSON\-RPC sobre HTTP, mas adicionalmente possui
notificações iniciadas pelo servidor.
Ver detalhes na seção \fI\%JSON\-RPC sobre WebSocket\fP .
.sp
O caminho requisitado do interface JSON\-RPC (sobre HTTP e sobre
WebSocket) é \fB/jsonrpc\fP\&.  O caminho requisitado do interface  XML\-RPC é
\fB/rpc\fP\&.
.sp
A URI WebSocket para JSON\-RPC sobre WebSocket é \fBws://HOST:PORT/jsonrpc\fP\&.
.sp
A implementação JSON\-RPC é baseada na especificação
\fBJSON\-RPC 2.0 <http://jsonrpc.org/specification>\fP e suporta
HTTP POST e GET (JSONP). Usando WebSocket como transporte, é uma extensão
original do aria2.
.sp
A interface JSON\-RPC não suporta notificação em HTTP, mas o servidor RPC irá
enviar a notificação no WebSocket. Não é suportado número de ponto flutuante
O codificação de página deve ser UTF\-8.
.sp
Quanto a seguinte documentação do JSON\-RPC, entenda estrutura JSON como objeto.
.SS Terminologia
.INDENT 0.0
.TP
.B GID
GID(or gid) é a chave para gerenciar cada download. Cada download tem um
único GID. Atualmente GID é armazenado em 64 bits como dado binário no
aria2. Para acesso RPG, isso é representado em uma string hexadecimal
de 16 caracteres (exemplo: \fB2089b05ecca3d829\fP). Normalmente, aria2
gera esse GID para cada download, mas o usuário pode especificar
o GID manualmente usando a opção \fI\%\-\-gid\fP\&. Quando
consultando um download por GID, pode ser especificado o prefixo
do GID como um prefixo único e exclusivo entre outros.
.UNINDENT
.SS Métodos
.sp
São descritos em torno de 35 exemplos, os quais serão numerados
utilizando código fonte com exemplos que usam a linguagem
Python versão 2.7.
.INDENT 0.0
.TP
.B aria2.addUri(uris[, options[, position]])
This method adds new HTTP(S)/FTP/BitTorrent Magnet URI.  \fIuris\fP is of
type array and its element is URI which is of type string.  For
BitTorrent Magnet URI, \fIuris\fP must have only one element and it should
be BitTorrent Magnet URI.  URIs in \fIuris\fP must point to the same file.
If you mix other URIs which point to another file, aria2 does not
complain but download may fail.  \fIoptions\fP is of type struct and its
members are a pair of option name and value. See \fI\%Opções\fP below for
more details.  If \fIposition\fP is given as an integer starting from 0,
the new download is inserted at \fIposition\fP in the waiting queue. If
\fIposition\fP is not given or \fIposition\fP is larger than the size of the
queue, it is appended at the end of the queue.  This method returns
GID of registered download.
.sp
\fBJSON\-RPC EXEMPLO M010\fP
.sp
The following example adds \fBhttp://example.org/file\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import urllib2, json
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.addUri\(aq,
\&...                       \(aqparams\(aq:[[\(aqhttp://example.org/file\(aq]]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> c.read()
\(aq{"id":"qwer","jsonrpc":"2.0","result":"2089b05ecca3d829"}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBXML\-RPC EXEMPLO M020\fP
.sp
The following example adds \fBhttp://example.org/file\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import xmlrpclib
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> s.aria2.addUri([\(aqhttp://example.org/file\(aq])
\(aq2089b05ecca3d829\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The following example adds 2 sources and some options:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> s.aria2.addUri([\(aqhttp://example.org/file\(aq, \(aqhttp://mirror/file\(aq],
                    dict(dir="/tmp"))
\(aqd2703803b52216d1\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The following example adds a download and insert it to the front of
waiting downloads:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> s.aria2.addUri([\(aqhttp://example.org/file\(aq], {}, 0)
\(aqca3d829cee549a4d\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B aria2.addTorrent(torrent[, uris[, options[, position]]])
This method adds BitTorrent download by uploading “.torrent” file.
If you want to add BitTorrent Magnet URI, use \fI\%aria2.addUri()\fP
method instead.  \fItorrent\fP is of type base64 which contains
Base64\-encoded “.torrent” file.  \fIuris\fP is of type array and its
element is URI which is of type string. \fIuris\fP is used for
Web\-seeding.  For single file torrents, URI can be a complete URI
pointing to the resource or if URI ends with /, name in torrent file
is added. For multi\-file torrents, name and path in torrent are
added to form a URI for each file.  \fIoptions\fP is of type struct and
its members are a pair of option name and value. See
\fI\%Opções\fP below for more details.  If \fIposition\fP is given
as an integer starting from 0, the new download is inserted at
\fIposition\fP in the waiting queue. If \fIposition\fP is not given or
\fIposition\fP is larger than the size of the queue, it is appended at
the end of the queue.  This method returns GID of registered
download. If \fI\%\-\-rpc\-save\-upload\-metadata\fP is \fBtrue\fP, the
uploaded data is saved as a file named hex string of SHA\-1 hash of
data plus “.torrent” in the directory specified by \fI\%\-\-dir\fP option.  The example of filename is
\fB0a3893293e27ac0490424c06de4d09242215f0a6.torrent\fP\&.  If same file
already exists, it is overwritten.  If the file cannot be saved
successfully or \fI\%\-\-rpc\-save\-upload\-metadata\fP is \fBfalse\fP,
the downloads added by this method are not saved by
\fI\%\-\-save\-session\fP\&.
.sp
The following examples add local file \fBfile.torrent\fP\&.
.sp
\fBJSON\-RPC EXEMPLO M030\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import urllib2, json, base64
>>> torrent = base64.b64encode(open(\(aqfile.torrent\(aq).read())
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqasdf\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.addTorrent\(aq, \(aqparams\(aq:[torrent]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> c.read()
\(aq{"id":"asdf","jsonrpc":"2.0","result":"2089b05ecca3d829"}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBXML\-RPC EXEMPLO M040\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import xmlrpclib
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> s.aria2.addTorrent(xmlrpclib.Binary(open(\(aqfile.torrent\(aq).read()))
\(aq2089b05ecca3d829\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B aria2.addMetalink(metalink[, options[, position]])
This method adds Metalink download by uploading “.metalink” file.
\fImetalink\fP is of type base64 which contains Base64\-encoded
“.metalink” file.  \fIoptions\fP is of type struct and its members are a
pair of option name and value. See \fI\%Opções\fP below for more
details.  If \fIposition\fP is given as an integer starting from 0, the
new download is inserted at \fIposition\fP in the waiting queue. If
\fIposition\fP is not given or \fIposition\fP is larger than the size of the
queue, it is appended at the end of the queue.  This method returns
array of GID of registered download.  If
\fI\%\-\-rpc\-save\-upload\-metadata\fP is \fBtrue\fP, the uploaded data
is saved as a file named hex string of SHA\-1 hash of data plus
“.metalink” in the directory specified by \fI\%\-\-dir\fP
option.  The example of filename is
\fB0a3893293e27ac0490424c06de4d09242215f0a6.metalink\fP\&.  If same file
already exists, it is overwritten.  If the file cannot be saved
successfully or \fI\%\-\-rpc\-save\-upload\-metadata\fP is \fBfalse\fP,
the downloads added by this method are not saved by
\fI\%\-\-save\-session\fP\&.
.sp
The following examples add local file file.meta4.
.sp
\fBJSON\-RPC EXEMPLO M050\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import urllib2, json, base64
>>> metalink = base64.b64encode(open(\(aqfile.meta4\(aq).read())
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.addMetalink\(aq,
\&...                       \(aqparams\(aq:[metalink]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> c.read()
\(aq{"id":"qwer","jsonrpc":"2.0","result":["2089b05ecca3d829"]}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBXML\-RPC EXEMPLO M060\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import xmlrpclib
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> s.aria2.addMetalink(xmlrpclib.Binary(open(\(aqfile.meta4\(aq).read()))
[\(aq2089b05ecca3d829\(aq]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B aria2.remove(gid)
This method removes the download denoted by \fIgid\fP\&. \fIgid\fP is of type
string. If specified download is in progress, it is stopped at
first. The status of removed download becomes \fBremoved\fP\&.  This method
returns GID of removed download.
.sp
The following examples remove download GID#2089b05ecca3d829.
.sp
\fBJSON\-RPC EXEMPLO M070\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import urllib2, json
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.remove\(aq,
\&...                       \(aqparams\(aq:[\(aq2089b05ecca3d829\(aq]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> c.read()
\(aq{"id":"qwer","jsonrpc":"2.0","result":"2089b05ecca3d829"}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBXML\-RPC EXEMPLO M080\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import xmlrpclib
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> s.aria2.remove(\(aq2089b05ecca3d829\(aq)
\(aq2089b05ecca3d829\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B aria2.forceRemove(gid)
This method removes the download denoted by \fIgid\fP\&.  This method
behaves just like \fI\%aria2.remove()\fP except that this method removes
download without any action which takes time such as contacting
BitTorrent tracker.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.pause(gid)
This method pauses the download denoted by \fIgid\fP\&. \fIgid\fP is of type
string. The status of paused download becomes \fBpaused\fP\&.  If the
download is active, the download is placed on the first position of
waiting queue.  As long as the status is \fBpaused\fP, the download is not
started.  To change status to \fBwaiting\fP, use \fI\%aria2.unpause()\fP method.
This method returns GID of paused download.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.pauseAll()
This method is equal to calling \fI\%aria2.pause()\fP for every active/waiting
download. This methods returns \fBOK\fP for success.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.forcePause(pid)
This method pauses the download denoted by \fIgid\fP\&.  This method
behaves just like \fI\%aria2.pause()\fP except that this method pauses
download without any action which takes time such as contacting
BitTorrent tracker.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.forcePauseAll()
This method is equal to calling \fI\%aria2.forcePause()\fP for every
active/waiting download. This methods returns \fBOK\fP for success.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.unpause(gid)
This method changes the status of the download denoted by \fIgid\fP from
\fBpaused\fP to \fBwaiting\fP\&. This makes the download eligible to restart.
\fIgid\fP is of type string.  This method returns GID of unpaused
download.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.unpauseAll()
This method is equal to calling \fI\%aria2.unpause()\fP for every active/waiting
download. This methods returns \fBOK\fP for success.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.tellStatus(gid[, keys])
This method returns download progress of the download denoted by
\fIgid\fP\&. \fIgid\fP is of type string. \fIkeys\fP is array of string. If it is
specified, the response contains only keys in \fIkeys\fP array. If \fIkeys\fP
is empty or not specified, the response contains all keys.  This is
useful when you just want specific keys and avoid unnecessary
transfers. For example, \fBaria2.tellStatus("2089b05ecca3d829", ["gid", "status"])\fP
returns \fIgid\fP and ‘status’ key.  The response is of type struct and it
contains following keys. The value type is string.
.INDENT 7.0
.TP
.B \fBgid\fP
GID of this download.
.TP
.B \fBstatus\fP
\fBactive\fP for currently downloading/seeding entry. \fBwaiting\fP for the
entry in the queue; download is not started.  \fBpaused\fP for the
paused entry.  \fBerror\fP for the stopped download because of
error. \fBcomplete\fP for the stopped and completed download. \fBremoved\fP
for the download removed by user.
.TP
.B \fBtotalLength\fP
Total length of this download in bytes.
.TP
.B \fBcompletedLength\fP
Completed length of this download in bytes.
.TP
.B \fBuploadLength\fP
Uploaded length of this download in bytes.
.TP
.B \fBbitfield\fP
Hexadecimal representation of the download progress. The highest bit
corresponds to piece index 0. The set bits indicate the piece is
available and unset bits indicate the piece is missing. The spare
bits at the end are set to zero.  When download has not started yet,
this key will not be included in the response.
.TP
.B \fBdownloadSpeed\fP
Download speed of this download measured in bytes/sec.
.TP
.B \fBuploadSpeed\fP
Upload speed of this download measured in bytes/sec.
.TP
.B \fBinfoHash\fP
InfoHash. BitTorrent only.
.TP
.B \fBnumSeeders\fP
The number of seeders the client has connected to. BitTorrent only.
.TP
.B \fBpieceLength\fP
Piece length in bytes.
.TP
.B \fBnumPieces\fP
The number of pieces.
.TP
.B \fBconnections\fP
The number of peers/servers the client has connected to.
.TP
.B \fBerrorCode\fP
The last error code occurred in this download. The value is of type
string. The error codes are defined in \fI\%CÓDIGO DE RETORNO ou SAÍDA\fP
section. This value is only available for stopped/completed downloads.
.TP
.B \fBfollowedBy\fP
List of GIDs which are generated by the consequence of this
download. For example, when aria2 downloaded Metalink file, it
generates downloads described in it(see \fI\%\-\-follow\-metalink\fP
option). This value is useful to track these auto generated
downloads. If there is no such downloads, this key will not
be included in the response.
.TP
.B \fBbelongsTo\fP
GID of a parent download. Some downloads are a part of another
download.  For example, if a file in Metalink has BitTorrent
resource, the download of “.torrent” is a part of that file.  If this
download has no parent, this key will not be included in the
response.
.TP
.B \fBdir\fP
Directory to save files. This key is not available for stopped
downloads.
.TP
.B \fBfiles\fP
Returns the list of files. The element of list is the same struct
used in \fI\%aria2.getFiles()\fP method.
.TP
.B \fBbittorrent\fP
Struct which contains information retrieved from .torrent
file. BitTorrent only. It contains following keys.
.INDENT 7.0
.TP
.B \fBannounceList\fP
List of lists of announce URI. If “.torrent” file contains announce
and no announce\-list, announce is converted to announce\-list
format.
.TP
.B \fBcomment\fP
The comment for the torrent. \fBcomment.utf\-8\fP is used if available.
.TP
.B \fBcreationDate\fP
The creation time of the torrent. The value is an integer since
the Epoch, measured in seconds.
.TP
.B \fBmode\fP
File mode of the torrent. The value is either \fBsingle\fP or \fBmulti\fP\&.
.TP
.B \fBinfo\fP
Struct which contains data from Info dictionary. It contains
following keys.
.INDENT 7.0
.TP
.B \fBname\fP
name in info dictionary. \fBname.utf\-8\fP is used if available.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBJSON\-RPC EXEMPLO M090\fP
.sp
The following example gets information about download GID#2089b05ecca3d829:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.tellStatus\(aq,
\&...                       \(aqparams\(aq:[\(aq2089b05ecca3d829\(aq]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq,
 u\(aqjsonrpc\(aq: u\(aq2.0\(aq,
 u\(aqresult\(aq: {u\(aqbitfield\(aq: u\(aq0000000000\(aq,
             u\(aqcompletedLength\(aq: u\(aq901120\(aq,
             u\(aqconnections\(aq: u\(aq1\(aq,
             u\(aqdir\(aq: u\(aq/downloads\(aq,
             u\(aqdownloadSpeed\(aq: u\(aq15158\(aq,
             u\(aqfiles\(aq: [{u\(aqindex\(aq: u\(aq1\(aq,
                         u\(aqlength\(aq: u\(aq34896138\(aq,
                         u\(aqcompletedLength\(aq: u\(aq34896138\(aq,
                         u\(aqpath\(aq: u\(aq/downloads/file\(aq,
                         u\(aqselected\(aq: u\(aqtrue\(aq,
                         u\(aquris\(aq: [{u\(aqstatus\(aq: u\(aqused\(aq,
                                    u\(aquri\(aq: u\(aqhttp://example.org/file\(aq}]}],
             u\(aqgid\(aq: u\(aq2089b05ecca3d829\(aq,
             u\(aqnumPieces\(aq: u\(aq34\(aq,
             u\(aqpieceLength\(aq: u\(aq1048576\(aq,
             u\(aqstatus\(aq: u\(aqactive\(aq,
             u\(aqtotalLength\(aq: u\(aq34896138\(aq,
             u\(aquploadLength\(aq: u\(aq0\(aq,
             u\(aquploadSpeed\(aq: u\(aq0\(aq}}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The following example gets information specifying keys you are
interested in:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.tellStatus\(aq,
\&...                       \(aqparams\(aq:[\(aq2089b05ecca3d829\(aq,
\&...                                 [\(aqgid\(aq,
\&...                                  \(aqtotalLength\(aq,
\&...                                  \(aqcompletedLength\(aq]]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq,
 u\(aqjsonrpc\(aq: u\(aq2.0\(aq,
 u\(aqresult\(aq: {u\(aqcompletedLength\(aq: u\(aq5701632\(aq,
             u\(aqgid\(aq: u\(aq2089b05ecca3d829\(aq,
             u\(aqtotalLength\(aq: u\(aq34896138\(aq}}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBXML\-RPC EXEMPLO M100\fP
.sp
The following example gets information about download GID#2089b05ecca3d829:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> r = s.aria2.tellStatus(\(aq2089b05ecca3d829\(aq)
>>> pprint(r)
{\(aqbitfield\(aq: \(aqffff80\(aq,
 \(aqcompletedLength\(aq: \(aq34896138\(aq,
 \(aqconnections\(aq: \(aq0\(aq,
 \(aqdir\(aq: \(aq/downloads\(aq,
 \(aqdownloadSpeed\(aq: \(aq0\(aq,
 \(aqerrorCode\(aq: \(aq0\(aq,
 \(aqfiles\(aq: [{\(aqindex\(aq: \(aq1\(aq,
            \(aqlength\(aq: \(aq34896138\(aq,
            \(aqcompletedLength\(aq: \(aq34896138\(aq,
            \(aqpath\(aq: \(aq/downloads/file\(aq,
            \(aqselected\(aq: \(aqtrue\(aq,
            \(aquris\(aq: [{\(aqstatus\(aq: \(aqused\(aq,
                      \(aquri\(aq: \(aqhttp://example.org/file\(aq}]}],
 \(aqgid\(aq: \(aq2089b05ecca3d829\(aq,
 \(aqnumPieces\(aq: \(aq17\(aq,
 \(aqpieceLength\(aq: \(aq2097152\(aq,
 \(aqstatus\(aq: \(aqcomplete\(aq,
 \(aqtotalLength\(aq: \(aq34896138\(aq,
 \(aquploadLength\(aq: \(aq0\(aq,
 \(aquploadSpeed\(aq: \(aq0\(aq}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The following example gets information specifying keys you are
interested in:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> r = s.aria2.tellStatus(\(aq2089b05ecca3d829\(aq, [\(aqgid\(aq, \(aqtotalLength\(aq, \(aqcompletedLength\(aq])
>>> pprint(r)
{\(aqcompletedLength\(aq: \(aq34896138\(aq, \(aqgid\(aq: \(aq2089b05ecca3d829\(aq, \(aqtotalLength\(aq: \(aq34896138\(aq}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B aria2.getUris(gid)
This method returns URIs used in the download denoted by \fIgid\fP\&.  \fIgid\fP
is of type string. The response is of type array and its element is of
type struct and it contains following keys. The value type is string.
.INDENT 7.0
.TP
.B \fBuri\fP
URI
.TP
.B \fBstatus\fP
‘used’ if the URI is already used. ‘waiting’ if the URI is waiting
in the queue.
.UNINDENT
.sp
\fBJSON\-RPC EXEMPLO M110\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.getUris\(aq,
\&...                       \(aqparams\(aq:[\(aq2089b05ecca3d829\(aq]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq,
 u\(aqjsonrpc\(aq: u\(aq2.0\(aq,
 u\(aqresult\(aq: [{u\(aqstatus\(aq: u\(aqused\(aq,
              u\(aquri\(aq: u\(aqhttp://example.org/file\(aq}]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBXML\-RPC EXEMPLO M120\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> r = s.aria2.getUris(\(aq2089b05ecca3d829\(aq)
>>> pprint(r)
[{\(aqstatus\(aq: \(aqused\(aq, \(aquri\(aq: \(aqhttp://example.org/file\(aq}]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B aria2.getFiles(gid)
This method returns file list of the download denoted by \fIgid\fP\&. \fIgid\fP
is of type string. The response is of type array and its element is of
type struct and it contains following keys. The value type is string.
.INDENT 7.0
.TP
.B \fBindex\fP
Index of file. Starting with 1. This is the same order with the
files in multi\-file torrent.
.TP
.B \fBpath\fP
File path.
.TP
.B \fBlength\fP
File size in bytes.
.TP
.B \fBcompletedLength\fP
Completed length of this file in bytes.  Please note that it is
possible that sum of completedLength is less than completedLength in
\fI\%aria2.tellStatus()\fP method.
This is because completedLength in
\fI\%aria2.getFiles()\fP
only calculates completed pieces. On the other hand, completedLength
in
\fI\%aria2.tellStatus()\fP takes into account
of partially completed piece.
.TP
.B \fBselected\fP
\fBtrue\fP if this file is selected by \fI\%\-\-select\-file\fP option. If
\fI\%\-\-select\-file\fP is not specified or this is single torrent or no
torrent download, this value is always \fBtrue\fP\&. Otherwise \fBfalse\fP\&.
.TP
.B \fBuris\fP
Returns the list of URI for this file. The element of list is the
same struct used in \fI\%aria2.getUris()\fP method.
.UNINDENT
.sp
\fBJSON\-RPC EXEMPLO M130\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.getFiles\(aq,
\&...                       \(aqparams\(aq:[\(aq2089b05ecca3d829\(aq]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq,
 u\(aqjsonrpc\(aq: u\(aq2.0\(aq,
 u\(aqresult\(aq: [{u\(aqindex\(aq: u\(aq1\(aq,
              u\(aqlength\(aq: u\(aq34896138\(aq,
              u\(aqcompletedLength\(aq: u\(aq34896138\(aq,
              u\(aqpath\(aq: u\(aq/downloads/file\(aq,
              u\(aqselected\(aq: u\(aqtrue\(aq,
              u\(aquris\(aq: [{u\(aqstatus\(aq: u\(aqused\(aq,
                         u\(aquri\(aq: u\(aqhttp://example.org/file\(aq}]}]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBXML\-RPC EXEMPLO M140\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> r = s.aria2.getFiles(\(aq2089b05ecca3d829\(aq)
>>> pprint(r)
[{\(aqindex\(aq: \(aq1\(aq,
  \(aqlength\(aq: \(aq34896138\(aq,
  \(aqcompletedLength\(aq: \(aq34896138\(aq,
  \(aqpath\(aq: \(aq/downloads/file\(aq,
  \(aqselected\(aq: \(aqtrue\(aq,
  \(aquris\(aq: [{\(aqstatus\(aq: \(aqused\(aq,
            \(aquri\(aq: \(aqhttp://example.org/file\(aq}]}]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B aria2.getPeers(gid)
This method returns peer list of the download denoted by \fIgid\fP\&. \fIgid\fP
is of type string. This method is for BitTorrent only.  The response
is of type array and its element is of type struct and it contains
following keys. The value type is string.
.INDENT 7.0
.TP
.B \fBpeerId\fP
Percent\-encoded peer ID.
.TP
.B \fBip\fP
IP address of the peer.
.TP
.B \fBport\fP
Port number of the peer.
.TP
.B \fBbitfield\fP
Hexadecimal representation of the download progress of the peer. The
highest bit corresponds to piece index 0. The set bits indicate the
piece is available and unset bits indicate the piece is missing. The
spare bits at the end are set to zero.
.TP
.B \fBamChoking\fP
\fBtrue\fP if this client is choking the peer. Otherwise \fBfalse\fP\&.
.TP
.B \fBpeerChoking\fP
\fBtrue\fP if the peer is choking this client. Otherwise \fBfalse\fP\&.
.TP
.B \fBdownloadSpeed\fP
Download speed (byte/sec) that this client obtains from the peer.
.TP
.B \fBuploadSpeed\fP
Upload speed(byte/sec) that this client uploads to the peer.
.TP
.B \fBseeder\fP
\fBtrue\fP is this client is a seeder. Otherwise \fBfalse\fP\&.
.UNINDENT
.sp
\fBJSON\-RPC EXEMPLO M150\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.getPeers\(aq,
\&...                       \(aqparams\(aq:[\(aq2089b05ecca3d829\(aq]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq,
 u\(aqjsonrpc\(aq: u\(aq2.0\(aq,
 u\(aqresult\(aq: [{u\(aqamChoking\(aq: u\(aqtrue\(aq,
              u\(aqbitfield\(aq: u\(aqffffffffffffffffffffffffffffffffffffffff\(aq,
              u\(aqdownloadSpeed\(aq: u\(aq10602\(aq,
              u\(aqip\(aq: u\(aq10.0.0.9\(aq,
              u\(aqpeerChoking\(aq: u\(aqfalse\(aq,
              u\(aqpeerId\(aq: u\(aqaria2%2F1%2E10%2E5%2D%87%2A%EDz%2F%F7%E6\(aq,
              u\(aqport\(aq: u\(aq6881\(aq,
              u\(aqseeder\(aq: u\(aqtrue\(aq,
              u\(aquploadSpeed\(aq: u\(aq0\(aq},
             {u\(aqamChoking\(aq: u\(aqfalse\(aq,
              u\(aqbitfield\(aq: u\(aqffffeff0fffffffbfffffff9fffffcfff7f4ffff\(aq,
              u\(aqdownloadSpeed\(aq: u\(aq8654\(aq,
              u\(aqip\(aq: u\(aq10.0.0.30\(aq,
              u\(aqpeerChoking\(aq: u\(aqfalse\(aq,
              u\(aqpeerId\(aq: u\(aqbittorrent client758\(aq,
              u\(aqport\(aq: u\(aq37842\(aq,
              u\(aqseeder\(aq: u\(aqfalse\(aq,
              u\(aquploadSpeed\(aq: u\(aq6890\(aq}]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBXML\-RPC EXEMPLO M160\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> r = s.aria2.getPeers(\(aq2089b05ecca3d829\(aq)
>>> pprint(r)
[{\(aqamChoking\(aq: \(aqtrue\(aq,
  \(aqbitfield\(aq: \(aqffffffffffffffffffffffffffffffffffffffff\(aq,
  \(aqdownloadSpeed\(aq: \(aq10602\(aq,
  \(aqip\(aq: \(aq10.0.0.9\(aq,
  \(aqpeerChoking\(aq: \(aqfalse\(aq,
  \(aqpeerId\(aq: \(aqaria2%2F1%2E10%2E5%2D%87%2A%EDz%2F%F7%E6\(aq,
  \(aqport\(aq: \(aq6881\(aq,
  \(aqseeder\(aq: \(aqtrue\(aq,
  \(aquploadSpeed\(aq: \(aq0\(aq},
 {\(aqamChoking\(aq: \(aqfalse\(aq,
  \(aqbitfield\(aq: \(aqffffeff0fffffffbfffffff9fffffcfff7f4ffff\(aq,
  \(aqdownloadSpeed\(aq: \(aq8654\(aq,
  \(aqip\(aq: \(aq10.0.0.30\(aq,
  \(aqpeerChoking\(aq: \(aqfalse\(aq,
  \(aqpeerId\(aq: \(aqbittorrent client758\(aq,
  \(aqport\(aq: \(aq37842\(aq,
  \(aqseeder\(aq: \(aqfalse,
  \(aquploadSpeed\(aq: \(aq6890\(aq}]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B aria2.getServers(gid)
This method returns currently connected HTTP, HTTPS, FTP servers of the
download denoted by \fIgid\fP\&. \fIgid\fP is of type string. The response
is of type array and its element is of type struct and it contains
following keys. The value type is string.
.INDENT 7.0
.TP
.B \fBindex\fP
Index of file. Starting with 1. This is the same order with the
files in multi\-file torrent.
.TP
.B \fBservers\fP
The list of struct which contains following keys.
.INDENT 7.0
.TP
.B \fBuri\fP
URI originally added.
.TP
.B \fBcurrentUri\fP
This is the URI currently used for downloading. If redirection is
involved, currentUri and uri may differ.
.TP
.B \fBdownloadSpeed\fP
Download speed (byte/sec)
.UNINDENT
.UNINDENT
.sp
\fBJSON\-RPC EXEMPLO M170\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.getServers\(aq,
\&...                       \(aqparams\(aq:[\(aq2089b05ecca3d829\(aq]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq,
 u\(aqjsonrpc\(aq: u\(aq2.0\(aq,
 u\(aqresult\(aq: [{u\(aqindex\(aq: u\(aq1\(aq,
              u\(aqservers\(aq: [{u\(aqcurrentUri\(aq: u\(aqhttp://example.org/file\(aq,
                            u\(aqdownloadSpeed\(aq: u\(aq10467\(aq,
                            u\(aquri\(aq: u\(aqhttp://example.org/file\(aq}]}]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBXML\-RPC EXEMPLO M180\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> r = s.aria2.getServers(\(aq2089b05ecca3d829\(aq)
>>> pprint(r)
[{\(aqindex\(aq: \(aq1\(aq,
  \(aqservers\(aq: [{\(aqcurrentUri\(aq: \(aqhttp://example.org/dl/file\(aq,
               \(aqdownloadSpeed\(aq: \(aq20285\(aq,
               \(aquri\(aq: \(aqhttp://example.org/file\(aq}]}]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B aria2.tellActive([keys])
This method returns the list of active downloads.  The response is of
type array and its element is the same struct returned by
\fI\%aria2.tellStatus()\fP method. For \fIkeys\fP parameter, please refer to
\fI\%aria2.tellStatus()\fP method.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.tellWaiting(offset, num[, keys])
This method returns the list of waiting download, including paused
downloads. \fIoffset\fP is of type integer and specifies the offset from
the download waiting at the front. \fInum\fP is of type integer and
specifies the number of downloads to be returned.  For \fIkeys\fP
parameter, please refer to \fI\%aria2.tellStatus()\fP method.
.sp
If \fIoffset\fP is a positive integer, this method returns downloads in the
range of [\fIoffset\fP, \fIoffset\fP + \fInum\fP).
.sp
\fIoffset\fP can be a negative integer. \fIoffset\fP == \-1 points last
download in the waiting queue and \fIoffset\fP == \-2 points the download
before the last download, and so on. The downloads in the response are
in reversed order.
.sp
For example, imagine that three downloads “A”,”B” and “C” are waiting
in this order. \fBaria2.tellWaiting(0, 1)\fP returns
\fB["A"]\fP\&. \fBaria2.tellWaiting(1, 2)\fP returns \fB["B", "C"]\fP\&.
\fBaria2.tellWaiting(\-1, 2)\fP returns \fB["C", "B"]\fP\&.
.sp
The response is of type array and its element is the same struct
returned by \fI\%aria2.tellStatus()\fP method.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.tellStopped(offset, num[, keys])
This method returns the list of stopped download.  \fIoffset\fP is of type
integer and specifies the offset from the oldest download. \fInum\fP is of
type integer and specifies the number of downloads to be returned.
For \fIkeys\fP parameter, please refer to \fI\%aria2.tellStatus()\fP method.
.sp
\fIoffset\fP and \fInum\fP have the same semantics as \fI\%aria2.tellWaiting()\fP
method.
.sp
The response is of type array and its element is the same struct
returned by \fI\%aria2.tellStatus()\fP method.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.changePosition(gid, pos, how)
This method changes the position of the download denoted by
\fIgid\fP\&. \fIpos\fP is of type integer. \fIhow\fP is of type string. If \fIhow\fP is
\fBPOS_SET\fP, it moves the download to a position relative to the
beginning of the queue.  If \fIhow\fP is \fBPOS_CUR\fP, it moves the download
to a position relative to the current position. If \fIhow\fP is \fBPOS_END\fP,
it moves the download to a position relative to the end of the
queue. If the destination position is less than 0 or beyond the end of
the queue, it moves the download to the beginning or the end of the
queue respectively. The response is of type integer and it is the
destination position.
.sp
For example, if GID#2089b05ecca3d829 is placed in position 3,
\fBaria2.changePosition(\(aq2089b05ecca3d829\(aq, \-1, \(aqPOS_CUR\(aq)\fP will
change its position to 2. Additional
\fBaria2.changePosition(\(aq2089b05ecca3d829\(aq, 0, \(aqPOS_SET\(aq)\fP will
change its position to 0(the beginning of the queue).
.sp
The following examples move the download GID#2089b05ecca3d829 to the
front of the waiting queue.
.sp
\fBJSON\-RPC EXEMPLO M190\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.changePosition\(aq,
\&...                       \(aqparams\(aq:[\(aq2089b05ecca3d829\(aq, 0, \(aqPOS_SET\(aq]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq, u\(aqjsonrpc\(aq: u\(aq2.0\(aq, u\(aqresult\(aq: 0}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBXML\-RPC EXEMPLO M200\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import xmlrpclib
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> s.aria2.changePosition(\(aq2089b05ecca3d829\(aq, 0, \(aqPOS_SET\(aq)
0
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B aria2.changeUri(gid, fileIndex, delUris, addUris[, position])
This method removes URIs in \fIdelUris\fP from and appends URIs in
\fIaddUris\fP to download denoted by \fIgid\fP\&. \fIdelUris\fP and \fIaddUris\fP are
list of string. A download can contain multiple files and URIs are
attached to each file.  \fIfileIndex\fP is used to select which file to
remove/attach given URIs. \fIfileIndex\fP is 1\-based. \fIposition\fP is used
to specify where URIs are inserted in the existing waiting URI
list. \fIposition\fP is 0\-based. When \fIposition\fP is omitted, URIs are
appended to the back of the list.  This method first execute removal
and then addition. \fIposition\fP is the position after URIs are removed,
not the position when this method is called.  When removing URI, if
same URIs exist in download, only one of them is removed for each URI
in \fIdelUris\fP\&. In other words, there are three URIs
\fBhttp://example.org/aria2\fP and you want remove them all, you have to
specify (at least) 3 \fBhttp://example.org/aria2\fP in \fIdelUris\fP\&.  This
method returns a list which contains 2 integers. The first integer is
the number of URIs deleted. The second integer is the number of URIs
added.
.sp
The following examples add 1 URI \fBhttp://example.org/file\fP to the
file whose index is \fB1\fP and belongs to the download
GID#2089b05ecca3d829.
.sp
\fBJSON\-RPC EXEMPLO M210\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.changeUri\(aq,
\&...                       \(aqparams\(aq:[\(aq2089b05ecca3d829\(aq, 1, [],
                                    [\(aqhttp://example.org/file\(aq]]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq, u\(aqjsonrpc\(aq: u\(aq2.0\(aq, u\(aqresult\(aq: [0, 1]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBXML\-RPC EXEMPLO M220\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import xmlrpclib
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> s.aria2.changeUri(\(aq2089b05ecca3d829\(aq, 1, [],
                      [\(aqhttp://example.org/file\(aq])
[0, 1]
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B aria2.getOption(gid)
This method returns options of the download denoted by \fIgid\fP\&.  The
response is of type struct. Its key is the name of option.  The value
type is string. Note that this method does not return options which
have no default value and have not been set by the command\-line
options, configuration files or RPC methods.
.sp
The following examples get options of the download
GID#2089b05ecca3d829.
.sp
\fBJSON\-RPC EXEMPLO M230\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.getOption\(aq,
\&...                       \(aqparams\(aq:[\(aq2089b05ecca3d829\(aq]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq,
 u\(aqjsonrpc\(aq: u\(aq2.0\(aq,
 u\(aqresult\(aq: {u\(aqallow\-overwrite\(aq: u\(aqfalse\(aq,
             u\(aqallow\-piece\-length\-change\(aq: u\(aqfalse\(aq,
             u\(aqalways\-resume\(aq: u\(aqtrue\(aq,
             u\(aqasync\-dns\(aq: u\(aqtrue\(aq,
 ...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBXML\-RPC EXEMPLO M240\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> r = s.aria2.getOption(\(aq2089b05ecca3d829\(aq)
>>> pprint(r)
{\(aqallow\-overwrite\(aq: \(aqfalse\(aq,
 \(aqallow\-piece\-length\-change\(aq: \(aqfalse\(aq,
 \(aqalways\-resume\(aq: \(aqtrue\(aq,
 \(aqasync\-dns\(aq: \(aqtrue\(aq,
 ....
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B aria2.changeOption(gid, options)
This method changes options of the download denoted by \fIgid\fP
dynamically.  \fIgid\fP is of type string.  \fIoptions\fP is of type struct.
The following options are available for active downloads:
.INDENT 7.0
.IP \(bu 2
\fI\%bt\-max\-peers\fP
.IP \(bu 2
\fI\%bt\-request\-peer\-speed\-limit\fP
.IP \(bu 2
\fI\%bt\-remove\-unselected\-file\fP
.IP \(bu 2
\fI\%force\-save\fP
.IP \(bu 2
\fI\%max\-download\-limit\fP
.IP \(bu 2
\fI\%max\-upload\-limit\fP
.UNINDENT
.sp
For waiting or paused downloads, in addition to the above options,
options listed in \fI\%Arquivo de Entrada\fP subsection are available,
except for following options:
\fI\%dry\-run\fP,
\fI\%metalink\-base\-uri\fP,
\fI\%parameterized\-uri\fP,
\fI\%pause\fP,
\fI\%piece\-length\fP and
\fI\%rpc\-save\-upload\-metadata\fP option.
This method returns \fBOK\fP for success.
.sp
The following examples set \fI\%max\-download\-limit\fP option to \fB20K\fP for the download
GID#2089b05ecca3d829.
.sp
\fBJSON\-RPC EXEMPLO M250\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.changeOption\(aq,
\&...                       \(aqparams\(aq:[\(aq2089b05ecca3d829\(aq,
\&...                                 {\(aqmax\-download\-limit\(aq:\(aq10K\(aq}]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq, u\(aqjsonrpc\(aq: u\(aq2.0\(aq, u\(aqresult\(aq: u\(aqOK\(aq}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBXML\-RPC EXEMPLO M260\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import xmlrpclib
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> s.aria2.changeOption(\(aq2089b05ecca3d829\(aq, {\(aqmax\-download\-limit\(aq:\(aq20K\(aq})
\(aqOK\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B aria2.getGlobalOption()
This method returns global options.  The response is of type
struct. Its key is the name of option.  The value type is string.
Note that this method does not return options which have no default
value and have not been set by the command\-line options, configuration
files or RPC methods. Because global options are used as a template
for the options of newly added download, the response contains keys
returned by \fI\%aria2.getOption()\fP method.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.changeGlobalOption(options)
This method changes global options dynamically.  \fIoptions\fP is of type
struct.
The following options are available:
.INDENT 7.0
.IP \(bu 2
\fI\%download\-result\fP
.IP \(bu 2
\fI\%log\fP
.IP \(bu 2
\fI\%log\-level\fP
.IP \(bu 2
\fI\%max\-concurrent\-downloads\fP
.IP \(bu 2
\fI\%max\-download\-result\fP
.IP \(bu 2
\fI\%max\-overall\-download\-limit\fP
.IP \(bu 2
\fI\%max\-overall\-upload\-limit\fP
.IP \(bu 2
\fI\%save\-cookies\fP
.IP \(bu 2
\fI\%save\-session\fP
.IP \(bu 2
\fI\%server\-stat\-of\fP
.UNINDENT
.sp
In addition to them, options listed in \fI\%Arquivo de Entrada\fP subsection
are available, except for following options:
\fI\%checksum\fP,
\fI\%index\-out\fP,
\fI\%out\fP,
\fI\%pause\fP and
\fI\%select\-file\fP\&.
.sp
Using \fI\%log\fP option, you can dynamically start logging or
change log file. To stop logging, give empty string(“”) as a parameter
value. Note that log file is always opened in append mode. This method
returns \fBOK\fP for success.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.getGlobalStat()
This method returns global statistics such as overall download and
upload speed. The response is of type struct and contains following
keys. The value type is string.
.INDENT 7.0
.TP
.B \fBdownloadSpeed\fP
Overall download speed (byte/sec).
.TP
.B \fBuploadSpeed\fP
Overall upload speed(byte/sec).
.TP
.B \fBnumActive\fP
The number of active downloads.
.TP
.B \fBnumWaiting\fP
The number of waiting downloads.
.TP
.B \fBnumStopped\fP
The number of stopped downloads.
.UNINDENT
.sp
\fBJSON\-RPC EXEMPLO M270\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.getGlobalStat\(aq})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq,
 u\(aqjsonrpc\(aq: u\(aq2.0\(aq,
 u\(aqresult\(aq: {u\(aqdownloadSpeed\(aq: u\(aq21846\(aq,
             u\(aqnumActive\(aq: u\(aq2\(aq,
             u\(aqnumStopped\(aq: u\(aq0\(aq,
             u\(aqnumWaiting\(aq: u\(aq0\(aq,
             u\(aquploadSpeed\(aq: u\(aq0\(aq}}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBXML\-RPC EXEMPLO M280\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> r = s.aria2.getGlobalStat()
>>> pprint(r)
{\(aqdownloadSpeed\(aq: \(aq23136\(aq,
 \(aqnumActive\(aq: \(aq2\(aq,
 \(aqnumStopped\(aq: \(aq0\(aq,
 \(aqnumWaiting\(aq: \(aq0\(aq,
 \(aquploadSpeed\(aq: \(aq0\(aq}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B aria2.purgeDownloadResult()
This method purges completed/error/removed downloads to free memory.
This method returns \fBOK\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.removeDownloadResult(gid)
This method removes completed/error/removed download denoted by \fIgid\fP
from memory. This method returns \fBOK\fP for success.
.sp
The following examples remove the download result of the download
GID#2089b05ecca3d829.
.sp
\fBJSON\-RPC EXEMPLO M290\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.removeDownloadResult\(aq,
\&...                       \(aqparams\(aq:[\(aq2089b05ecca3d829\(aq]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq, u\(aqjsonrpc\(aq: u\(aq2.0\(aq, u\(aqresult\(aq: u\(aqOK\(aq}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBXML\-RPC EXEMPLO M300\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import xmlrpclib
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> s.aria2.removeDownloadResult(\(aq2089b05ecca3d829\(aq)
\(aqOK\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B aria2.getVersion()
This method returns version of the program and the list of enabled
features. The response is of type struct and contains following keys.
.INDENT 7.0
.TP
.B \fBversion\fP
Version number of the program in string.
.TP
.B \fBenabledFeatures\fP
List of enabled features. Each feature name is of type string.
.UNINDENT
.sp
\fBJSON\-RPC EXEMPLO M310\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.getVersion\(aq})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq,
 u\(aqjsonrpc\(aq: u\(aq2.0\(aq,
 u\(aqresult\(aq: {u\(aqenabledFeatures\(aq: [u\(aqAsync DNS\(aq,
                                  u\(aqBitTorrent\(aq,
                                  u\(aqFirefox3 Cookie\(aq,
                                  u\(aqGZip\(aq,
                                  u\(aqHTTPS\(aq,
                                  u\(aqMessage Digest\(aq,
                                  u\(aqMetalink\(aq,
                                  u\(aqXML\-RPC\(aq],
             u\(aqversion\(aq: u\(aq1.11.0\(aq}}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBXML\-RPC EXEMPLO M320\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> r = s.aria2.getVersion()
>>> pprint(r)
{\(aqenabledFeatures\(aq: [\(aqAsync DNS\(aq,
                     \(aqBitTorrent\(aq,
                     \(aqFirefox3 Cookie\(aq,
                     \(aqGZip\(aq,
                     \(aqHTTPS\(aq,
                     \(aqMessage Digest\(aq,
                     \(aqMetalink\(aq,
                     \(aqXML\-RPC\(aq],
 \(aqversion\(aq: \(aq1.11.0\(aq}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B aria2.getSessionInfo()
This method returns session information.
The response is of type struct and contains following key.
.INDENT 7.0
.TP
.B \fBsessionId\fP
Session ID, which is generated each time when aria2 is invoked.
.UNINDENT
.sp
\fBJSON\-RPC EXEMPLO M330\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.getSessionInfo\(aq})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq,
 u\(aqjsonrpc\(aq: u\(aq2.0\(aq,
 u\(aqresult\(aq: {u\(aqsessionId\(aq: u\(aqcd6a3bc6a1de28eb5bfa181e5f6b916d44af31a9\(aq}}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBXML\-RPC EXEMPLO M340\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import xmlrpclib
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> s.aria2.getSessionInfo()
{\(aqsessionId\(aq: \(aqcd6a3bc6a1de28eb5bfa181e5f6b916d44af31a9\(aq}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B aria2.shutdown()
This method shutdowns aria2.  This method returns \fBOK\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.forceShutdown()
This method shutdowns \fBaria2. This method behaves like  aria2.shutdown()\fP
except that any actions which takes time such as contacting BitTorrent
tracker are skipped. This method returns \fBOK\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B system.multicall(methods)
This methods encapsulates multiple method calls in a single request.
\fImethods\fP is of type array and its element is struct.  The struct
contains two keys: \fBmethodName\fP and \fBparams\fP\&.  \fBmethodName\fP is the
method name to call and \fBparams\fP is array containing parameters to the
method.  This method returns array of responses.  The element of array
will either be a one\-item array containing the return value of each
method call or struct of fault element if an encapsulated method call
fails.
.sp
In the following examples, we add 2 downloads. First one is
\fBhttp://example.org/file\fP and second one is \fBfile.torrent\fP\&.
.sp
\fBJSON\-RPC EXEMPLO M350\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import urllib2, json, base64
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqsystem.multicall\(aq,
\&...                       \(aqparams\(aq:[[{\(aqmethodName\(aq:\(aqaria2.addUri\(aq,
\&...                                   \(aqparams\(aq:[[\(aqhttp://example.org\(aq]]},
\&...                                  {\(aqmethodName\(aq:\(aqaria2.addTorrent\(aq,
\&...                                   \(aqparams\(aq:[base64.b64encode(open(\(aqfile.torrent\(aq).read())]}]]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq, u\(aqjsonrpc\(aq: u\(aq2.0\(aq, u\(aqresult\(aq: [[u\(aq2089b05ecca3d829\(aq], [u\(aqd2703803b52216d1\(aq]]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
JSON\-RPC also supports Batch request described in JSON\-RPC 2.0 Specification:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> jsonreq = json.dumps([{\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                        \(aqmethod\(aq:\(aqaria2.addUri\(aq,
\&...                        \(aqparams\(aq:[[\(aqhttp://example.org\(aq]]},
\&...                       {\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqasdf\(aq,
\&...                        \(aqmethod\(aq:\(aqaria2.addTorrent\(aq,
\&...                        \(aqparams\(aq:[base64.b64encode(open(\(aqfile.torrent\(aq).read())]}])
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
[{u\(aqid\(aq: u\(aqqwer\(aq, u\(aqjsonrpc\(aq: u\(aq2.0\(aq, u\(aqresult\(aq: u\(aq2089b05ecca3d829\(aq},
 {u\(aqid\(aq: u\(aqasdf\(aq, u\(aqjsonrpc\(aq: u\(aq2.0\(aq, u\(aqresult\(aq: u\(aqd2703803b52216d1\(aq}]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBXML\-RPC EXEMPLO M360\fP
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import xmlrpclib
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> mc = xmlrpclib.MultiCall(s)
>>> mc.aria2.addUri([\(aqhttp://example.org/file\(aq])
>>> mc.aria2.addTorrent(xmlrpclib.Binary(open(\(aqfile.torrent\(aq).read()))
>>> r = mc()
>>> tuple(r)
(\(aq2089b05ecca3d829\(aq, \(aqd2703803b52216d1\(aq)
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Tratamento de Erros
.sp
Usando JSON\-RPC, aria2 retorna objeto JSON que contém código de erro
no código e a mensagem de erro na mensagem.
.sp
Usando XML\-RPC, aria2 retorna código de falha (faultCode=1) e a mensagem
de erro em (faultString).
.SS Opções
.sp
Same options for \fI\%\-\-input\-file\fP list are available.
Ver subseção \fI\%Arquivo de Entrada\fP para lista completa de opções.
.sp
In the option struct, name element is option name(without preceding
\fB\-\-\fP) and value element is argument as string.
.SS EXEMPLO JSON\-RPC M370
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{\(aqsplit\(aq:\(aq1\(aq, \(aqhttp\-proxy\(aq:\(aqhttp://proxy/\(aq}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS EXEMPLO XML\-RPC M380
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<struct>
  <member>
    <name>split</name>
    <value><string>1</string></value>
  </member>
  <member>
    <name>http\-proxy</name>
    <value><string>http://proxy/</string></value>
  </member>
</struct>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fI\%header\fP and \fI\%index\-out\fP
option are allowed multiple times in
command\-line. Since name should be unique in struct(many XML\-RPC
library implementation uses hash or dict for struct), single string is
not enough. To overcome this situation, they can take array as value
as well as string.
.SS EXEMPLO JSON\-RPC M390
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{\(aqheader\(aq:[\(aqAccept\-Language: ja\(aq, \(aqAccept\-Charset: utf\-8\(aq]}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS EXEMPLO XML\-RPC M400
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<struct>
  <member>
    <name>header</name>
    <value>
      <array>
        <data>
          <value><string>Accept\-Language: ja</string></value>
          <value><string>Accept\-Charset: utf\-8</string></value>
        </data>
      </array>
    </value>
  </member>
</struct>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Following example adds a download with 2 options: dir and header.
header option has 2 values, so it uses a list:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>>> import xmlrpclib
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> opts = dict(dir=\(aq/tmp\(aq,
\&...             header=[\(aqAccept\-Language: ja\(aq,
\&...                     \(aqAccept\-Charset: utf\-8\(aq])
>>> s.aria2.addUri([\(aqhttp://example.org/file\(aq], opts)
\(aq1\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS JSON\-RPC usando HTTP GET
.sp
The JSON\-RPC interface also supports request via HTTP GET.
The encoding scheme in GET parameters is based on JSON\-RPC over HTTP
Specification [2008\-1\-15(RC1)]. The encoding of GET parameters are follows:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/jsonrpc?method=METHOD_NAME&id=ID&params=BASE64_ENCODED_PARAMS
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fBmethod\fP and \fBid\fP are always treated as JSON string and their
encoding must be UTF\-8.
.sp
For example, The encoded string of
\fBaria2.tellStatus(\(aq2089b05ecca3d829\(aq)\fP with \fBid=\(aqfoo\(aq\fP looks like
this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/jsonrpc?method=aria2.tellStatus&id=foo&params=WyIyMDg5YjA1ZWNjYTNkODI5Il0%3D
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fBparams\fP parameter is Base64\-encoded JSON array which usually
appears in \fBparams\fP attribute in JSON\-RPC request object.  In the
above example, the params is \fB["2089b05ecca3d829"]\fP, therefore:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
["2089b05ecca3d829"] \-\-(Base64)\-\-> WyIyMDg5YjA1ZWNjYTNkODI5Il0=
             \-\-(Percent Encode)\-\-> WyIyMDg5YjA1ZWNjYTNkODI5Il0%3D
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The JSON\-RPC interface supports JSONP. You can specify the callback
function in \fBjsoncallback\fP parameter:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/jsonrpc?method=aria2.tellStatus&id=foo&params=WyIyMDg5YjA1ZWNjYTNkODI5Il0%3D&jsoncallback=cb
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For Batch request, \fBmethod\fP and \fBid\fP parameter must not be specified.
Whole request must be specified in \fBparams\fP parameter. For example,
Batch request:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[{\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq, \(aqmethod\(aq:\(aqaria2.getVersion\(aq},
 {\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqasdf\(aq, \(aqmethod\(aq:\(aqaria2.tellActive\(aq}]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will be encoded like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/jsonrpc?params=W3sianNvbnJwYyI6ICIyLjAiLCAiaWQiOiAicXdlciIsICJtZXRob2QiOiAiYXJpYTIuZ2V0VmVyc2lvbiJ9LCB7Impzb25ycGMiOiAiMi4wIiwgImlkIjogImFzZGYiLCAibWV0aG9kIjogImFyaWEyLnRlbGxBY3RpdmUifV0%3D
.ft P
.fi
.UNINDENT
.UNINDENT
.SS JSON\-RPC sobre WebSocket
.sp
JSON\-RPC sobre WebSocket utiliza o mesmo método de assinatura e resposta
do formato JSON\-RPC sobre HTTP. O WebSocket suportado é da versão 13
o qual é detalhado na \fI\%RFC 6455\fP\&.
.sp
Para enviar uma requisição RPC para um servidor RPC, enviar strings serializadas
JSON num frame Text. A resposta do servidor RPC será entregue também em um frame
Text.
.sp
O servidor RPC ira enviar a notificação ao cliente. A notificação é
unidirecional, portanto o cliente que receber a notificação não pode
responde\-la. Esse método de assinatura de notificação é muito usual mas
não provê uma identificação de chave. Os valores associados pelos parâmetros
chave são os dados que a notificação porta. O formato desses valores
variam dependendo do método de notificação. Os seguintes métodos de notificação
são definidos:
.INDENT 0.0
.TP
.B aria2.onDownloadStart(event)
Essa notificação será enviada quando e se o download for iniciado.
\fIevent\fP é o tipo de estrutura e pode conter as seguintes chaves:
O formato do valor é string.
.INDENT 7.0
.TP
.B \fBgid\fP
GID do download.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B aria2.onDownloadPause(event)
Esta notificação será enviada se o download for pausado.  \fIevent\fP
tem a mesma estrutura do argumento \fIevent\fP do método da função
\fI\%aria2.onDownloadStart()\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.onDownloadStop(event)
Essa notificação será enviada se o download for interrompido pelo usuário.
\fIevent\fP tem a mesma estrutura do argumento \fIevent\fP do método da função
\fI\%aria2.onDownloadStart()\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.onDownloadComplete(event)
Esta notificação será enviada quando o download for completado.  Para
downloads BitTorrent, esta notificação será enviada quando for completado e
o (seed) terminar. O \fIevent\fP tem a mesma estrutura do \fIevent\fP do método da
função \fI\%aria2.onDownloadStart()\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.onDownloadError(event)
Esta notificação será enviada se o download for interrompido por causa de
um erro.
O \fIevent\fP tem a mesma estrutura do \fIevent\fP do método da função
\fI\%aria2.onDownloadStart()\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.onBtDownloadComplete(event)
Esta notificação será enviada se o download for completado para o
BitTorrent (mas o seeding pode não ter sido concluído).  O \fIevent\fP tem a
mesma estrutura do \fIevent\fP do método da função \fI\%aria2.onDownloadStart()\fP\&.
.UNINDENT
.SS Exemplo Cliente XML\-RPC Ruby
.sp
O seguinte script Ruby script adiciona \fBhttp://localhost/aria2.tar.bz2\fP em
aria2c no servidor em localhost com a opção \fI\%\-\-dir=/downloads\fP e
imprime a resposta do processamento:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#!/usr/bin/env ruby

require \(aqxmlrpc/client\(aq
require \(aqpp\(aq

client=XMLRPC::Client.new2("http://localhost:6800/rpc")

options={ "dir" => "/downloads" }
result=client.call("aria2.addUri", [ "http://localhost/aria2.tar.bz2" ], options)

pp result
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Se você usa Python, pode usar xmlrpclib (em Python3.x, use xmlrpc.client) para
interagir com aria2:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import xmlrpclib
from pprint import pprint

s = xmlrpclib.ServerProxy("http://localhost:6800/rpc")
r = s.aria2.addUri(["http://localhost/aria2.tar.bz2"], {"dir":"/downloads"})
pprint(r)
.ft P
.fi
.UNINDENT
.UNINDENT
.SH DIVERSOS
.SS Mensagens na Console
.sp
Enquanto executa o download de arquivos, aria2 imprime mensagens na console
para mostrar o progresso dos downloads. Um exemplo abaixo:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[#1 SIZE:400.0KiB/33.2MiB(1%) CN:1 SPD:115.7KiBs ETA:4m51s]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Entenda o que estes números e strings significam.
.INDENT 0.0
.TP
.B \fB#N\fP
N significa GID, o qual é um ID único para cada download.
.TP
.B \fBSIZE\fP
Tamanho Total e Tamanho em bytes. Se a \fI\%\-\-select\-file\fP é usada,
será exibida a somatória do tamanho do arquivo.
.TP
.B \fBSEEDING\fP
Taxa compartilhamento ratio. O cliente está funcionando. Após término do
download do BitTorrent, \fBSIZE\fP será substituído por \fBSEEDING\fP\&.
.TP
.B \fBCN\fP
Número de conexões que o cliente estabeleceu.
.TP
.B \fBSEED\fP
O número de seeders ao qual o cliente está conectado.
.TP
.B \fBSPD\fP
Velocidade do download.
.TP
.B \fBUP\fP
Velocidade e número de bytes transmitidos upload.
.TP
.B \fBETA\fP
Tempo previsto para conclusão.
.TP
.B \fBTOTAL SPD\fP
A soma das velocidades de download para todos downloads paralelos.
.UNINDENT
.sp
Quando aria2 está alocando o espaço para arquivo ou validando o checksum,
adicionalmente exibirá o progresso:
.INDENT 0.0
.TP
.B FileAlloc
GID, tamanho alocado e total em bytes.
.TP
.B Checksum
GID, tamanho validado e total em bytes.
.UNINDENT
.SH EXEMPLOS DOWNLOAD HTTP / FTP
.SS Download Segmentado HTTP/FTP
.SS Download de arquivo
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c "http://servidor/arquivo.zip"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTA:\fP
.INDENT 0.0
.INDENT 3.5
Para parar o download, pressione \fBCtrl\-C\fP\&. Posteriormente pode ser
retomado o mesmo download no mesmo diretório. Podem ser modificadas as URIs
pois elas apontam para o mesmo arquivo.
.UNINDENT
.UNINDENT
.SS Download de arquivo de 2 servidores HTTP diferentes
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c "http://servidor/arquivo.zip" "http://espelhobrasil/arquivo.zip"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Download de arquivo do mesmo servidor HTTP usando 2 conexões
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-x2 \-k1M "http://servidorbrasil/arquivo.zip"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Download de arquivo de servidor HTTP e FTP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c "http://svrbrasil/arquivo.zip" "ftp://servebr/arquivo.zip"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Download arquivos especificados num arquivo txt concomitantemente
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-i arquivo.txt \-j2
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTA:\fP
.INDENT 0.0
.INDENT 3.5
\-j especifica número de downloads paralelos.
.UNINDENT
.UNINDENT
.SS Usando proxy
.sp
Para HTTP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-http\-proxy="http://svrproxy:8080" "http://servidor/arquivo"
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-http\-proxy="http://svrproxy:8080"
\-\-no\-proxy="localhost,127.0.0.1,192.168.0.0/16" "http://servidor/arquivo"

a máscara de rede /16 quer dizer que para toda a rede 192.168 também não
será usado o servidor proxy
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Para FTP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-ftp\-proxy="http://svrproxy:8080" "ftp://servidor/arquivo"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTA:\fP
.INDENT 0.0
.INDENT 3.5
Ver \fI\%\-\-http\-proxy\fP, \fI\%\-\-https\-proxy\fP, \fI\%\-\-ftp\-proxy\fP,
\fI\%\-\-all\-proxy\fP e \fI\%\-\-no\-proxy\fP para detalhes.  Proxy pode ser
especificado nas variáveis de ambiente. Ver seção \fI\%VARIÁVEIS DE AMBIENTE\fP .
.UNINDENT
.UNINDENT
.SS Proxy com autenticação / autorização
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-http\-proxy="http://usuário:senha@svrproxy:8080"
"http://servidor/arquivo"
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-http\-proxy="http://svrproxy:8080"
\-\-http\-proxy\-user="usuário" \-\-http\-proxy\-passwd="senha"
"http://servidor/arquivo"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Download Metalink
.SS Download arquivos com Metalink remoto
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-follow\-metalink=mem "http://servidor/arquivo.metalink"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Download arquivos com Metalink local
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-p \-\-lowest\-speed\-limit=4000 arquivo.metalink
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTA:\fP
.INDENT 0.0
.INDENT 3.5
Para parar o download, pressione \fBCtrl\-C\fP\&.
A transferência pode ser retomada executando aria2c com o mesmo argumento
no mesmo diretório
.UNINDENT
.UNINDENT
.SS Download diversos arquivos Metalink local
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-j2 arquivo1.metalink arquivo2.metalink
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Download só arquivos selecionados usando index
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-select\-file=1\-4,8 arquivo.metalink
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTA:\fP
.INDENT 0.0
.INDENT 3.5
O index é exibido na console usando opção \-S.
.UNINDENT
.UNINDENT
.SS Download um arquivo usando Metalink local com preferência do usuário
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-metalink\-location=pt,us \-\-metalink\-version=1.1 \-\-metalink\-language=pt\-BR arquivo.metalink
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Download BitTorrent
.SS Download arquivos de BitTorrent remotos
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-follow\-torrent=mem "http://servidortorrent/arquivo.torrent"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Download usando arquivo torrent local
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-max\-upload\-limit=40K arquivo.torrent
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTA:\fP
.INDENT 0.0
.INDENT 3.5
–max\-upload\-limit especifica taxa máxima de transmissão (upload).
.UNINDENT
.UNINDENT
.sp
\fBNOTA:\fP
.INDENT 0.0
.INDENT 3.5
Para parar o download, pressione \fBCtrl\-C\fP\&. A transferência pode ser retomada
ao executar aria2c com os mesmos argumentos no mesmo diretório.
.UNINDENT
.UNINDENT
.SS Download usando URI BitTorrent Magnet
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c "magnet:?xt=urn:btih:248D0A1CD08284299DE78D5C1ED359BB46717D8C&dn=aria2"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTA:\fP
.INDENT 0.0
.INDENT 3.5
Lembre\-se inserir delimitadores na URI BitTorrent Magnet, pois ela inclui \fB&\fP
que tem significado de parâmetro. Utilizar apóstrofo(\fB\(aq\fP) ou aspas(\fB"\fP).
.UNINDENT
.UNINDENT
.SS Download 2 torrents
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-j2 arquivo1.torrent arquivo2.torrent
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Download um arquivo usando torrent e servidor HTTP/FTP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-T arqfile.torrent "http://serv1/arqfile" "ftp://svr2/arqfile"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTA:\fP
.INDENT 0.0
.INDENT 3.5
Download de arquivos múltiplos torrent com HTTP e FTP não é suportado.
.UNINDENT
.UNINDENT
.SS Download arquivos selecionados usando index(chamado “download seletivo”)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-select\-file=1\-4,8 arquivo.torrent
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTA:\fP
.INDENT 0.0
.INDENT 3.5
O index é exibido na console usando\-se a opção \-S.
.UNINDENT
.UNINDENT
.SS Especificar arquivo saída
.sp
Para especificar arquivo de saída em Downloads de BitTorrent, faz\-se necessário
conhecer o index do arquivo no torrent usando a opção \fI\%\-\-show\-files\fP\&.
Por exemplo, a saída exibirá algo como:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
idx|path/length
===+======================
  1|dist/base\-2.6.18.iso
   |99.9MiB
\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
  2|dist/driver\-2.6.18.iso
   |169.0MiB
\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Para salvar ‘dist/base\-2.6.18.iso’ em ‘/tmp/meudir/base.iso’ e
‘dist/driver\-2.6.18.iso’ em ‘/tmp/dir/driver.iso’, use o seguinte comando:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-dir=/tmp \-\-index\-out=1=meudir/base.iso \-\-index\-out=2=dir/driver.iso arquivo.torrent
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Modificar porta escuta para peer de entrada
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-listen\-port=7000\-7001,8000 arquivo.torrent
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTA:\fP
.INDENT 0.0
.INDENT 3.5
Já que aria2 não configura o firewall ou porta de roteamento para portas
de encaminhamento, isto deve ser explicitado manualmente por você.
.UNINDENT
.UNINDENT
.SS Especificar condição para para o programa torrent após término do download
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-seed\-time=120 \-\-seed\-ratio=1.0 arquivo.torrent
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTA:\fP
.INDENT 0.0
.INDENT 3.5
No exemplo acima, o programa termina após transcorrer 120 minutos após
término do download ou taxa chegar a 1.0.
.UNINDENT
.UNINDENT
.SS Controlar velocidade upload Torrent
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-max\-upload\-limit=100K arquivo.torrent
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Habilitar IPv4 DHT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-enable\-dht \-\-dht\-listen\-port=6881 arquivo.torrent
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTA:\fP
.INDENT 0.0
.INDENT 3.5
DHT utiliza a porta udp, como o aria2 não configura firewall nem porta de roteamento
ou forwarding, por favor executar estas configurações manualmente.
.UNINDENT
.UNINDENT
.SS Habilitar IPv6 DHT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-enable\-dht6 \-\-dht\-listen\-port=6881 \-\-dht\-listen\-addr6=YOUR_GLOBAL_UNICAST_IPV6_ADDR \-\-enable\-async\-dns6
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTA:\fP
.INDENT 0.0
.INDENT 3.5
Se aria2c não foi compilado com c\-ares, a opção \fI\%\-\-enable\-async\-dns6\fP
não é necessária. aria2 compartilha a mesma porta ente IPv4 e IPv6 DHT.
.UNINDENT
.UNINDENT
.SS Adicionar e remover rastreador URI
.sp
Remover todos os rastreadores (tracker) das URIs descritas no arquivo.torrent
utilize \fBhttp://tracker1/announce\fP e \fBhttp://tracker2/announce\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-bt\-exclude\-tracker="*" \-\-bt\-tracker="http://tracker1/announce,http://tracker2/announce" file.torrent
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Funcionalidades avançadas HTTP
.SS Carregar cookies
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-load\-cookies=cookies.txt "http://servidor/arquivo.zip"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTA:\fP
.INDENT 0.0
.INDENT 3.5
Podem ser utilizados sem nenhuma modificação coookies dos navegadores:
Firefox / Mozilla / Chromium.
.UNINDENT
.UNINDENT
.SS Continuar download iniciado por navegadores ou outros programas
.INDENT 0.0
.INDENT 3.5
Quando desejar continuar ou retomar um download cujo processamento foi
interrompido, seja em navegador ou qualquer outro programa utilize
o aria2c para retomar este download do ponto onde parou.
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-c \-s2 "http://servidor/arquivodedownloadparcial.zip"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Autenticação certificado para Cliente SSL/TLS
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-certificate=/path/para/mycert.pem \-\-private\-key=/path/para/mykey.pem https://servidor/arquivo
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTA:\fP
.INDENT 0.0
.INDENT 3.5
O arquivo especificado na opção \fI\%\-\-private\-key\fP não pode estar
criptografado.  O comportamento do processo fica indefinido quando o
arquivo estiver criptografado.
.UNINDENT
.UNINDENT
.SS Verificar peer em SSL/TLS usando certificados CA
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-ca\-certificate=/path/para/ca\-certificates.crt
\-\-check\-certificate https://servidor/arquivo
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Funcionalidades avançadas adicionais
.SS Controlar velocidade de download
.sp
Quando for necessário o controle da utilização da banda disponível, pode ser
utilizado a opção abaixo. Atenção o sufixo K ou M deve ser em letra maiúscula.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-max\-download\-limit=100K arquivo.metalink
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Reparar um download danificado
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-V arquivo.metalink
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTA:\fP
.INDENT 0.0
.INDENT 3.5
Reparar downloads danificados pode ser mais eficiente usando
BitTorrent ou Metalink com a opção verificação (checksums).
.UNINDENT
.UNINDENT
.SS Desconectar conexão se a velocidade download for menor que um valor
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-lowest\-speed\-limit=10K file.metalink
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Suporte a URI parametrizada
.sp
A URI pode ser especificada como partes de um conjunto:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-P "http://{svr1,svr2,svr3}/arquivo.iso"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Também podem ser especificados sequencias de intervalos:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-Z \-P "http://servidor/imagem[000\-100].png"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTA:\fP
.INDENT 0.0
.INDENT 3.5
\-Z opção requerida para que todas URIs não apontem para o mesmo arquivo,
como declarado no código acima.
.UNINDENT
.UNINDENT
.sp
Especificar incrementos para contador:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-Z \-P "http://servidor/imagem[A\-Z:2].png"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Verificar validação checksum
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-checksum=sha\-1=0192ba11326fe2298c8cb4de616f4d4140213837
http://dobrasil.org/arquivo
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Download Paralelo de uma quantidade arbitrária de URI, Metalink ou Torrent
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-j3 \-Z "http://servidor/arquivo1" arquivo2.torrent arq3.metalink
.ft P
.fi
.UNINDENT
.UNINDENT
.SS BitTorrent Criptografado
.sp
Criptografar todo conjunto usando ARC4:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ aria2c \-\-bt\-min\-crypto\-level=arc4 \-\-bt\-require\-crypto=true arquivo.torrent
.ft P
.fi
.UNINDENT
.UNINDENT
.SH VER TAMBÉM
.sp
Site do Projeto aria2: \fI\%https://aria2.github.io/\fP
.sp
Site do Projeto Metalink: \fI\%http://www.metalinker.org/\fP
.sp
Descrição do Formato Download Metalink: \fI\%RFC 5854\fP
.SH COPYRIGHT
.sp
Copyright (C) 2006, 2014 Tatsuhiro Tsujikawa
Tradução para Português do Brasil 2013, Gilberto dos Santos Alves
utilizando editor kate e gedit no Debian squeeze 6.0.6 novembro de 2012
revisado em março de 2013 usando editor kate e gedit no ubuntu 12.04 LTS
.sp
Esse programa é software livre; pode ser redistribuido e/ou modificado
sob os termos da Licença GNU General Public License como publicada por
Free Software Foundation www.fsf.org; versão 2 da Licença, ou qualquer
versão mais recente, qualquer que seja sua escolha.
.sp
Este programa é distribuído na intenção de ser útil, mas SEM NENHUMA GARANTIA;
sem qualquer garantia implícita de ser COMERCIALIZÁVEL ou para PROPÓSITO
ESPECÍFICO. Consulte a Linceça GNU Genérica para mais detalhes.
.sp
Você precisa receber uma cópia da Licença Pública GNU Genérica junto com
este programa; caso não tenha, escrevá para Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA  02110\-1301  USA
.sp
Adicionalmente, como uma exceção especial, os detentores do direito autoral
autorizam a permissão para compilar programas que possuem ligação com
parte do código com a biblioteca OpenSSL sob certas condições como descritas
em cada arquivo fonte e autorizam a distribuição das das combinações das
ligações incluindo ambas.
Devem ser obedecidos todos os detalhes da Licença Pública GNU Genérica
em relação a OpenSSL.  Caso haja modificação nos arquivos com esta exceção
deverá ser extendida esta exceção para as versões modificadas dos arquivos, mas
isto não é obrigatório.  Se não houver esta intenção exclua esta declaração
de exceção da sua versão.  Caso sejam excluídas as declarações de todos
os arquivos fontes, exclua também esta declaração daqui.
.sp
Anotação sobre divergência entre Manual e o aria2:
.sp
Esta página de manual pode não necessariamente conter a última informação.
Caso haja discrepância entre alguma informação do manual e o aria2, por
favor refira\-se a versão em inglês resultante do comando man aria2c
.SH COPYRIGHT
2013, Tatsuhiro Tsujikawa
.\" Generated by docutils manpage writer.
.
