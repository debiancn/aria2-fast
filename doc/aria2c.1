'\" t
.\"     Title: aria2c
.\"    Author: Tatsuhiro Tsujikawa <t-tujikawa@users.sourceforge.net>
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 02/27/2012
.\"    Manual: Aria2 Manual
.\"    Source: Aria2 1.14.2
.\"  Language: English
.\"
.TH "ARIA2C" "1" "02/27/2012" "Aria2 1\&.14\&.2" "Aria2 Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
aria2c \- The ultra fast download utility
.SH "SYNOPSIS"
.sp
aria2c [\fIOPTIONS\fR] [\fIURI\fR | \fIMAGNET\fR | \fITORRENT_FILE\fR | \fIMETALINK_FILE\fR]\&...
.SH "DESCRIPTION"
.sp
aria2 is a utility for downloading files\&. The supported protocols are HTTP(S), FTP, BitTorrent, and Metalink\&. aria2 can download a file from multiple sources/protocols and tries to utilize your maximum download bandwidth\&. It supports downloading a file from HTTP(S)/FTP and BitTorrent at the same time, while the data downloaded from HTTP(S)/FTP is uploaded to the BitTorrent swarm\&. Using Metalink\(cqs chunk checksums, aria2 automatically validates chunks of data while downloading a file like BitTorrent\&.
.SH "OPTIONS"
.SS "Basic Options"
.PP
\fB\-d\fR, \fB\-\-dir\fR=DIR
.RS 4
The directory to store the downloaded file\&.
.RE
.PP
\fB\-i\fR, \fB\-\-input\-file\fR=FILE
.RS 4
Downloads URIs found in FILE\&. You can specify multiple URIs for a single entity: separate URIs on a single line using the TAB character\&. Reads input from stdin when
\fI\-\fR
is specified\&. Additionally, options can be specified after each line of URI\&. This optional line must start with one or more white spaces and have one option per single line\&. See
\fBInput File\fR
subsection for details\&. See also
\fB\-\-deferred\-input\fR
option\&.
.RE
.PP
\fB\-l\fR, \fB\-\-log\fR=LOG
.RS 4
The file name of the log file\&. If
\fI\-\fR
is specified, log is written to stdout\&. If empty string("") is specified, log is not written to file\&.
.RE
.PP
\fB\-j\fR, \fB\-\-max\-concurrent\-downloads\fR=N
.RS 4
Set maximum number of parallel downloads for every static (HTTP/FTP) URI, torrent and metalink\&. See also
\fB\-s\fR
option\&. Default:
\fI5\fR
.RE
.PP
\fB\-V\fR, \fB\-\-check\-integrity\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Check file integrity by validating piece hashes or a hash of entire file\&. This option has effect only in BitTorrent, Metalink downloads with checksums or HTTP(S)/FTP downloads with
\fB\-\-checksum\fR
option\&. If piece hashes are provided, this option can detect damaged portions of a file and re\-download them\&. If a hash of entire file is provided, hash check is only done when file has been already download\&. This is determined by file length\&. If hash check fails, file is re\-downloaded from scratch\&. If both piece hashes and a hash of entire file are provided, only piece hashes are used\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-c\fR, \fB\-\-continue\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Continue downloading a partially downloaded file\&. Use this option to resume a download started by a web browser or another program which downloads files sequentially from the beginning\&. Currently this option is only applicable to HTTP(S)/FTP downloads\&.
.RE
.PP
\fB\-h\fR, \fB\-\-help\fR[=TAG|KEYWORD]
.RS 4
The help messages are classified with tags\&. A tag starts with "#"\&. For example, type "\-\-help=#http" to get the usage for the options tagged with "#http"\&. If non\-tag word is given, print the usage for the options whose name includes that word\&. Available Values:
\fI#basic\fR,
\fI#advanced\fR,
\fI#http\fR,
\fI#https\fR,
\fI#ftp\fR,
\fI#metalink\fR,
\fI#bittorrent\fR,
\fI#cookie\fR,
\fI#hook\fR,
\fI#file\fR,
\fI#rpc\fR,
\fI#checksum\fR,
\fI#experimental\fR,
\fI#deprecated\fR,
\fI#help\fR,
\fI#all\fR
Default:
\fI#basic\fR
.RE
.SS "HTTP/FTP Options"
.PP
\fB\-\-all\-proxy\fR=PROXY
.RS 4
Use this proxy server for all protocols\&. To erase previously defined proxy, use ""\&. You can override this setting and specify a proxy server for a particular protocol using
\fB\-\-http\-proxy\fR,
\fB\-\-https\-proxy\fR
and
\fB\-\-ftp\-proxy\fR
options\&. This affects all URIs\&. The format of PROXY is [http://][USER:PASSWORD@]HOST[:PORT]\&. See also
\fBENVIRONMENT\fR
section\&.
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
If user and password are embedded in proxy URI and they are also specified by \fB\-\-{http,https,ftp,all}\-proxy\-{user,passwd}\fR options, those appeared later have precedence\&. For example, you have http\-proxy\-user="myname", http\-proxy\-passwd="mypass" in aria2\&.conf and you specify \-\-http\-proxy="http://proxy" in command\-line, then you get HTTP proxy "http://proxy" with user "myname" and password "mypass"\&. Another example: if you specified in command\-line \-\-http\-proxy="http://user:pass@proxy" \-\-http\-proxy\-user="myname" \-\-http\-proxy\-passwd="mypass", then you will get HTTP proxy "http://proxy" with user "myname" and password "mypass"\&. One more example: if you specified in command\-line \-\-http\-proxy\-user="myname" \-\-http\-proxy\-passwd="mypass" \-\-http\-proxy="http://user:pass@proxy", then you get HTTP proxy "http://proxy" with user "user" and password "pass"\&.
.sp .5v
.RE
.PP
\fB\-\-all\-proxy\-passwd\fR=PASSWD
.RS 4
Set password for
\fB\-\-all\-proxy\fR
option\&.
.RE
.PP
\fB\-\-all\-proxy\-user\fR=USER
.RS 4
Set user for
\fB\-\-all\-proxy\fR
option\&.
.RE
.PP
\fB\-\-checksum\fR=TYPE=DIGEST
.RS 4
Set checksum\&. TYPE is hash type\&. The supported hash type is listed in "Hash Algorithms" in "aria2c \-v"\&. DIGEST is hex digest\&. For example, setting sha\-1 digest looks like this: sha\-1=0192ba11326fe2298c8cb4de616f4d4140213838 This option applies only to HTTP(S)/FTP downloads\&.
.RE
.PP
\fB\-\-connect\-timeout\fR=SEC
.RS 4
Set the connect timeout in seconds to establish connection to HTTP/FTP/proxy server\&. After the connection is established, this option makes no effect and
\fB\-\-timeout\fR
option is used instead\&. Default:
\fI60\fR
.RE
.PP
\fB\-\-dry\-run\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
If
\fItrue\fR
is given, aria2 just checks whether the remote file is available and doesn\(cqt download data\&. This option has effect on HTTP/FTP download\&. BitTorrent downloads are canceled if
\fItrue\fR
is specified\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-\-lowest\-speed\-limit\fR=SPEED
.RS 4
Close connection if download speed is lower than or equal to this value(bytes per sec)\&.
\fI0\fR
means aria2 does not have a lowest speed limit\&. You can append
\fIK\fR
or
\fIM\fR(1K = 1024, 1M = 1024K)\&. This option does not affect BitTorrent downloads\&. Default:
\fI0\fR
.RE
.PP
\fB\-x\fR, \fB\-\-max\-connection\-per\-server\fR=NUM
.RS 4
The maximum number of connections to one server for each download\&. Default:
\fI1\fR
.RE
.PP
\fB\-\-max\-file\-not\-found\fR=NUM
.RS 4
If aria2 receives \(oqfile not found\(cq status from the remote HTTP/FTP servers NUM times without getting a single byte, then force the download to fail\&. Specify
\fI0\fR
to disable this option\&. This options is effective only when using HTTP/FTP servers\&. Default:
\fI0\fR
.RE
.PP
\fB\-m\fR, \fB\-\-max\-tries\fR=N
.RS 4
Set number of tries\&.
\fI0\fR
means unlimited\&. See also
\fB\-\-retry\-wait\fR\&. Default:
\fI5\fR
.RE
.PP
\fB\-k\fR, \fB\-\-min\-split\-size\fR=SIZE
.RS 4
aria2 does not split less than 2*SIZE byte range\&. For example, let\(cqs consider downloading 20MiB file\&. If SIZE is 10M, aria2 can split file into 2 range [0\-10MiB) and [10MiB\-20MiB) and download it using 2 sources(if
\fB\-\-split\fR
>= 2, of course)\&. If SIZE is 15M, since 2*15M > 20MiB, aria2 does not split file and download it using 1 source\&. You can append
\fIK\fR
or
\fIM\fR(1K = 1024, 1M = 1024K)\&. Possible Values:
\fI1M\fR\-\fI1024M\fR
Default:
\fI20M\fR
.RE
.PP
\fB\-n\fR, \fB\-\-no\-netrc\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Disables netrc support\&. netrc support is enabled by default\&.
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
netrc file is only read at the startup if \fB\-\-no\-netrc\fR is \fIfalse\fR\&. So if \fB\-\-no\-netrc\fR is \fItrue\fR at the startup, no netrc is available throughout the session\&. You cannot get netrc enabled even if you send \fB\-\-no\-netrc\fR=\fIfalse\fR using \fBaria2\&.changeGlobalOption\fR\&.
.sp .5v
.RE
.PP
\fB\-\-no\-proxy\fR=DOMAINS
.RS 4
Specify comma separated hostnames, domains and network address with or without CIDR block where proxy should not be used\&.
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
For network address with CIDR block, both IPv4 and IPv6 addresses work\&. Current implementation does not resolve hostname in URI to compare network address specified in \fB\-\-no\-proxy\fR\&. So it is only effecive if URI has numeric IP addresses\&.
.sp .5v
.RE
.PP
\fB\-o\fR, \fB\-\-out\fR=FILE
.RS 4
The file name of the downloaded file\&. When
\fB\-Z\fR
option is used, this option is ignored\&.
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
In Metalink or BitTorrent download you cannot specify file name\&. The file name specified here is only used when the URIs fed to aria2 are done by command line without \fB\-i\fR, \fB\-Z\fR option\&. For example: aria2c \-o myfile\&.zip "http://mirror1/file\&.zip" "http://mirror2/file\&.zip"
.sp .5v
.RE
.PP
\fB\-\-proxy\-method\fR=METHOD
.RS 4
Set the method to use in proxy request\&.
\fIMETHOD\fR
is either
\fIget\fR
or
\fItunnel\fR\&. HTTPS downloads always use
\fItunnel\fR
regardless of this option\&. Default:
\fIget\fR
.RE
.PP
\fB\-R\fR, \fB\-\-remote\-time\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Retrieve timestamp of the remote file from the remote HTTP/FTP server and if it is available, apply it to the local file\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-\-reuse\-uri\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Reuse already used URIs if no unused URIs are left\&. Default:
\fItrue\fR
.RE
.PP
\fB\-\-retry\-wait\fR=SEC
.RS 4
Set the seconds to wait between retries\&. With SEC > 0, aria2 will retry download when the HTTP server returns 503 response\&. Default:
\fI0\fR
.RE
.PP
\fB\-\-server\-stat\-of\fR=FILE
.RS 4
Specify the filename to which performance profile of the servers is saved\&. You can load saved data using
\fB\-\-server\-stat\-if\fR
option\&. See
\fBServer Performance Profile\fR
subsection below for file format\&.
.RE
.PP
\fB\-\-server\-stat\-if\fR=FILE
.RS 4
Specify the filename to load performance profile of the servers\&. The loaded data will be used in some URI selector such as
\fIfeedback\fR\&. See also
\fB\-\-uri\-selector\fR
option\&. See
\fBServer Performance Profile\fR
subsection below for file format\&.
.RE
.PP
\fB\-\-server\-stat\-timeout\fR=SEC
.RS 4
Specifies timeout in seconds to invalidate performance profile of the servers since the last contact to them\&. Default:
\fI86400\fR
(24hours)
.RE
.PP
\fB\-s\fR, \fB\-\-split\fR=N
.RS 4
Download a file using N connections\&. If more than N URIs are given, first N URIs are used and remaining URIs are used for backup\&. If less than N URIs are given, those URIs are used more than once so that N connections total are made simultaneously\&. The number of connections to the same host is restricted by
\fB\-\-max\-connection\-per\-server\fR
option\&. See also
\fB\-\-min\-split\-size\fR
option\&. Default:
\fI5\fR
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
Some Metalinks regulate the number of servers to connect\&. aria2 strictly respects them\&. This means that if Metalink defines the maxconnections attribute lower than N, then aria2 uses the value of maxconnections attribute instead of N\&.
.sp .5v
.RE
.PP
\fB\-\-stream\-piece\-selector\fR=SELECTOR
.RS 4
Specify piece selection algorithm used in HTTP/FTP download\&. Piece means fixed length segment which is downloaded in parallel in segmented download\&. If
\fIdefault\fR
is given, aria2 selects piece so that it reduces the number of establishing connection\&. This is reasonable default behaviour because establishing connection is an expensive operation\&. If
\fIinorder\fR
is given, aria2 selects piece which has minimum index\&. Index=0 means first of the file\&. This will be useful to view movie while downloading it\&.
\fB\-\-enable\-http\-pipelining\fR
option may be useful to reduce reconnection overhead\&. Please note that aria2 honors
\fB\-\-min\-split\-size\fR
option, so it will be necessary to specify a reasonable value to
\fB\-\-min\-split\-size\fR
option\&. If
\fIgeom\fR
is given, at the beginning aria2 selects piece which has minimum index like
\fIinorder\fR, but it exponentially increasingly keeps space from previously selected piece\&. This will reduce the number of establishing connection and at the same time it will download the beginning part of the file first\&. This will be useful to view movie while downloading it\&. Default:
\fIdefault\fR
.RE
.PP
\fB\-t\fR, \fB\-\-timeout\fR=SEC
.RS 4
Set timeout in seconds\&. Default:
\fI60\fR
.RE
.PP
\fB\-\-uri\-selector\fR=SELECTOR
.RS 4
Specify URI selection algorithm\&. The possible values are
\fIinorder\fR,
\fIfeedback\fR
and
\fIadaptive\fR\&. If
\fIinorder\fR
is given, URI is tried in the order appeared in the URI list\&. If
\fIfeedback\fR
is given, aria2 uses download speed observed in the previous downloads and choose fastest server in the URI list\&. This also effectively skips dead mirrors\&. The observed download speed is a part of performance profile of servers mentioned in
\fB\-\-server\-stat\-of\fR
and
\fB\-\-server\-stat\-if\fR
options\&. If
\fIadaptive\fR
is given, selects one of the best mirrors for the first and reserved connections\&. For supplementary ones, it returns mirrors which has not been tested yet, and if each of them has already been tested, returns mirrors which has to be tested again\&. Otherwise, it doesn\(cqt select anymore mirrors\&. Like
\fIfeedback\fR, it uses a performance profile of servers\&. Default:
\fIfeedback\fR
.RE
.SS "HTTP Specific Options"
.PP
\fB\-\-ca\-certificate\fR=FILE
.RS 4
Use the certificate authorities in FILE to verify the peers\&. The certificate file must be in PEM format and can contain multiple CA certificates\&. Use
\fB\-\-check\-certificate\fR
option to enable verification\&.
.RE
.PP
\fB\-\-certificate\fR=FILE
.RS 4
Use the client certificate in FILE\&. The certificate must be in PEM format\&. You may use
\fB\-\-private\-key\fR
option to specify the private key\&.
.RE
.PP
\fB\-\-check\-certificate\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Verify the peer using certificates specified in
\fB\-\-ca\-certificate\fR
option\&. Default:
\fItrue\fR
.RE
.PP
\fB\-\-http\-accept\-gzip\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Send "Accept: deflate, gzip" request header and inflate response if remote server responds with "Content\-Encoding: gzip" or "Content\-Encoding: deflate"\&. Default:
\fIfalse\fR
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
Some server responds with "Content\-Encoding: gzip" for files which itself is gzipped file\&. aria2 inflates them anyway because of the response header\&.
.sp .5v
.RE
.PP
\fB\-\-http\-auth\-challenge\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Send HTTP authorization header only when it is requested by the server\&. If
\fIfalse\fR
is set, then authorization header is always sent to the server\&. There is an exception: if username and password are embedded in URI, authorization header is always sent to the server regardless of this option\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-\-http\-no\-cache\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Send Cache\-Control: no\-cache and Pragma: no\-cache header to avoid cached content\&. If
\fIfalse\fR
is given, these headers are not sent and you can add Cache\-Control header with a directive you like using
\fB\-\-header\fR
option\&. Default:
\fItrue\fR
.RE
.PP
\fB\-\-http\-user\fR=USER
.RS 4
Set HTTP user\&. This affects all URIs\&.
.RE
.PP
\fB\-\-http\-passwd\fR=PASSWD
.RS 4
Set HTTP password\&. This affects all URIs\&.
.RE
.PP
\fB\-\-http\-proxy\fR=PROXY
.RS 4
Use this proxy server for HTTP\&. To erase previously defined proxy, use ""\&. See also
\fB\-\-all\-proxy\fR
option\&. This affects all URIs\&. The format of PROXY is [http://][USER:PASSWORD@]HOST[:PORT]
.RE
.PP
\fB\-\-http\-proxy\-passwd\fR=PASSWD
.RS 4
Set password for
\fB\-\-http\-proxy\fR
option\&.
.RE
.PP
\fB\-\-http\-proxy\-user\fR=USER
.RS 4
Set user for
\fB\-\-http\-proxy\fR
option\&.
.RE
.PP
\fB\-\-https\-proxy\fR=PROXY
.RS 4
Use this proxy server for HTTPS\&. To erase previously defined proxy, use ""\&. See also
\fB\-\-all\-proxy\fR
option\&. This affects all URIs\&. The format of PROXY is [http://][USER:PASSWORD@]HOST[:PORT]
.RE
.PP
\fB\-\-https\-proxy\-passwd\fR=PASSWD
.RS 4
Set password for
\fB\-\-https\-proxy\fR
option\&.
.RE
.PP
\fB\-\-https\-proxy\-user\fR=USER
.RS 4
Set user for
\fB\-\-https\-proxy\fR
option\&.
.RE
.PP
\fB\-\-private\-key\fR=FILE
.RS 4
Use the private key in FILE\&. The private key must be decrypted and in PEM format\&. The behavior when encrypted one is given is undefined\&. See also
\fB\-\-certificate\fR
option\&.
.RE
.PP
\fB\-\-referer\fR=REFERER
.RS 4
Set Referer\&. This affects all URIs\&.
.RE
.PP
\fB\-\-enable\-http\-keep\-alive\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Enable HTTP/1\&.1 persistent connection\&. Default:
\fItrue\fR
.RE
.PP
\fB\-\-enable\-http\-pipelining\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Enable HTTP/1\&.1 pipelining\&. Default:
\fIfalse\fR
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
In performance perspective, there is usually no advantage to enable this option\&.
.sp .5v
.RE
.PP
\fB\-\-header\fR=HEADER
.RS 4
Append HEADER to HTTP request header\&. You can use this option repeatedly to specify more than one header: aria2c
\fB\-\-header\fR="X\-A: b78"
\fB\-\-header\fR="X\-B: 9J1" "http://host/file"
.RE
.PP
\fB\-\-load\-cookies\fR=FILE
.RS 4
Load Cookies from FILE using the Firefox3 format (SQLite3), Chromium/Google Chrome (SQLite3) and the Mozilla/Firefox(1\&.x/2\&.x)/Netscape format\&.
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
If aria2 is built without libsqlite3, then it doesn\(cqt support Firefox3 and Chromium/Google Chrome cookie format\&.
.sp .5v
.RE
.PP
\fB\-\-save\-cookies\fR=FILE
.RS 4
Save Cookies to FILE in Mozilla/Firefox(1\&.x/2\&.x)/ Netscape format\&. If FILE already exists, it is overwritten\&. Session Cookies are also saved and their expiry values are treated as 0\&. Possible Values:
\fI/path/to/file\fR
.RE
.PP
\fB\-\-use\-head\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Use HEAD method for the first request to the HTTP server\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-U\fR, \fB\-\-user\-agent\fR=USER_AGENT
.RS 4
Set user agent for HTTP(S) downloads\&. Default:
\fIaria2/$VERSION\fR, $VERSION is replaced by package version\&.
.RE
.SS "FTP Specific Options"
.PP
\fB\-\-ftp\-user\fR=USER
.RS 4
Set FTP user\&. This affects all URIs\&. Default:
\fIanonymous\fR
.RE
.PP
\fB\-\-ftp\-passwd\fR=PASSWD
.RS 4
Set FTP password\&. This affects all URIs\&. If user name is embedded but password is missing in URI, aria2 tries to resolve password using \&.netrc\&. If password is found in \&.netrc, then use it as password\&. If not, use the password specified in this option\&. Default:
\fIARIA2USER@\fR
.RE
.PP
\fB\-p\fR, \fB\-\-ftp\-pasv\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Use the passive mode in FTP\&. If
\fIfalse\fR
is given, the active mode will be used\&. Default:
\fItrue\fR
.RE
.PP
\fB\-\-ftp\-proxy\fR=PROXY
.RS 4
Use this proxy server for FTP\&. To erase previously defined proxy, use ""\&. See also
\fB\-\-all\-proxy\fR
option\&. This affects all URIs\&. The format of PROXY is [http://][USER:PASSWORD@]HOST[:PORT]
.RE
.PP
\fB\-\-ftp\-proxy\-passwd\fR=PASSWD
.RS 4
Set password for
\fB\-\-ftp\-proxy\fR
option\&.
.RE
.PP
\fB\-\-ftp\-proxy\-user\fR=USER
.RS 4
Set user for
\fB\-\-ftp\-proxy\fR
option\&.
.RE
.PP
\fB\-\-ftp\-type\fR=TYPE
.RS 4
Set FTP transfer type\&. TYPE is either
\fIbinary\fR
or
\fIascii\fR\&. Default:
\fIbinary\fR
.RE
.PP
\fB\-\-ftp\-reuse\-connection\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Reuse connection in FTP\&. Default:
\fItrue\fR
.RE
.SS "BitTorrent/Metalink Options"
.PP
\fB\-\-select\-file\fR=INDEX\&...
.RS 4
Set file to download by specifying its index\&. You can find the file index using the
\fB\-\-show\-files\fR
option\&. Multiple indexes can be specified by using ",", for example:
\fI3,6\fR\&. You can also use "\-" to specify a range:
\fI1\-5\fR\&. "," and "\-" can be used together:
\fI1\-5,8,9\fR\&. When used with the \-M option, index may vary depending on the query (see
\fB\-\-metalink\-\fR* options)\&.
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
In multi file torrent, the adjacent files specified by this option may also be downloaded\&. This is by design, not a bug\&. A single piece may include several files or part of files, and aria2 writes the piece to the appropriate files\&.
.sp .5v
.RE
.PP
\fB\-S\fR, \fB\-\-show\-files\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Print file listing of \&.torrent, \&.meta4 and \&.metalink file and exit\&. In case of \&.torrent file, additional information (infohash, piece length, etc) is also printed\&.
.RE
.SS "BitTorrent Specific Options"
.PP
\fB\-\-bt\-enable\-lpd\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Enable Local Peer Discovery\&. If a private flag is set in a torrent, aria2 doesn\(cqt use this feature for that download even if
\fItrue\fR
is given\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-\-bt\-exclude\-tracker\fR=URI[,\&...]
.RS 4
Comma separated list of BitTorrent tracker\(cqs announce URI to remove\&. You can use special value "*" which matches all URIs, thus removes all announce URIs\&. When specifying "*" in shell command\-line, don\(cqt forget to escape or quote it\&. See also
\fB\-\-bt\-tracker\fR
option\&.
.RE
.PP
\fB\-\-bt\-external\-ip\fR=IPADDRESS
.RS 4
Specify the external IP address to report to a BitTorrent tracker\&. Although this function is named "external", it can accept any kind of IP addresses\&. IPADDRESS must be a numeric IP address\&.
.RE
.PP
\fB\-\-bt\-hash\-check\-seed\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
If
\fItrue\fR
is given, after hash check using
\fB\-\-check\-integrity\fR
option and file is complete, continue to seed file\&. If you want to check file and download it only when it is damaged or incomplete, set this option to
\fIfalse\fR\&. This option has effect only on BitTorrent download\&. Default:
\fItrue\fR
.RE
.PP
\fB\-\-bt\-lpd\-interface\fR=INTERFACE
.RS 4
Use given interface for Local Peer Discovery\&. If this option is not specified, the default interface is chosen\&. You can specify interface name and IP address\&. Possible Values: interface, IP addres
.RE
.PP
\fB\-\-bt\-max\-open\-files\fR=NUM
.RS 4
Specify maximum number of files to open in each BitTorrent download\&. Default:
\fI100\fR
.RE
.PP
\fB\-\-bt\-max\-peers\fR=NUM
.RS 4
Specify the maximum number of peers per torrent\&.
\fI0\fR
means unlimited\&. See also
\fB\-\-bt\-request\-peer\-speed\-limit\fR
option\&. Default:
\fI55\fR
.RE
.PP
\fB\-\-bt\-metadata\-only\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Download metadata only\&. The file(s) described in metadata will not be downloaded\&. This option has effect only when BitTorrent Magnet URI is used\&. See also
\fB\-\-bt\-save\-metadata\fR
option\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-\-bt\-min\-crypto\-level\fR=\fIplain\fR|\fIarc4\fR
.RS 4
Set minimum level of encryption method\&. If several encryption methods are provided by a peer, aria2 chooses the lowest one which satisfies the given level\&. Default:
\fIplain\fR
.RE
.PP
\fB\-\-bt\-prioritize\-piece\fR=\fIhead\fR[=SIZE],\fItail\fR[=SIZE]
.RS 4
Try to download first and last pieces of each file first\&. This is useful for previewing files\&. The argument can contain 2 keywords:
\fIhead\fR
and
\fItail\fR\&. To include both keywords, they must be separated by comma\&. These keywords can take one parameter, SIZE\&. For example, if
\fIhead\fR=SIZE is specified, pieces in the range of first SIZE bytes of each file get higher priority\&.
\fItail\fR=SIZE means the range of last SIZE bytes of each file\&. SIZE can include
\fIK\fR
or
\fIM\fR(1K = 1024, 1M = 1024K)\&. If SIZE is omitted, SIZE=1M is used\&.
.RE
.PP
\fB\-\-bt\-require\-crypto\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
If true is given, aria2 doesn\(cqt accept and establish connection with legacy BitTorrent handshake(\e19BitTorrent protocol)\&. Thus aria2 always uses Obfuscation handshake\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-\-bt\-request\-peer\-speed\-limit\fR=SPEED
.RS 4
If the whole download speed of every torrent is lower than SPEED, aria2 temporarily increases the number of peers to try for more download speed\&. Configuring this option with your preferred download speed can increase your download speed in some cases\&. You can append
\fIK\fR
or
\fIM\fR(1K = 1024, 1M = 1024K)\&. Default:
\fI50K\fR
.RE
.PP
\fB\-\-bt\-save\-metadata\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Save metadata as \&.torrent file\&. This option has effect only when BitTorrent Magnet URI is used\&. The filename is hex encoded info hash with suffix \&.torrent\&. The directory to be saved is the same directory where download file is saved\&. If the same file already exists, metadata is not saved\&. See also
\fB\-\-bt\-metadata\-only\fR
option\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-\-bt\-seed\-unverified\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Seed previously downloaded files without verifying piece hashes\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-\-bt\-stop\-timeout\fR=SEC
.RS 4
Stop BitTorrent download if download speed is 0 in consecutive SEC seconds\&. If
\fI0\fR
is given, this feature is disabled\&. Default:
\fI0\fR
.RE
.PP
\fB\-\-bt\-tracker\fR=URI[,\&...]
.RS 4
Comma separated list of additional BitTorrent tracker\(cqs announce URI\&. These URIs are not affected by
\fB\-\-bt\-exclude\-tracker\fR
option because they are added after URIs in
\fB\-\-bt\-exclude\-tracker\fR
option are removed\&.
.RE
.PP
\fB\-\-bt\-tracker\-connect\-timeout\fR=SEC
.RS 4
Set the connect timeout in seconds to establish connection to tracker\&. After the connection is established, this option makes no effect and
\fB\-\-bt\-tracker\-timeout\fR
option is used instead\&. Default:
\fI60\fR
.RE
.PP
\fB\-\-bt\-tracker\-interval\fR=SEC
.RS 4
Set the interval in seconds between tracker requests\&. This completely overrides interval value and aria2 just uses this value and ignores the min interval and interval value in the response of tracker\&. If
\fI0\fR
is set, aria2 determines interval based on the response of tracker and the download progress\&. Default:
\fI0\fR
.RE
.PP
\fB\-\-bt\-tracker\-timeout\fR=SEC
.RS 4
Set timeout in seconds\&. Default:
\fI60\fR
.RE
.PP
\fB\-\-dht\-entry\-point\fR=HOST:PORT
.RS 4
Set host and port as an entry point to IPv4 DHT network\&.
.RE
.PP
\fB\-\-dht\-entry\-point6\fR=HOST:PORT
.RS 4
Set host and port as an entry point to IPv6 DHT network\&.
.RE
.PP
\fB\-\-dht\-file\-path\fR=PATH
.RS 4
Change the IPv4 DHT routing table file to PATH\&. Default:
\fI$HOME/\&.aria2/dht\&.dat\fR
.RE
.PP
\fB\-\-dht\-file\-path6\fR=PATH
.RS 4
Change the IPv6 DHT routing table file to PATH\&. Default:
\fI$HOME/\&.aria2/dht6\&.dat\fR
.RE
.PP
\fB\-\-dht\-listen\-addr6\fR=ADDR
.RS 4
Specify address to bind socket for IPv6 DHT\&. It should be a global unicast IPv6 address of the host\&.
.RE
.PP
\fB\-\-dht\-listen\-port\fR=PORT\&...
.RS 4
Set UDP listening port for both IPv4 and IPv6 DHT\&. Multiple ports can be specified by using ",", for example:
\fI6881,6885\fR\&. You can also use "\-" to specify a range:
\fI6881\-6999\fR\&. "," and "\-" can be used together\&. Default:
\fI6881\-6999\fR
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
Make sure that the specified ports are open for incoming UDP traffic\&.
.sp .5v
.RE
.PP
\fB\-\-dht\-message\-timeout\fR=SEC
.RS 4
Set timeout in seconds\&. Default:
\fI10\fR
.RE
.PP
\fB\-\-enable\-dht\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Enable IPv4 DHT functionality\&. If a private flag is set in a torrent, aria2 doesn\(cqt use DHT for that download even if
\fItrue\fR
is given\&. Default:
\fItrue\fR
.RE
.PP
\fB\-\-enable\-dht6\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Enable IPv6 DHT functionality\&. If a private flag is set in a torrent, aria2 doesn\(cqt use DHT for that download even if
\fItrue\fR
is given\&. Use
\fB\-\-dht\-listen\-port\fR
option to specify port number to listen on\&. See also
\fB\-\-dht\-listen\-addr6\fR
option\&.
.RE
.PP
\fB\-\-enable\-peer\-exchange\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Enable Peer Exchange extension\&. If a private flag is set in a torrent, this feature is disabled for that download even if
\fItrue\fR
is given\&. Default:
\fItrue\fR
.RE
.PP
\fB\-\-follow\-torrent\fR=\fItrue\fR|\fIfalse\fR|\fImem\fR
.RS 4
If
\fItrue\fR
or
\fImem\fR
is specified, when a file whose suffix is "\&.torrent" or content type is "application/x\-bittorrent" is downloaded, aria2 parses it as a torrent file and downloads files mentioned in it\&. If
\fImem\fR
is specified, a torrent file is not written to the disk, but is just kept in memory\&. If
\fIfalse\fR
is specified, the action mentioned above is not taken\&. Default:
\fItrue\fR
.RE
.PP
\fB\-O\fR, \fB\-\-index\-out\fR=INDEX=PATH
.RS 4
Set file path for file with index=INDEX\&. You can find the file index using the
\fB\-\-show\-files\fR
option\&. PATH is a relative path to the path specified in
\fB\-\-dir\fR
option\&. You can use this option multiple times\&. Using this option, you can specify the output filenames of BitTorrent downloads\&.
.RE
.PP
\fB\-\-listen\-port\fR=PORT\&...
.RS 4
Set TCP port number for BitTorrent downloads\&. Multiple ports can be specified by using ",", for example:
\fI6881,6885\fR\&. You can also use "\-" to specify a range:
\fI6881\-6999\fR\&. "," and "\-" can be used together:
\fI6881\-6889,6999\fR\&. Default:
\fI6881\-6999\fR
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
Make sure that the specified ports are open for incoming TCP traffic\&.
.sp .5v
.RE
.PP
\fB\-\-max\-overall\-upload\-limit\fR=SPEED
.RS 4
Set max overall upload speed in bytes/sec\&.
\fI0\fR
means unrestricted\&. You can append
\fIK\fR
or
\fIM\fR(1K = 1024, 1M = 1024K)\&. To limit the upload speed per torrent, use
\fB\-\-max\-upload\-limit\fR
option\&. Default:
\fI0\fR
.RE
.PP
\fB\-u\fR, \fB\-\-max\-upload\-limit\fR=SPEED
.RS 4
Set max upload speed per each torrent in bytes/sec\&.
\fI0\fR
means unrestricted\&. You can append
\fIK\fR
or
\fIM\fR(1K = 1024, 1M = 1024K)\&. To limit the overall upload speed, use
\fB\-\-max\-overall\-upload\-limit\fR
option\&. Default:
\fI0\fR
.RE
.PP
\fB\-\-peer\-id\-prefix\fR=PEER_ID_PREFIX
.RS 4
Specify the prefix of peer ID\&. The peer ID in BitTorrent is 20 byte length\&. If more than 20 bytes are specified, only first 20 bytes are used\&. If less than 20 bytes are specified, random byte data are added to make its length 20 bytes\&. Default:
\fIaria2/$VERSION\-\fR, $VERSION is replaced by package version\&.
.RE
.PP
\fB\-\-seed\-ratio\fR=RATIO
.RS 4
Specify share ratio\&. Seed completed torrents until share ratio reaches RATIO\&. You are strongly encouraged to specify equals or more than
\fI1\&.0\fR
here\&. Specify
\fI0\&.0\fR
if you intend to do seeding regardless of share ratio\&. If
\fB\-\-seed\-time\fR
option is specified along with this option, seeding ends when at least one of the conditions is satisfied\&. Default:
\fI1\&.0\fR
.RE
.PP
\fB\-\-seed\-time\fR=MINUTES
.RS 4
Specify seeding time in minutes\&. Also see the
\fB\-\-seed\-ratio\fR
option\&.
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
Specifying \fB\-\-seed\-time\fR=\fI0\fR disables seeding after download completed\&.
.sp .5v
.RE
.PP
\fB\-T\fR, \fB\-\-torrent\-file\fR=TORRENT_FILE
.RS 4
The path to the \&.torrent file\&. You are not required to use this option because you can specify \&.torrent files without
\fB\-T\fR\&.
.RE
.SS "Metalink Specific Options"
.PP
\fB\-\-follow\-metalink\fR=\fItrue\fR|\fIfalse\fR|\fImem\fR
.RS 4
If
\fItrue\fR
or
\fImem\fR
is specified, when a file whose suffix is "\&.meta4" or "\&.metalink" or content type of "application/metalink4+xml" or "application/metalink+xml" is downloaded, aria2 parses it as a metalink file and downloads files mentioned in it\&. If
\fImem\fR
is specified, a metalink file is not written to the disk, but is just kept in memory\&. If
\fIfalse\fR
is specified, the action mentioned above is not taken\&. Default:
\fItrue\fR
.RE
.PP
\fB\-\-metalink\-base\-uri\fR=URI
.RS 4
Specify base URI to resolve relative URI in metalink:url and metalink:metaurl element in a metalink file stored in local disk\&. If URI points to a directory, URI must end with
\fI/\fR\&.
.RE
.PP
\fB\-M\fR, \fB\-\-metalink\-file\fR=METALINK_FILE
.RS 4
The file path to \&.meta4 and \&.metalink file\&. Reads input from stdin when
\fI\-\fR
is specified\&. You are not required to use this option because you can specify \&.metalink files without
\fB\-M\fR\&.
.RE
.PP
\fB\-\-metalink\-language\fR=LANGUAGE
.RS 4
The language of the file to download\&.
.RE
.PP
\fB\-\-metalink\-location\fR=LOCATION[,\&...]
.RS 4
The location of the preferred server\&. A comma\-delimited list of locations is acceptable, for example,
\fIjp,us\fR\&.
.RE
.PP
\fB\-\-metalink\-os\fR=OS
.RS 4
The operating system of the file to download\&.
.RE
.PP
\fB\-\-metalink\-version\fR=VERSION
.RS 4
The version of the file to download\&.
.RE
.PP
\fB\-\-metalink\-preferred\-protocol\fR=PROTO
.RS 4
Specify preferred protocol\&. The possible values are
\fIhttp\fR,
\fIhttps\fR,
\fIftp\fR
and
\fInone\fR\&. Specify
\fInone\fR
to disable this feature\&. Default:
\fInone\fR
.RE
.PP
\fB\-\-metalink\-enable\-unique\-protocol\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
If
\fItrue\fR
is given and several protocols are available for a mirror in a metalink file, aria2 uses one of them\&. Use
\fB\-\-metalink\-preferred\-protocol\fR
option to specify the preference of protocol\&. Default:
\fItrue\fR
.RE
.SS "RPC Options"
.PP
\fB\-\-enable\-rpc\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Enable JSON\-RPC/XML\-RPC server\&. It is strongly recommended to set username and password using
\fB\-\-rpc\-user\fR
and
\fB\-\-rpc\-passwd\fR
option\&. See also
\fB\-\-rpc\-listen\-port\fR
option\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-\-pause\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Pause download after added\&. This option is effective only when
\fB\-\-enable\-rpc\fR=\fItrue\fR
is given\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-\-rpc\-allow\-origin\-all\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Add Access\-Control\-Allow\-Origin header field with value
\fI*\fR
to the RPC response\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-\-rpc\-listen\-all\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Listen incoming JSON\-RPC/XML\-RPC requests on all network interfaces\&. If false is given, listen only on local loopback interface\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-\-rpc\-listen\-port\fR=PORT
.RS 4
Specify a port number for JSON\-RPC/XML\-RPC server to listen to\&. Possible Values:
\fI1024\fR\-\fI65535\fR
Default:
\fI6800\fR
.RE
.PP
\fB\-\-rpc\-max\-request\-size\fR=SIZE
.RS 4
Set max size of JSON\-RPC/XML\-RPC request\&. If aria2 detects the request is more than SIZE bytes, it drops connection\&. Default:
\fI2M\fR
.RE
.PP
\fB\-\-rpc\-passwd\fR=PASSWD
.RS 4
Set JSON\-RPC/XML\-RPC password\&.
.RE
.PP
\fB\-\-rpc\-user\fR=USER
.RS 4
Set JSON\-RPC/XML\-RPC user\&.
.RE
.SS "Advanced Options"
.PP
\fB\-\-allow\-overwrite\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Restart download from scratch if the corresponding control file doesn\(cqt exist\&. See also
\fB\-\-auto\-file\-renaming\fR
option\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-\-allow\-piece\-length\-change\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
If false is given, aria2 aborts download when a piece length is different from one in a control file\&. If true is given, you can proceed but some download progress will be lost\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-\-always\-resume\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Always resume download\&. If
\fItrue\fR
is given, aria2 always tries to resume download and if resume is not possible, aborts download\&. If
\fIfalse\fR
is given, when all given URIs do not support resume or aria2 encounters
\fIN\fR
URIs which does not support resume (\fIN\fR
is the value specified using
\fB\-\-max\-resume\-failure\-tries\fR
option), aria2 downloads file from scratch\&. See
\fB\-\-max\-resume\-failure\-tries\fR
option\&. Default:
\fItrue\fR
.RE
.PP
\fB\-\-async\-dns\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Enable asynchronous DNS\&. Default:
\fItrue\fR
.RE
.PP
\fB\-\-async\-dns\-server\fR=IPADDRESS[,\&...]
.RS 4
Comma separated list of DNS server address used in asynchronous DNS resolver\&. Usually asynchronous DNS resolver reads DNS server addresses from
\fI/etc/resolv\&.conf\fR\&. When this option is used, it uses DNS servers specified in this option instead of ones in
\fI/etc/resolv\&.conf\fR\&. You can specify both IPv4 and IPv6 address\&. This option is useful when the system does not have
\fI/etc/resolv\&.conf\fR
and user does not have the permission to create it\&.
.RE
.PP
\fB\-\-auto\-file\-renaming\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Rename file name if the same file already exists\&. This option works only in HTTP(S)/FTP download\&. The new file name has a dot and a number(1\&.\&.9999) appended\&. Default:
\fItrue\fR
.RE
.PP
\fB\-\-auto\-save\-interval\fR=SEC
.RS 4
Save a control file(*\&.aria2) every SEC seconds\&. If
\fI0\fR
is given, a control file is not saved during download\&. aria2 saves a control file when it stops regardless of the value\&. The possible values are between
\fI0\fR
to
\fI600\fR\&. Default:
\fI60\fR
.RE
.PP
\fB\-\-conditional\-get\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Download file only when the local file is older than remote file\&. This function only works with HTTP(S) downloads only\&. It does not work if file size is specified in Metalink\&. It also ignores Content\-Disposition header\&. If a control file exists, this option will be ignored\&. This function uses If\-Modified\-Since header to get only newer file conditionally\&. When getting modification time of local file, it uses user supplied filename(see
\fB\-\-out\fR
option) or filename part in URI if
\fB\-\-out\fR
is not specified\&. To overwrite existing file,
\fB\-\-allow\-overwrite\fR
is required\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-\-conf\-path\fR=PATH
.RS 4
Change the configuration file path to PATH\&. Default:
\fI$HOME/\&.aria2/aria2\&.conf\fR
.RE
.PP
\fB\-D\fR, \fB\-\-daemon\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Run as daemon\&. The current working directory will be changed to
\fI/\fR
and standard input, standard output and standard error will be redirected to
\fI/dev/null\fR\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-\-deferred\-input\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
If
\fItrue\fR
is given, aria2 does not read all URIs and options from file specified by
\fB\-i\fR
option at startup, but it reads one by one when it needs later\&. This may reduce memory usage if input file contains a lot of URIs to download\&. If
\fIfalse\fR
is given, aria2 reads all URIs and options at startup\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-\-disable\-ipv6\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Disable IPv6\&. This is useful if you have to use broken DNS and want to avoid terribly slow AAAA record lookup\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-\-download\-result\fR=OPT
.RS 4
This option changes the way "Download Results" is formatted\&. If OPT is
\fIdefault\fR, print GID, status, average download speed and path/URI\&. If multiple files are involved, path/URI of first requested file is printed and remaining ones are omitted\&. If OPT is
\fIfull\fR, print GID, status, average download speed, percentage of progress and path/URI\&. The percentage of progress and path/URI are printed for each requested file in each row\&. Default:
\fIdefault\fR
.RE
.PP
\fB\-\-enable\-async\-dns6\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Enable IPv6 name resolution in asynchronous DNS resolver\&. This option will be ignored when
\fB\-\-async\-dns\fR=\fIfalse\fR\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-\-event\-poll\fR=POLL
.RS 4
Specify the method for polling events\&. The possible values are
\fIepoll\fR,
\fIkqueue\fR,
\fIport\fR,
\fIpoll\fR
and
\fIselect\fR\&. For each
\fIepoll\fR,
\fIkqueue\fR,
\fIport\fR
and
\fIpoll\fR, it is available if system supports it\&.
\fIepoll\fR
is available on recent Linux\&.
\fIkqueue\fR
is available on various *BSD systems including Mac OS X\&.
\fIport\fR
is available on Open Solaris\&. The default value may vary depending on the system you use\&.
.RE
.PP
\fB\-\-file\-allocation\fR=METHOD
.RS 4
Specify file allocation method\&.
\fInone\fR
doesn\(cqt pre\-allocate file space\&.
\fIprealloc\fR
pre\-allocates file space before download begins\&. This may take some time depending on the size of the file\&. If you are using newer file systems such as ext4 (with extents support), btrfs, xfs or NTFS(MinGW build only),
\fIfalloc\fR
is your best choice\&. It allocates large(few GiB) files almost instantly\&. Don\(cqt use
\fIfalloc\fR
with legacy file systems such as ext3 and FAT32 because it takes almost same time as
\fIprealloc\fR
and it blocks aria2 entirely until allocation finishes\&.
\fIfalloc\fR
may not be available if your system doesn\(cqt have
\fBposix_fallocate\fR() function\&. Possible Values:
\fInone\fR,
\fIprealloc\fR,
\fIfalloc\fR
Default:
\fIprealloc\fR
.RE
.PP
\fB\-\-hash\-check\-only\fR[=true|false]
.RS 4
If
\fItrue\fR
is given, after hash check using
\fB\-\-check\-integrity\fR
option, abort download whether or not download is complete\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-\-human\-readable\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Print sizes and speed in human readable format (e\&.g\&., 1\&.2Ki, 3\&.4Mi) in the console readout\&. Default:
\fItrue\fR
.RE
.PP
\fB\-\-interface\fR=INTERFACE
.RS 4
Bind sockets to given interface\&. You can specify interface name, IP address and hostname\&. Possible Values: interface, IP address, hostname
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
If an interface has multiple addresses, it is highly recommended to specify IP address explicitly\&. See also \fB\-\-disable\-ipv6\fR\&. If your system doesn\(cqt have getifaddrs(), this option doesn\(cqt accept interface name\&.
.sp .5v
.RE
.PP
\fB\-\-max\-download\-result\fR=NUM
.RS 4
Set maximum number of download result kept in memory\&. The download results are completed/error/removed downloads\&. The download results are stored in FIFO queue and it can store at most NUM download results\&. When queue is full and new download result is created, oldest download result is removed from the front of the queue and new one is pushed to the back\&. Setting big number in this option may result high memory consumption after thousands of downloads\&. Specifying 0 means no download result is kept\&. Default:
\fI1000\fR
.RE
.PP
\fB\-\-max\-resume\-failure\-tries\fR=N
.RS 4
When used with
\fB\-\-always\-resume\fR=\fIfalse\fR, aria2 downloads file from scratch when aria2 detects
\fIN\fR
number of URIs that does not support resume\&. If
\fIN\fR
is
\fI0\fR, aria2 downloads file from scratch when all given URIs do not support resume\&. See
\fB\-\-always\-resume\fR
option\&. Default:
\fI0\fR
.RE
.PP
\fB\-\-log\-level\fR=LEVEL
.RS 4
Set log level to output\&. LEVEL is either
\fIdebug\fR,
\fIinfo\fR,
\fInotice\fR,
\fIwarn\fR
or
\fIerror\fR\&. Default:
\fIdebug\fR
.RE
.PP
\fB\-\-on\-bt\-download\-complete\fR=COMMAND
.RS 4
For BitTorrent, a command specified in
\fB\-\-on\-download\-complete\fR
is called after download completed and seeding is over\&. On the other hand, this option set the command to be executed after download completed but before seeding\&. See
\fBEvent Hook\fR
for more details about COMMAND\&. Possible Values:
\fI/path/to/command\fR
.RE
.PP
\fB\-\-on\-download\-complete\fR=COMMAND
.RS 4
Set the command to be executed after download completed\&. See See
\fBEvent Hook\fR
for more details about COMMAND\&. See also
\fB\-\-on\-download\-stop\fR
option\&. Possible Values:
\fI/path/to/command\fR
.RE
.PP
\fB\-\-on\-download\-error\fR=COMMAND
.RS 4
Set the command to be executed after download aborted due to error\&. See
\fBEvent Hook\fR
for more details about COMMAND\&. See also
\fB\-\-on\-download\-stop\fR
option\&. Possible Values:
\fI/path/to/command\fR
.RE
.PP
\fB\-\-on\-download\-pause\fR=COMMAND
.RS 4
Set the command to be executed after download was paused\&. See
\fBEvent Hook\fR
for more details about COMMAND\&. Possible Values:
\fI/path/to/command\fR
.RE
.PP
\fB\-\-on\-download\-start\fR=COMMAND
.RS 4
Set the command to be executed after download got started\&. See
\fBEvent Hook\fR
for more details about COMMAND\&. Possible Values:
\fI/path/to/command\fR
.RE
.PP
\fB\-\-on\-download\-stop\fR=COMMAND
.RS 4
Set the command to be executed after download stopped\&. You can override the command to be executed for particular download result using
\fB\-\-on\-download\-complete\fR
and
\fB\-\-on\-download\-error\fR\&. If they are specified, command specified in this option is not executed\&. See
\fBEvent Hook\fR
for more details about COMMAND\&. Possible Values:
\fI/path/to/command\fR
.RE
.PP
\fB\-\-piece\-length\fR=LENGTH
.RS 4
Set a piece length for HTTP/FTP downloads\&. This is the boundary when aria2 splits a file\&. All splits occur at multiple of this length\&. This option will be ignored in BitTorrent downloads\&. It will be also ignored if Metalink file contains piece hashes\&. Default:
\fI1M\fR
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
The possible usecase of \fB\-\-piece\-length\fR option is change the request range in one HTTP pipelined request\&. To enable HTTP pipelining use \fB\-\-enable\-http\-pipelining\fR\&.
.sp .5v
.RE
.PP
\fB\-\-show\-console\-readout\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Show console readout\&. Default:
\fItrue\fR
.RE
.PP
\fB\-\-summary\-interval\fR=SEC
.RS 4
Set interval in seconds to output download progress summary\&. Setting
\fI0\fR
suppresses the output\&. Default:
\fI60\fR
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
In multi file torrent downloads, the files adjacent forward to the specified files are also allocated if they share the same piece\&.
.sp .5v
.RE
.PP
\fB\-Z\fR, \fB\-\-force\-sequential\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Fetch URIs in the command\-line sequentially and download each URI in a separate session, like the usual command\-line download utilities\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-\-max\-overall\-download\-limit\fR=SPEED
.RS 4
Set max overall download speed in bytes/sec\&.
\fI0\fR
means unrestricted\&. You can append
\fIK\fR
or
\fIM\fR(1K = 1024, 1M = 1024K)\&. To limit the download speed per download, use
\fB\-\-max\-download\-limit\fR
option\&. Default:
\fI0\fR
.RE
.PP
\fB\-\-max\-download\-limit\fR=SPEED
.RS 4
Set max download speed per each download in bytes/sec\&.
\fI0\fR
means unrestricted\&. You can append
\fIK\fR
or
\fIM\fR(1K = 1024, 1M = 1024K)\&. To limit the overall download speed, use
\fB\-\-max\-overall\-download\-limit\fR
option\&. Default:
\fI0\fR
.RE
.PP
\fB\-\-no\-conf\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Disable loading aria2\&.conf file\&.
.RE
.PP
\fB\-\-no\-file\-allocation\-limit\fR=SIZE
.RS 4
No file allocation is made for files whose size is smaller than SIZE\&. You can append
\fIK\fR
or
\fIM\fR(1K = 1024, 1M = 1024K)\&. Default:
\fI5M\fR
.RE
.PP
\fB\-P\fR, \fB\-\-parameterized\-uri\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Enable parameterized URI support\&. You can specify set of parts:
\fIhttp://{sv1,sv2,sv3}/foo\&.iso\fR\&. Also you can specify numeric sequences with step counter:
\fIhttp://host/image[000\-100:2]\&.img\fR\&. A step counter can be omitted\&. If all URIs do not point to the same file, such as the second example above, \-Z option is required\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-q\fR, \fB\-\-quiet\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Make aria2 quiet (no console output)\&. Default:
\fIfalse\fR
.RE
.PP
\fB\-\-realtime\-chunk\-checksum\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Validate chunk of data by calculating checksum while downloading a file if chunk checksums are provided\&. Default:
\fItrue\fR
.RE
.PP
\fB\-\-remove\-control\-file\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Remove control file before download\&. Using with
\fB\-\-allow\-overwrite\fR=\fItrue\fR, download always starts from scratch\&. This will be useful for users behind proxy server which disables resume\&.
.RE
.PP
\fB\-\-save\-session\fR=FILE
.RS 4
Save error/unfinished downloads to FILE on exit\&. You can pass this output file to aria2c with
\fB\-i\fR
option on restart\&. Please note that downloads added by
\fBaria2\&.addTorrent\fR
and
\fBaria2\&.addMetalink\fR
RPC method and whose metadata could not be saved as a file are not saved\&. Downloads removed using
\fBaria2\&.remove\fR
and
\fBaria2\&.forceRemove\fR
will not be saved\&.
.RE
.PP
\fB\-\-stop\fR=SEC
.RS 4
Stop application after SEC seconds has passed\&. If
\fI0\fR
is given, this feature is disabled\&. Default:
\fI0\fR
.RE
.PP
\fB\-\-stop\-with\-process\fR=PID
.RS 4
Stop application when process PID is not running\&. This is useful if aria2 process is forked from a parent process\&. The parent process can fork aria2 with its own pid and when parent process exits for some reason, aria2 can detect it and shutdown itself\&.
.RE
.PP
\fB\-\-truncate\-console\-readout\fR[=\fItrue\fR|\fIfalse\fR]
.RS 4
Truncate console readout to fit in a single line\&. Default:
\fItrue\fR
.RE
.PP
\fB\-v\fR, \fB\-\-version\fR
.RS 4
Print the version number, copyright and the configuration information and exit\&.
.RE
.SS "Options That Take An Optional Argument"
.sp
The options that have its argument surrounded by square brackets([]) take an optional argument\&. Usually omiting the argument is evaluated to \fItrue\fR\&. If you use short form of these options(such as \fI\-V\fR) and give an argument, then the option name and its argument should be concatenated(e\&.g\&. \fI\-Vfalse\fR)\&. If any spaces are inserted between the option name and the argument, the argument will be treated as URI and usually this is not what you expect\&.
.SS "URI, MAGNET, TORRENT_FILE, METALINK_FILE"
.sp
You can specify multiple URIs in command\-line\&. Unless you specify \fB\-Z\fR option, all URIs must point to the same file or downloading will fail\&.
.sp
You can specify arbitrary number of BitTorrent Magnet URI\&. Please note that they are always treated as a separate download\&. Both hex encoded 40 characters Info Hash and Base32 encoded 32 characters Info Hash are supported\&. The multiple "tr" parameters are supported\&. Because BitTorrent Magnet URI is likely to contain "&" character, it is highly recommended to always quote URI with single(\*(Aq) or double(") quotation\&. It is strongly recommended to enable DHT especially when "tr" parameter is missing\&. See http://www\&.bittorrent\&.org/beps/bep_0009\&.html for more details about BitTorrent Magnet URI\&.
.sp
You can also specify arbitrary number of torrent files and Metalink documents stored on a local drive\&. Please note that they are always treated as a separate download\&. Both Metalink4 and Metalink version 3\&.0 are supported\&.
.sp
You can specify both torrent file with \-T option and URIs\&. By doing this, you can download a file from both torrent swarm and HTTP(S)/FTP server at the same time, while the data from HTTP(S)/FTP are uploaded to the torrent swarm\&. For single file torrents, URI can be a complete URI pointing to the resource or if URI ends with /, name in torrent file in torrent is added\&. For multi\-file torrents, name and path are added to form a URI for each file\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
Make sure that URI is quoted with single(\*(Aq) or double(") quotation if it contains "&" or any characters that have special meaning in shell\&.
.sp .5v
.RE
.SS "Resuming Download"
.sp
Usually, you can resume transfer by just issuing same command(aria2c URI) if the previous transfer is made by aria2\&.
.sp
If the previous transfer is made by a browser or wget like sequential download manager, then use \-c option to continue the transfer(aria2c \fB\-c\fR URI)\&.
.SS "Event Hook"
.sp
aria2 provides options to specify arbitrary command after specific event occurred\&. Currently following options are available: \fB\-\-on\-bt\-download\-complete\fR, \fB\-\-on\-download\-pause\fR, \fB\-\-on\-download\-complete\fR\&. \fB\-\-on\-download\-start\fR, \fB\-\-on\-download\-error\fR, \fB\-\-on\-download\-stop\fR\&.
.sp
aria2 passes 3 arguments to specified command when it is executed\&. These arguments are: GID, the number of files and file path\&. For HTTP, FTP downloads, usually the number of files is 1\&. BitTorrent download can contain multiple files\&. If number of files is more than one, file path is first one\&. In other words, this is the value of path key of first struct whose selected key is true in the response of \fBaria2\&.getFiles\fR RPC method\&. If you want to get all file paths, consider to use JSON\-RPC/XML\-RPC\&. Please note that file path may change during download in HTTP because of redirection or Content\-Disposition header\&.
.sp
Let\(cqs see an example of how arguments are passed to command\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$ cat hook\&.sh
#!/bin/sh
echo "Called with [$1] [$2] [$3]"
$ aria2c \-\-on\-download\-complete hook\&.sh http://example\&.org/file\&.iso
Called with [1] [1] [/path/to/file\&.iso]
.fi
.if n \{\
.RE
.\}
.SH "EXIT STATUS"
.sp
Because aria2 can handle multiple downloads at once, it encounters lots of errors in a session\&. aria2 returns the following exit status based on the last error encountered\&.
.PP
\fB0\fR
.RS 4
If all downloads were successful\&.
.RE
.PP
\fB1\fR
.RS 4
If an unknown error occurred\&.
.RE
.PP
\fB2\fR
.RS 4
If time out occurred\&.
.RE
.PP
\fB3\fR
.RS 4
If a resource was not found\&.
.RE
.PP
\fB4\fR
.RS 4
If aria2 saw the specfied number of "resource not found" error\&. See
\fB\-\-max\-file\-not\-found\fR
option)\&.
.RE
.PP
\fB5\fR
.RS 4
If a download aborted because download speed was too slow\&. See
\fB\-\-lowest\-speed\-limit\fR
option)
.RE
.PP
\fB6\fR
.RS 4
If network problem occurred\&.
.RE
.PP
\fB7\fR
.RS 4
If there were unfinished downloads\&. This error is only reported if all finished downloads were successful and there were unfinished downloads in a queue when aria2 exited by pressing Ctrl\-C by an user or sending TERM or INT signal\&.
.RE
.PP
\fB8\fR
.RS 4
If remote server did not support resume when resume was required to complete download\&.
.RE
.PP
\fB9\fR
.RS 4
If there was not enough disk space available\&.
.RE
.PP
\fB10\fR
.RS 4
If piece length was different from one in \&.aria2 control file\&. See
\fB\-\-allow\-piece\-length\-change\fR
option\&.
.RE
.PP
\fB11\fR
.RS 4
If aria2 was downloading same file at that moment\&.
.RE
.PP
\fB12\fR
.RS 4
If aria2 was downloading same info hash torrent at that moment\&.
.RE
.PP
\fB13\fR
.RS 4
If file already existed\&. See
\fB\-\-allow\-overwrite\fR
option\&.
.RE
.PP
\fB14\fR
.RS 4
If renaming file failed\&. See
\fB\-\-auto\-file\-renaming\fR
option\&.
.RE
.PP
\fB15\fR
.RS 4
If aria2 could not open existing file\&.
.RE
.PP
\fB16\fR
.RS 4
If aria2 could not create new file or truncate existing file\&.
.RE
.PP
\fB17\fR
.RS 4
If file I/O error occurred\&.
.RE
.PP
\fB18\fR
.RS 4
If aria2 could not create directory\&.
.RE
.PP
\fB19\fR
.RS 4
If name resolution failed\&.
.RE
.PP
\fB20\fR
.RS 4
If aria2 could not parse Metalink document\&.
.RE
.PP
\fB21\fR
.RS 4
If FTP command failed\&.
.RE
.PP
\fB22\fR
.RS 4
If HTTP response header was bad or unexpected\&.
.RE
.PP
\fB23\fR
.RS 4
If too many redirections occurred\&.
.RE
.PP
\fB24\fR
.RS 4
If HTTP authorization failed\&.
.RE
.PP
\fB25\fR
.RS 4
If aria2 could not parse bencoded file(usually \&.torrent file)\&.
.RE
.PP
\fB26\fR
.RS 4
If \&.torrent file was corrupted or missing information that aria2 needed\&.
.RE
.PP
\fB27\fR
.RS 4
If Magnet URI was bad\&.
.RE
.PP
\fB28\fR
.RS 4
If bad/unrecognized option was given or unexpected option argument was given\&.
.RE
.PP
\fB29\fR
.RS 4
If the remote server was unable to handle the request due to a temporary overloading or maintenance\&.
.RE
.PP
\fB30\fR
.RS 4
If aria2 could not parse JSON\-RPC request\&.
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
An error occurred in a finished download will not be reported as exit status\&.
.sp .5v
.RE
.SH "ENVIRONMENT"
.sp
aria2 recognizes the following environment variables\&.
.PP
http_proxy [http://][USER:PASSWORD@]HOST[:PORT]
.RS 4
Specify proxy server for use in HTTP\&. Overrides http\-proxy value in configuration file\&. The command\-line option
\fB\-\-http\-proxy\fR
overrides this value\&.
.RE
.PP
https_proxy [http://][USER:PASSWORD@]HOST[:PORT]
.RS 4
Specify proxy server for use in HTTPS\&. Overrides https\-proxy value in configuration file\&. The command\-line option
\fB\-\-https\-proxy\fR
overrides this value\&.
.RE
.PP
ftp_proxy [http://][USER:PASSWORD@]HOST[:PORT]
.RS 4
Specify proxy server for use in FTP\&. Overrides ftp\-proxy value in configuration file\&. The command\-line option
\fB\-\-ftp\-proxy\fR
overrides this value\&.
.RE
.PP
all_proxy [http://][USER:PASSWORD@]HOST[:PORT]
.RS 4
Specify proxy server for use if no protocol\-specific proxy is specified\&. Overrides all\-proxy value in configuration file\&. The command\-line option
\fB\-\-all\-proxy\fR
overrides this value\&.
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
Although aria2 accepts ftp:// and https:// scheme in proxy URI, it simply assumes that http:// is specified and does not change its behavior based on the specified scheme\&.
.sp .5v
.RE
.PP
no_proxy [DOMAIN,\&...]
.RS 4
Specify comma\-separated hostname, domains and network address with or without CIDR block to which proxy should not be used\&. Overrides no\-proxy value in configuration file\&. The command\-line option
\fB\-\-no\-proxy\fR
overrides this value\&.
.RE
.SH "FILES"
.SS "aria2\&.conf"
.sp
By default, aria2 parses \fI$HOME/\&.aria2/aria2\&.conf\fR as a configuraiton file\&. You can specify the path to configuration file using \fB\-\-conf\-path\fR option\&. If you don\(cqt want to use the configuraitonf file, use \fB\-\-no\-conf\fR option\&.
.sp
The configuration file is a text file and has 1 option per each line\&. In each line, you can specify name\-value pair in the format: NAME=VALUE, where name is the long command\-line option name without "\-\-" prefix\&. You can use same syntax for the command\-line option\&. The lines beginning "#" are treated as comments\&.
.sp
.if n \{\
.RS 4
.\}
.nf
# sample configuration file for aria2c
listen\-port=60000
dht\-listen\-port=60000
seed\-ratio=1\&.0
max\-upload\-limit=50K
ftp\-pasv=true
.fi
.if n \{\
.RE
.\}
.SS "dht\&.dat"
.sp
By default, the routing table of IPv4 DHT is saved to the path \fI$HOME/\&.aria2/dht\&.dat\fR and the routing table of IPv6 DHT is saved to the path \fI$HOME/\&.aria2/dht6\&.dat\fR\&.
.SS "Netrc"
.sp
Netrc support is enabled by default for HTTP(S)/FTP\&. To disable netrc support, specify \fB\-n\fR option\&. Your \&.netrc file should have correct permissions(600)\&.
.sp
If machine name starts "\&.", aria2 performs domain\-match instead of exact match\&. This is an extension of aria2\&. For example of domain match, imagine the following \&.netrc entry:
.sp
.if n \{\
.RS 4
.\}
.nf
machine \&.example\&.org login myid password mypasswd
.fi
.if n \{\
.RE
.\}
.sp
"aria2\&.example\&.org" domain\-matches "\&.example\&.org" and uses \fImyid\fR and \fImypasswd\fR\&.
.sp
Some domain\-match example follow: "example\&.net" does not domain\-match "\&.example\&.org"\&. "example\&.org" does not domain\-match "\&.example\&.org" because of preceding "\&."\&. If you want to match "example\&.org", specify "example\&.org"\&.
.SS "Control File"
.sp
aria2 uses a control file to track the progress of a download\&. A control file is placed in the same directory as the downloading file and its filename is the filename of downloading file with "\&.aria2" appended\&. For example, if you are downloading file\&.zip, then the control file should be file\&.zip\&.aria2\&. (There is a exception for this naming convention\&. If you are downloading a multi torrent, its control file is the "top directory" name of the torrent with "\&.aria2" appended\&. The "top directory" name is a value of "name" key in "info" directory in a torrent file\&.)
.sp
Usually a control file is deleted once download completed\&. If aria2 decides that download cannot be resumed(for example, when downloading a file from a HTTP server which doesn\(cqt support resume), a control file is not created\&.
.sp
Normally if you lose a control file, you cannot resume download\&. But if you have a torrent or metalink with chunk checksums for the file, you can resume the download without a control file by giving \-V option to aria2c in command\-line\&.
.SS "Input File"
.sp
The input file can contain a list of URIs for aria2 to download\&. You can specify multiple URIs for a single entity: separate URIs on a single line using the TAB character\&.
.sp
Each line is treated as if it is provided in command\-line argument\&. Therefore they are affected by \fB\-Z\fR and \fB\-P\fR options\&.
.sp
Since URIs in the input file are directly read by aria2, they must not be quoted with single(\*(Aq) or double(") quotation\&.
.sp
Lines starting with "#" are treated as comments and skipped\&.
.sp
Additionally, the following options can be specified after each line of URIs\&. These optional lines must start with white space(s)\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBall\-proxy\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBall\-proxy\-passwd\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBall\-proxy\-user\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBallow\-overwrite\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBallow\-piece\-length\-change\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBalways\-resume\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBasync\-dns\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBauto\-file\-renaming\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBbt\-enable\-lpd\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBbt\-exclude\-tracker\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBbt\-external\-ip\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBbt\-hash\-check\-seed\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBbt\-max\-open\-files\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBbt\-max\-peers\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBbt\-metadata\-only\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBbt\-min\-crypto\-level\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBbt\-prioritize\-piece\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBbt\-request\-peer\-speed\-limit\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBbt\-require\-crypto\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBbt\-save\-metadata\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBbt\-seed\-unverified\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBbt\-stop\-timeout\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBbt\-tracker\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBbt\-tracker\-connect\-timeout\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBbt\-tracker\-interval\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBbt\-tracker\-timeout\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBcheck\-integrity\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBconditional\-get\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBconnect\-timeout\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBcontinue\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBdir\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBdry\-run\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBenable\-async\-dns6\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBenable\-http\-keep\-alive\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBenable\-http\-pipelining\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBenable\-peer\-exchange\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBfile\-allocation\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBfollow\-metalink\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBfollow\-torrent\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBftp\-passwd\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBftp\-pasv\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBftp\-proxy\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBftp\-proxy\-passwd\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBftp\-proxy\-user\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBftp\-reuse\-connection\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBftp\-type\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBftp\-user\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBheader\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBhttp\-accept\-gzip\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBhttp\-auth\-challenge\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBhttp\-no\-cache\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBhttp\-passwd\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBhttp\-proxy\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBhttp\-proxy\-passwd\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBhttp\-proxy\-user\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBhttp\-user\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBhttps\-proxy\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBhttps\-proxy\-passwd\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBhttps\-proxy\-user\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBindex\-out\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBlowest\-speed\-limit\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBmax\-connection\-per\-server\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBmax\-download\-limit\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBmax\-file\-not\-found\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBmax\-resume\-failure\-tries\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBmax\-tries\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBmax\-upload\-limit\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBmetalink\-enable\-unique\-protocol\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBmetalink\-language\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBmetalink\-location\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBmetalink\-os\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBmetalink\-preferred\-protocol\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBmetalink\-version\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBmin\-split\-size\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBno\-file\-allocation\-limit\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBno\-netrc\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBno\-proxy\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBout\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBparameterized\-uri\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBproxy\-method\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBrealtime\-chunk\-checksum\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBreferer\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBremote\-time\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBremove\-control\-file\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBreuse\-uri\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBseed\-ratio\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBseed\-time\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBselect\-file\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBsplit\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBtimeout\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBuse\-head\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBuser\-agent\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBretry\-wait\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBmetalink\-base\-uri\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBpause\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBstream\-piece\-selector\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBhash\-check\-only\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBchecksum\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBpiece_length\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBuri\-selector\fR
.RE
.sp
These options have exactly same meaning of the ones in the command\-line options, but it just applies to the URIs it belongs to\&. Please note that for options in input file "\-\-" prefix must be stripped\&.
.sp
For example, the content of uri\&.txt is
.sp
.if n \{\
.RS 4
.\}
.nf
http://server/file\&.iso http://mirror/file\&.iso
  dir=/iso_images
  out=file\&.img
http://foo/bar
.fi
.if n \{\
.RE
.\}
.sp
If aria2 is executed with \fB\-i\fR uri\&.txt \fB\-d\fR /tmp options, then \fIfile\&.iso\fR is saved as \fI/iso_images/file\&.img\fR and it is downloaded from http://server/file\&.iso and http://mirror/file\&.iso\&. The file \fIbar\fR is downloaded from http://foo/bar and saved as \fI/tmp/bar\fR\&.
.sp
In some cases, \fBout\fR parameter has no effect\&. See note of \fB\-\-out\fR option for the restrictions\&.
.SS "Server Performance Profile"
.sp
This section describes the format of server performance profile\&. The file is plain text and each line has several NAME=VALUE pair, delimited by comma\&. Currently following NAMEs are recognized:
.PP
host
.RS 4
Hostname of the server\&. Required\&.
.RE
.PP
protocol
.RS 4
Protocol for this profile, such as ftp, http\&. Required\&.
.RE
.PP
dl_speed
.RS 4
The average download speed observed in the previous download in bytes per sec\&. Required\&.
.RE
.PP
sc_avg_speed
.RS 4
The average download speed observed in the previous download in bytes per sec\&. This value is only updated if the download is done in single connection environment and only used by AdaptiveURISelector\&. Optional\&.
.RE
.PP
mc_avg_speed
.RS 4
The average download speed observed in the previous download in bytes per sec\&. This value is only updated if the download is done in multi connection environment and only used by AdaptiveURISelector\&. Optional\&.
.RE
.PP
counter
.RS 4
How many times the server is used\&. Currently this value is only used by AdaptiveURISelector\&. Optional\&.
.RE
.PP
last_updated
.RS 4
Last contact time in GMT with this server, specified in the seconds since the Epoch(00:00:00 on January 1, 1970, UTC)\&. Required\&.
.RE
.PP
status
.RS 4
ERROR is set when server cannot be reached or out\-of\-service or timeout occurred\&. Otherwise, OK is set\&.
.RE
.sp
Those fields must exist in one line\&. The order of the fields is not significant\&. You can put pairs other than the above; they are simply ignored\&.
.sp
An example follows:
.sp
.if n \{\
.RS 4
.\}
.nf
host=localhost, protocol=http, dl_speed=32000, last_updated=1222491640, status=OK
host=localhost, protocol=ftp, dl_speed=0, last_updated=1222491632, status=ERROR
.fi
.if n \{\
.RE
.\}
.SH "RPC INTERFACE"
.sp
aria2 provides both JSON\-RPC and XML\-RPC and they basically have the same functionality\&.
.sp
The request path of JSON\-RPC interface is \fI/jsonrpc\fR\&. The request path of XML\-RPC interface is \fI/rpc\fR\&.
.sp
The implemented JSON\-RPC is based on JSON\-RPC 2\&.0 Specification (2010\-03\-26) and supports HTTP POST and GET (JSONP)\&.
.sp
The JSON\-RPC interface does not support notification\&. It also does not support floating point number\&. The character encoding must be UTF\-8\&.
.sp
When reading following document for JSON\-RPC, interpret struct as JSON object\&.
.SS "Terminology"
.PP
GID
.RS 4
GID(or gid) is the key to manage each download\&. Each download has an unique GID\&. Currently GID looks like an integer, but don\(cqt treat it as integer because it may be changed to another type in the future release\&. Please note that GID is session local and not persisted when aria2 exits\&.
.RE
.SS "Methods"
.sp
All code examples come from Python2\&.7 interpreter\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.addUri (uris[, options[, position]])\fR
.RS 4
.sp
This method adds new HTTP(S)/FTP/BitTorrent Magnet URI\&. \fIuris\fR is of type array and its element is URI which is of type string\&. For BitTorrent Magnet URI, \fIuris\fR must have only one element and it should be BitTorrent Magnet URI\&. URIs in \fIuris\fR must point to the same file\&. If you mix other URIs which point to another file, aria2 does not complain but download may fail\&. \fIoptions\fR is of type struct and its members are a pair of option name and value\&. See \fBOptions\fR below for more details\&. If \fIposition\fR is given as an integer starting from 0, the new download is inserted at \fIposition\fR in the waiting queue\&. If \fIposition\fR is not given or \fIposition\fR is larger than the size of the queue, it is appended at the end of the queue\&. This method returns GID of registered download\&.
.sp
The following example adds http://example\&.org/file to aria2:
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import urllib2, json
>>> jsonreq = json\&.dumps({\*(Aqjsonrpc\*(Aq:\*(Aq2\&.0\*(Aq, \*(Aqid\*(Aq:\*(Aqqwer\*(Aq,
\&.\&.\&.                       \*(Aqmethod\*(Aq:\*(Aqaria2\&.addUri\*(Aq,
\&.\&.\&.                       \*(Aqparams\*(Aq:[[\*(Aqhttp://example\&.org/file\*(Aq]]})
>>> c = urllib2\&.urlopen(\*(Aqhttp://localhost:6800/jsonrpc\*(Aq, jsonreq)
>>> c\&.read()
\*(Aq{"id":"qwer","jsonrpc":"2\&.0","result":"1"}\*(Aq
.fi
.if n \{\
.RE
.\}
.sp
The following example adds http://example\&.org/file to aria2:
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import xmlrpclib
>>> s = xmlrpclib\&.ServerProxy(\*(Aqhttp://localhost:6800/rpc\*(Aq)
>>> s\&.aria2\&.addUri([\*(Aqhttp://example\&.org/file\*(Aq])
\*(Aq1\*(Aq
.fi
.if n \{\
.RE
.\}
.sp
The following example adds 2 sources and some options:
.sp
.if n \{\
.RS 4
.\}
.nf
>>> s\&.aria2\&.addUri([\*(Aqhttp://example\&.org/file\*(Aq, \*(Aqhttp://mirror/file\*(Aq],
                    dict(dir="/tmp"))
\*(Aq2\*(Aq
.fi
.if n \{\
.RE
.\}
.sp
The following example adds a download and insert it to the front of waiting downloads:
.sp
.if n \{\
.RS 4
.\}
.nf
>>> s\&.aria2\&.addUri([\*(Aqhttp://example\&.org/file\*(Aq], {}, 0)
\*(Aq3\*(Aq
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.addTorrent (torrent[, uris[, options[, position]]])\fR
.RS 4
.sp
This method adds BitTorrent download by uploading \&.torrent file\&. If you want to add BitTorrent Magnet URI, use \fBaria2\&.addUri\fR method instead\&. \fItorrent\fR is of type base64 which contains Base64\-encoded \&.torrent file\&. \fIuris\fR is of type array and its element is URI which is of type string\&. \fIuris\fR is used for Web\-seeding\&. For single file torrents, URI can be a complete URI pointing to the resource or if URI ends with /, name in torrent file is added\&. For multi\-file torrents, name and path in torrent are added to form a URI for each file\&. \fIoptions\fR is of type struct and its members are a pair of option name and value\&. See \fBOptions\fR below for more details\&. If \fIposition\fR is given as an integer starting from 0, the new download is inserted at \fIposition\fR in the waiting queue\&. If \fIposition\fR is not given or \fIposition\fR is larger than the size of the queue, it is appended at the end of the queue\&. This method returns GID of registered download\&. The uploaded data is saved as a file named hex string of SHA\-1 hash of data plus "\&.torrent" in the directory specified by \fB\-\-dir\fR option\&. The example of filename is 0a3893293e27ac0490424c06de4d09242215f0a6\&.torrent\&. If same file already exists, it is overwritten\&. If the file cannot be saved successfully, the downloads added by this method are not saved by \fB\-\-save\-session\fR\&.
.sp
The following example adds local file file\&.torrent to aria2:
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import urllib2, json, base64
>>> torrent = base64\&.b64encode(open(\*(Aqfile\&.torrent\*(Aq)\&.read())
>>> jsonreq = json\&.dumps({\*(Aqjsonrpc\*(Aq:\*(Aq2\&.0\*(Aq, \*(Aqid\*(Aq:\*(Aqasdf\*(Aq,
\&.\&.\&.                       \*(Aqmethod\*(Aq:\*(Aqaria2\&.addTorrent\*(Aq, \*(Aqparams\*(Aq:[torrent]})
>>> c = urllib2\&.urlopen(\*(Aqhttp://localhost:6800/jsonrpc\*(Aq, jsonreq)
>>> c\&.read()
\*(Aq{"id":"asdf","jsonrpc":"2\&.0","result":"6"}\*(Aq
.fi
.if n \{\
.RE
.\}
.sp
The following example adds local file file\&.torrent to aria2:
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import xmlrpclib
>>> s = xmlrpclib\&.ServerProxy(\*(Aqhttp://localhost:6800/rpc\*(Aq)
>>> s\&.aria2\&.addTorrent(xmlrpclib\&.Binary(open(\*(Aqfile\&.torrent\*(Aq)\&.read()))
\*(Aq6\*(Aq
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.addMetalink (metalink[, options[, position]])\fR
.RS 4
.sp
This method adds Metalink download by uploading \&.metalink file\&. \fImetalink\fR is of type base64 which contains Base64\-encoded \&.metalink file\&. \fIoptions\fR is of type struct and its members are a pair of option name and value\&. See \fBOptions\fR below for more details\&. If \fIposition\fR is given as an integer starting from 0, the new download is inserted at \fIposition\fR in the waiting queue\&. If \fIposition\fR is not given or \fIposition\fR is larger than the size of the queue, it is appended at the end of the queue\&. This method returns array of GID of registered download\&. The uploaded data is saved as a file named hex string of SHA\-1 hash of data plus "\&.metalink" in the directory specified by \fB\-\-dir\fR option\&. The example of filename is 0a3893293e27ac0490424c06de4d09242215f0a6\&.metalink\&. If same file already exists, it is overwritten\&. If the file cannot be saved successfully, the downloads added by this method are not saved by \fB\-\-save\-session\fR\&.
.sp
The following example adds local file file\&.meta4 to aria2:
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import urllib2, json, base64
>>> metalink = base64\&.b64encode(open(\*(Aqfile\&.meta4\*(Aq)\&.read())
>>> jsonreq = json\&.dumps({\*(Aqjsonrpc\*(Aq:\*(Aq2\&.0\*(Aq, \*(Aqid\*(Aq:\*(Aqqwer\*(Aq,
\&.\&.\&.                       \*(Aqmethod\*(Aq:\*(Aqaria2\&.addMetalink\*(Aq, \*(Aqparams\*(Aq:[metalink]})
>>> c = urllib2\&.urlopen(\*(Aqhttp://localhost:6800/jsonrpc\*(Aq, jsonreq)
>>> c\&.read()
\*(Aq{"id":"qwer","jsonrpc":"2\&.0","result":["8"]}\*(Aq
.fi
.if n \{\
.RE
.\}
.sp
The following example adds local file file\&.meta4 to aria2:
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import xmlrpclib
>>> s = xmlrpclib\&.ServerProxy(\*(Aqhttp://localhost:6800/rpc\*(Aq)
>>> s\&.aria2\&.addMetalink(xmlrpclib\&.Binary(open(\*(Aqfile\&.meta4\*(Aq)\&.read()))
[\*(Aq8\*(Aq]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.remove (gid)\fR
.RS 4
.sp
This method removes the download denoted by \fIgid\fR\&. \fIgid\fR is of type string\&. If specified download is in progress, it is stopped at first\&. The status of removed download becomes "removed"\&. This method returns GID of removed download\&.
.sp
The following example removes download whose GID is "3":
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import urllib2, json
>>> jsonreq = json\&.dumps({\*(Aqjsonrpc\*(Aq:\*(Aq2\&.0\*(Aq, \*(Aqid\*(Aq:\*(Aqqwer\*(Aq,
\&.\&.\&.                       \*(Aqmethod\*(Aq:\*(Aqaria2\&.remove\*(Aq, \*(Aqparams\*(Aq:[\*(Aq3\*(Aq]})
>>> c = urllib2\&.urlopen(\*(Aqhttp://localhost:6800/jsonrpc\*(Aq, jsonreq)
>>> c\&.read()
\*(Aq{"id":"qwer","jsonrpc":"2\&.0","result":"3"}\*(Aq
.fi
.if n \{\
.RE
.\}
.sp
The following example removes download whose GID is "3":
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import xmlrpclib
>>> s = xmlrpclib\&.ServerProxy(\*(Aqhttp://localhost:6800/rpc\*(Aq)
>>> s\&.aria2\&.remove(\*(Aq3\*(Aq)
\*(Aq3\*(Aq
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.forceRemove (gid)\fR
.RS 4
.sp
This method removes the download denoted by \fIgid\fR\&. This method behaves just like \fBaria2\&.remove\fR except that this method removes download without any action which takes time such as contacting BitTorrent tracker\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.pause (gid)\fR
.RS 4
.sp
This method pauses the download denoted by \fIgid\fR\&. \fIgid\fR is of type string\&. The status of paused download becomes "paused"\&. If the download is active, the download is placed on the first position of waiting queue\&. As long as the status is "paused", the download is not started\&. To change status to "waiting", use \fBaria2\&.unpause\fR method\&. This method returns GID of paused download\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.pauseAll ()\fR
.RS 4
.sp
This method is equal to calling \fBaria2\&.pause\fR for every active/waiting download\&. This methods returns "OK" for success\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.forcePause (pid)\fR
.RS 4
.sp
This method pauses the download denoted by \fIgid\fR\&. This method behaves just like \fBaria2\&.pause\fR except that this method pauses download without any action which takes time such as contacting BitTorrent tracker\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.forcePauseAll ()\fR
.RS 4
.sp
This method is equal to calling \fBaria2\&.forcePause\fR for every active/waiting download\&. This methods returns "OK" for success\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.unpause (gid)\fR
.RS 4
.sp
This method changes the status of the download denoted by \fIgid\fR from "paused" to "waiting"\&. This makes the download eligible to restart\&. \fIgid\fR is of type string\&. This method returns GID of unpaused download\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.unpauseAll ()\fR
.RS 4
.sp
This method is equal to calling \fBaria2\&.unpause\fR for every active/waiting download\&. This methods returns "OK" for success\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.tellStatus (gid[, keys])\fR
.RS 4
.sp
This method returns download progress of the download denoted by \fIgid\fR\&. \fIgid\fR is of type string\&. \fIkeys\fR is array of string\&. If it is specified, the response contains only keys in \fIkeys\fR array\&. If \fIkeys\fR is empty or not specified, the response contains all keys\&. This is useful when you just want specific keys and avoid unnecessary transfers\&. For example, \fBaria2\&.tellStatus\fR("1", ["gid", "status"]) returns \fIgid\fR and \fIstatus\fR key\&. The response is of type struct and it contains following keys\&. The value type is string\&.
.PP
gid
.RS 4
GID of this download\&.
.RE
.PP
status
.RS 4
"active" for currently downloading/seeding entry\&. "waiting" for the entry in the queue; download is not started\&. "paused" for the paused entry\&. "error" for the stopped download because of error\&. "complete" for the stopped and completed download\&. "removed" for the download removed by user\&.
.RE
.PP
totalLength
.RS 4
Total length of this download in bytes\&.
.RE
.PP
completedLength
.RS 4
Completed length of this download in bytes\&.
.RE
.PP
uploadLength
.RS 4
Uploaded length of this download in bytes\&.
.RE
.PP
bitfield
.RS 4
Hexadecimal representation of the download progress\&. The highest bit corresponds to piece index 0\&. The set bits indicate the piece is available and unset bits indicate the piece is missing\&. The spare bits at the end are set to zero\&. When download has not started yet, this key will not be included in the response\&.
.RE
.PP
downloadSpeed
.RS 4
Download speed of this download measured in bytes/sec\&.
.RE
.PP
uploadSpeed
.RS 4
Upload speed of this download measured in bytes/sec\&.
.RE
.PP
infoHash
.RS 4
InfoHash\&. BitTorrent only\&.
.RE
.PP
numSeeders
.RS 4
The number of seeders the client has connected to\&. BitTorrent only\&.
.RE
.PP
pieceLength
.RS 4
Piece length in bytes\&.
.RE
.PP
numPieces
.RS 4
The number of pieces\&.
.RE
.PP
connections
.RS 4
The number of peers/servers the client has connected to\&.
.RE
.PP
errorCode
.RS 4
The last error code occurred in this download\&. The value is of type string\&. The error codes are defined in
\fBEXIT STATUS\fR
section\&. This value is only available for stopped/completed downloads\&.
.RE
.PP
followedBy
.RS 4
List of GIDs which are generated by the consequence of this download\&. For example, when aria2 downloaded Metalink file, it generates downloads described in it(see
\fB\-\-follow\-metalink\fR
option)\&. This value is useful to track these auto generated downloads\&. If there is no such downloads, this key will not be included in the response\&.
.RE
.PP
belongsTo
.RS 4
GID of a parent download\&. Some downloads are a part of another download\&. For example, if a file in Metalink has BitTorrent resource, the download of \&.torrent is a part of that file\&. If this download has no parent, this key will not be included in the response\&.
.RE
.PP
dir
.RS 4
Directory to save files\&. This key is not available for stopped downloads\&.
.RE
.PP
files
.RS 4
Returns the list of files\&. The element of list is the same struct used in
\fBaria2\&.getFiles\fR
method\&.
.RE
.PP
bittorrent
.RS 4
Struct which contains information retrieved from \&.torrent file\&. BitTorrent only\&. It contains following keys\&.
.PP
announceList
.RS 4
List of lists of announce URI\&. If \&.torrent file contains announce and no announce\-list, announce is converted to announce\-list format\&.
.RE
.PP
comment
.RS 4
The comment for the torrent\&. comment\&.utf\-8 is used if available\&.
.RE
.PP
creationDate
.RS 4
The creation time of the torrent\&. The value is an integer since the Epoch, measured in seconds\&.
.RE
.PP
mode
.RS 4
File mode of the torrent\&. The value is either
\fIsingle\fR
or
\fImulti\fR\&.
.RE
.PP
info
.RS 4
Struct which contains data from Info dictionary\&. It contains following keys\&.
.PP
name
.RS 4
name in info dictionary\&. name\&.utf\-8 is used if available\&.
.RE
.RE
.RE
.sp
The following example gets information about download whose GID is "1":
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json\&.dumps({\*(Aqjsonrpc\*(Aq:\*(Aq2\&.0\*(Aq, \*(Aqid\*(Aq:\*(Aqqwer\*(Aq,
\&.\&.\&.                       \*(Aqmethod\*(Aq:\*(Aqaria2\&.tellStatus\*(Aq, \*(Aqparams\*(Aq:[\*(Aq1\*(Aq]})
>>> c = urllib2\&.urlopen(\*(Aqhttp://localhost:6800/jsonrpc\*(Aq, jsonreq)
>>> pprint(json\&.loads(c\&.read()))
{u\*(Aqid\*(Aq: u\*(Aqqwer\*(Aq,
 u\*(Aqjsonrpc\*(Aq: u\*(Aq2\&.0\*(Aq,
 u\*(Aqresult\*(Aq: {u\*(Aqbitfield\*(Aq: u\*(Aq0000000000\*(Aq,
             u\*(AqcompletedLength\*(Aq: u\*(Aq901120\*(Aq,
             u\*(Aqconnections\*(Aq: u\*(Aq1\*(Aq,
             u\*(Aqdir\*(Aq: u\*(Aq/downloads\*(Aq,
             u\*(AqdownloadSpeed\*(Aq: u\*(Aq15158\*(Aq,
             u\*(Aqfiles\*(Aq: [{u\*(Aqindex\*(Aq: u\*(Aq1\*(Aq,
                         u\*(Aqlength\*(Aq: u\*(Aq34896138\*(Aq,
                         u\*(AqcompletedLength\*(Aq: u\*(Aq34896138\*(Aq,
                         u\*(Aqpath\*(Aq: u\*(Aq/downloads/file\*(Aq,
                         u\*(Aqselected\*(Aq: u\*(Aqtrue\*(Aq,
                         u\*(Aquris\*(Aq: [{u\*(Aqstatus\*(Aq: u\*(Aqused\*(Aq,
                                    u\*(Aquri\*(Aq: u\*(Aqhttp://example\&.org/file\*(Aq}]}],
             u\*(Aqgid\*(Aq: u\*(Aq1\*(Aq,
             u\*(AqnumPieces\*(Aq: u\*(Aq34\*(Aq,
             u\*(AqpieceLength\*(Aq: u\*(Aq1048576\*(Aq,
             u\*(Aqstatus\*(Aq: u\*(Aqactive\*(Aq,
             u\*(AqtotalLength\*(Aq: u\*(Aq34896138\*(Aq,
             u\*(AquploadLength\*(Aq: u\*(Aq0\*(Aq,
             u\*(AquploadSpeed\*(Aq: u\*(Aq0\*(Aq}}
.fi
.if n \{\
.RE
.\}
.sp
The following example gets information specifying keys you are interested in:
.sp
.if n \{\
.RS 4
.\}
.nf
>>> jsonreq = json\&.dumps({\*(Aqjsonrpc\*(Aq:\*(Aq2\&.0\*(Aq, \*(Aqid\*(Aq:\*(Aqqwer\*(Aq,
\&.\&.\&.                       \*(Aqmethod\*(Aq:\*(Aqaria2\&.tellStatus\*(Aq,
\&.\&.\&.                       \*(Aqparams\*(Aq:[\*(Aq1\*(Aq, [\*(Aqgid\*(Aq,
\&.\&.\&.                                       \*(AqtotalLength\*(Aq,
\&.\&.\&.                                       \*(AqcompletedLength\*(Aq]]})
>>> c = urllib2\&.urlopen(\*(Aqhttp://localhost:6800/jsonrpc\*(Aq, jsonreq)
>>> pprint(json\&.loads(c\&.read()))
{u\*(Aqid\*(Aq: u\*(Aqqwer\*(Aq,
 u\*(Aqjsonrpc\*(Aq: u\*(Aq2\&.0\*(Aq,
 u\*(Aqresult\*(Aq: {u\*(AqcompletedLength\*(Aq: u\*(Aq5701632\*(Aq,
             u\*(Aqgid\*(Aq: u\*(Aq1\*(Aq,
             u\*(AqtotalLength\*(Aq: u\*(Aq34896138\*(Aq}}
.fi
.if n \{\
.RE
.\}
.sp
The following example gets information about download whose GID is "1":
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib\&.ServerProxy(\*(Aqhttp://localhost:6800/rpc\*(Aq)
>>> r = s\&.aria2\&.tellStatus(\*(Aq1\*(Aq)
>>> pprint(r)
{\*(Aqbitfield\*(Aq: \*(Aqffff80\*(Aq,
 \*(AqcompletedLength\*(Aq: \*(Aq34896138\*(Aq,
 \*(Aqconnections\*(Aq: \*(Aq0\*(Aq,
 \*(Aqdir\*(Aq: \*(Aq/downloads\*(Aq,
 \*(AqdownloadSpeed\*(Aq: \*(Aq0\*(Aq,
 \*(AqerrorCode\*(Aq: \*(Aq0\*(Aq,
 \*(Aqfiles\*(Aq: [{\*(Aqindex\*(Aq: \*(Aq1\*(Aq,
            \*(Aqlength\*(Aq: \*(Aq34896138\*(Aq,
            \*(AqcompletedLength\*(Aq: \*(Aq34896138\*(Aq,
            \*(Aqpath\*(Aq: \*(Aq/downloads/file\*(Aq,
            \*(Aqselected\*(Aq: \*(Aqtrue\*(Aq,
            \*(Aquris\*(Aq: [{\*(Aqstatus\*(Aq: \*(Aqused\*(Aq,
                      \*(Aquri\*(Aq: \*(Aqhttp://example\&.org/file\*(Aq}]}],
 \*(Aqgid\*(Aq: \*(Aq1\*(Aq,
 \*(AqnumPieces\*(Aq: \*(Aq17\*(Aq,
 \*(AqpieceLength\*(Aq: \*(Aq2097152\*(Aq,
 \*(Aqstatus\*(Aq: \*(Aqcomplete\*(Aq,
 \*(AqtotalLength\*(Aq: \*(Aq34896138\*(Aq,
 \*(AquploadLength\*(Aq: \*(Aq0\*(Aq,
 \*(AquploadSpeed\*(Aq: \*(Aq0\*(Aq}
.fi
.if n \{\
.RE
.\}
.sp
The following example gets information specifying keys you are interested in:
.sp
.if n \{\
.RS 4
.\}
.nf
>>> r = s\&.aria2\&.tellStatus(\*(Aq1\*(Aq, [\*(Aqgid\*(Aq, \*(AqtotalLength\*(Aq, \*(AqcompletedLength\*(Aq])
>>> pprint(r)
{\*(AqcompletedLength\*(Aq: \*(Aq34896138\*(Aq, \*(Aqgid\*(Aq: \*(Aq1\*(Aq, \*(AqtotalLength\*(Aq: \*(Aq34896138\*(Aq}
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.getUris (gid)\fR
.RS 4
.sp
This method returns URIs used in the download denoted by \fIgid\fR\&. \fIgid\fR is of type string\&. The response is of type array and its element is of type struct and it contains following keys\&. The value type is string\&.
.PP
uri
.RS 4
URI
.RE
.PP
status
.RS 4

\fIused\fR
if the URI is already used\&.
\fIwaiting\fR
if the URI is waiting in the queue\&.
.RE
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json\&.dumps({\*(Aqjsonrpc\*(Aq:\*(Aq2\&.0\*(Aq, \*(Aqid\*(Aq:\*(Aqqwer\*(Aq,
\&.\&.\&.                       \*(Aqmethod\*(Aq:\*(Aqaria2\&.getUris\*(Aq, \*(Aqparams\*(Aq:[\*(Aq1\*(Aq]})
>>> c = urllib2\&.urlopen(\*(Aqhttp://localhost:6800/jsonrpc\*(Aq, jsonreq)
>>> pprint(json\&.loads(c\&.read()))
{u\*(Aqid\*(Aq: u\*(Aqqwer\*(Aq,
 u\*(Aqjsonrpc\*(Aq: u\*(Aq2\&.0\*(Aq,
 u\*(Aqresult\*(Aq: [{u\*(Aqstatus\*(Aq: u\*(Aqused\*(Aq,
              u\*(Aquri\*(Aq: u\*(Aqhttp://example\&.org/file\*(Aq}]}
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib\&.ServerProxy(\*(Aqhttp://localhost:6800/rpc\*(Aq)
>>> r = s\&.aria2\&.getUris(\*(Aq1\*(Aq)
>>> pprint(r)
[{\*(Aqstatus\*(Aq: \*(Aqused\*(Aq, \*(Aquri\*(Aq: \*(Aqhttp://example\&.org/file\*(Aq}]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.getFiles (gid)\fR
.RS 4
.sp
This method returns file list of the download denoted by \fIgid\fR\&. \fIgid\fR is of type string\&. The response is of type array and its element is of type struct and it contains following keys\&. The value type is string\&.
.PP
index
.RS 4
Index of file\&. Starting with 1\&. This is the same order with the files in multi\-file torrent\&.
.RE
.PP
path
.RS 4
File path\&.
.RE
.PP
length
.RS 4
File size in bytes\&.
.RE
.PP
completedLength
.RS 4
Completed length of this file in bytes\&. Please note that it is possible that sum of completedLength is less than completedLength in
\fBaria2\&.tellStatus\fR
method\&. This is because completedLength in
\fBaria2\&.getFiles\fR
only calculates completed pieces\&. On the other hand, completedLength in
\fBaria2\&.tellStatus\fR
takes into account of partially completed piece\&.
.RE
.PP
selected
.RS 4
"true" if this file is selected by
\fB\-\-select\-file\fR
option\&. If
\fB\-\-select\-file\fR
is not specified or this is single torrent or no torrent download, this value is always "true"\&. Otherwise "false"\&.
.RE
.PP
uris
.RS 4
Returns the list of URI for this file\&. The element of list is the same struct used in
\fBaria2\&.getUris\fR
method\&.
.RE
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json\&.dumps({\*(Aqjsonrpc\*(Aq:\*(Aq2\&.0\*(Aq, \*(Aqid\*(Aq:\*(Aqqwer\*(Aq,
\&.\&.\&.                       \*(Aqmethod\*(Aq:\*(Aqaria2\&.getFiles\*(Aq, \*(Aqparams\*(Aq:[\*(Aq1\*(Aq]})
>>> c = urllib2\&.urlopen(\*(Aqhttp://localhost:6800/jsonrpc\*(Aq, jsonreq)
>>> pprint(json\&.loads(c\&.read()))
{u\*(Aqid\*(Aq: u\*(Aqqwer\*(Aq,
 u\*(Aqjsonrpc\*(Aq: u\*(Aq2\&.0\*(Aq,
 u\*(Aqresult\*(Aq: [{u\*(Aqindex\*(Aq: u\*(Aq1\*(Aq,
              u\*(Aqlength\*(Aq: u\*(Aq34896138\*(Aq,
              u\*(AqcompletedLength\*(Aq: u\*(Aq34896138\*(Aq,
              u\*(Aqpath\*(Aq: u\*(Aq/downloads/file\*(Aq,
              u\*(Aqselected\*(Aq: u\*(Aqtrue\*(Aq,
              u\*(Aquris\*(Aq: [{u\*(Aqstatus\*(Aq: u\*(Aqused\*(Aq,
                         u\*(Aquri\*(Aq: u\*(Aqhttp://example\&.org/file\*(Aq}]}]}
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib\&.ServerProxy(\*(Aqhttp://localhost:6800/rpc\*(Aq)
>>> r = s\&.aria2\&.getFiles(\*(Aq1\*(Aq)
>>> pprint(r)
[{\*(Aqindex\*(Aq: \*(Aq1\*(Aq,
  \*(Aqlength\*(Aq: \*(Aq34896138\*(Aq,
  \*(AqcompletedLength\*(Aq: \*(Aq34896138\*(Aq,
  \*(Aqpath\*(Aq: \*(Aq/downloads/file\*(Aq,
  \*(Aqselected\*(Aq: \*(Aqtrue\*(Aq,
  \*(Aquris\*(Aq: [{\*(Aqstatus\*(Aq: \*(Aqused\*(Aq,
            \*(Aquri\*(Aq: \*(Aqhttp://example\&.org/file\*(Aq}]}]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.getPeers (gid)\fR
.RS 4
.sp
This method returns peer list of the download denoted by \fIgid\fR\&. \fIgid\fR is of type string\&. This method is for BitTorrent only\&. The response is of type array and its element is of type struct and it contains following keys\&. The value type is string\&.
.PP
peerId
.RS 4
Percent\-encoded peer ID\&.
.RE
.PP
ip
.RS 4
IP address of the peer\&.
.RE
.PP
port
.RS 4
Port number of the peer\&.
.RE
.PP
bitfield
.RS 4
Hexadecimal representation of the download progress of the peer\&. The highest bit corresponds to piece index 0\&. The set bits indicate the piece is available and unset bits indicate the piece is missing\&. The spare bits at the end are set to zero\&.
.RE
.PP
amChoking
.RS 4
"true" if this client is choking the peer\&. Otherwise "false"\&.
.RE
.PP
peerChoking
.RS 4
"true" if the peer is choking this client\&. Otherwise "false"\&.
.RE
.PP
downloadSpeed
.RS 4
Download speed (byte/sec) that this client obtains from the peer\&.
.RE
.PP
uploadSpeed
.RS 4
Upload speed(byte/sec) that this client uploads to the peer\&.
.RE
.PP
seeder
.RS 4
"true" is this client is a seeder\&. Otherwise "false"\&.
.RE
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json\&.dumps({\*(Aqjsonrpc\*(Aq:\*(Aq2\&.0\*(Aq, \*(Aqid\*(Aq:\*(Aqqwer\*(Aq,
\&.\&.\&.                       \*(Aqmethod\*(Aq:\*(Aqaria2\&.getPeers\*(Aq, \*(Aqparams\*(Aq:[\*(Aq1\*(Aq]})
>>> c = urllib2\&.urlopen(\*(Aqhttp://localhost:6800/jsonrpc\*(Aq, jsonreq)
>>> pprint(json\&.loads(c\&.read()))
{u\*(Aqid\*(Aq: u\*(Aqqwer\*(Aq,
 u\*(Aqjsonrpc\*(Aq: u\*(Aq2\&.0\*(Aq,
 u\*(Aqresult\*(Aq: [{u\*(AqamChoking\*(Aq: u\*(Aqtrue\*(Aq,
              u\*(Aqbitfield\*(Aq: u\*(Aqffffffffffffffffffffffffffffffffffffffff\*(Aq,
              u\*(AqdownloadSpeed\*(Aq: u\*(Aq10602\*(Aq,
              u\*(Aqip\*(Aq: u\*(Aq10\&.0\&.0\&.9\*(Aq,
              u\*(AqpeerChoking\*(Aq: u\*(Aqfalse\*(Aq,
              u\*(AqpeerId\*(Aq: u\*(Aqaria2%2F1%2E10%2E5%2D%87%2A%EDz%2F%F7%E6\*(Aq,
              u\*(Aqport\*(Aq: u\*(Aq6881\*(Aq,
              u\*(Aqseeder\*(Aq: u\*(Aqtrue\*(Aq,
              u\*(AquploadSpeed\*(Aq: u\*(Aq0\*(Aq},
             {u\*(AqamChoking\*(Aq: u\*(Aqfalse\*(Aq,
              u\*(Aqbitfield\*(Aq: u\*(Aqffffeff0fffffffbfffffff9fffffcfff7f4ffff\*(Aq,
              u\*(AqdownloadSpeed\*(Aq: u\*(Aq8654\*(Aq,
              u\*(Aqip\*(Aq: u\*(Aq10\&.0\&.0\&.30\*(Aq,
              u\*(AqpeerChoking\*(Aq: u\*(Aqfalse\*(Aq,
              u\*(AqpeerId\*(Aq: u\*(Aqbittorrent client758\*(Aq,
              u\*(Aqport\*(Aq: u\*(Aq37842\*(Aq,
              u\*(Aqseeder\*(Aq: u\*(Aqfalse\*(Aq,
              u\*(AquploadSpeed\*(Aq: u\*(Aq6890\*(Aq}]}
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib\&.ServerProxy(\*(Aqhttp://localhost:6800/rpc\*(Aq)
>>> r = s\&.aria2\&.getPeers(\*(Aq1\*(Aq)
>>> pprint(r)
[{\*(AqamChoking\*(Aq: \*(Aqtrue\*(Aq,
  \*(Aqbitfield\*(Aq: \*(Aqffffffffffffffffffffffffffffffffffffffff\*(Aq,
  \*(AqdownloadSpeed\*(Aq: \*(Aq10602\*(Aq,
  \*(Aqip\*(Aq: \*(Aq10\&.0\&.0\&.9\*(Aq,
  \*(AqpeerChoking\*(Aq: \*(Aqfalse\*(Aq,
  \*(AqpeerId\*(Aq: \*(Aqaria2%2F1%2E10%2E5%2D%87%2A%EDz%2F%F7%E6\*(Aq,
  \*(Aqport\*(Aq: \*(Aq6881\*(Aq,
  \*(Aqseeder\*(Aq: \*(Aqtrue\*(Aq,
  \*(AquploadSpeed\*(Aq: \*(Aq0\*(Aq},
 {\*(AqamChoking\*(Aq: \*(Aqfalse\*(Aq,
  \*(Aqbitfield\*(Aq: \*(Aqffffeff0fffffffbfffffff9fffffcfff7f4ffff\*(Aq,
  \*(AqdownloadSpeed\*(Aq: \*(Aq8654\*(Aq,
  \*(Aqip\*(Aq: \*(Aq10\&.0\&.0\&.30\*(Aq,
  \*(AqpeerChoking\*(Aq: \*(Aqfalse\*(Aq,
  \*(AqpeerId\*(Aq: \*(Aqbittorrent client758\*(Aq,
  \*(Aqport\*(Aq: \*(Aq37842\*(Aq,
  \*(Aqseeder\*(Aq: \*(Aqfalse,
  \*(AquploadSpeed\*(Aq: \*(Aq6890\*(Aq}]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.getServers (gid)\fR
.RS 4
.sp
This method returns currently connected HTTP(S)/FTP servers of the download denoted by \fIgid\fR\&. \fIgid\fR is of type string\&. The response is of type array and its element is of type struct and it contains following keys\&. The value type is string\&.
.PP
index
.RS 4
Index of file\&. Starting with 1\&. This is the same order with the files in multi\-file torrent\&.
.RE
.PP
servers
.RS 4
The list of struct which contains following keys\&.
.PP
uri
.RS 4
URI originally added\&.
.RE
.PP
currentUri
.RS 4
This is the URI currently used for downloading\&. If redirection is involved, currentUri and uri may differ\&.
.RE
.PP
downloadSpeed
.RS 4
Download speed (byte/sec)
.RE
.RE
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json\&.dumps({\*(Aqjsonrpc\*(Aq:\*(Aq2\&.0\*(Aq, \*(Aqid\*(Aq:\*(Aqqwer\*(Aq,
\&.\&.\&.                       \*(Aqmethod\*(Aq:\*(Aqaria2\&.getServers\*(Aq, \*(Aqparams\*(Aq:[\*(Aq1\*(Aq]})
>>> c = urllib2\&.urlopen(\*(Aqhttp://localhost:6800/jsonrpc\*(Aq, jsonreq)
>>> pprint(json\&.loads(c\&.read()))
{u\*(Aqid\*(Aq: u\*(Aqqwer\*(Aq,
 u\*(Aqjsonrpc\*(Aq: u\*(Aq2\&.0\*(Aq,
 u\*(Aqresult\*(Aq: [{u\*(Aqindex\*(Aq: u\*(Aq1\*(Aq,
              u\*(Aqservers\*(Aq: [{u\*(AqcurrentUri\*(Aq: u\*(Aqhttp://example\&.org/file\*(Aq,
                            u\*(AqdownloadSpeed\*(Aq: u\*(Aq10467\*(Aq,
                            u\*(Aquri\*(Aq: u\*(Aqhttp://example\&.org/file\*(Aq}]}]}
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib\&.ServerProxy(\*(Aqhttp://localhost:6800/rpc\*(Aq)
>>> r = s\&.aria2\&.getServers(\*(Aq1\*(Aq)
>>> pprint(r)
[{\*(Aqindex\*(Aq: \*(Aq1\*(Aq,
  \*(Aqservers\*(Aq: [{\*(AqcurrentUri\*(Aq: \*(Aqhttp://example\&.org/dl/file\*(Aq,
               \*(AqdownloadSpeed\*(Aq: \*(Aq20285\*(Aq,
               \*(Aquri\*(Aq: \*(Aqhttp://example\&.org/file\*(Aq}]}]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.tellActive ([keys])\fR
.RS 4
.sp
This method returns the list of active downloads\&. The response is of type array and its element is the same struct returned by \fBaria2\&.tellStatus\fR method\&. For \fIkeys\fR parameter, please refer to \fBaria2\&.tellStatus\fR method\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.tellWaiting (offset, num, [keys])\fR
.RS 4
.sp
This method returns the list of waiting download, including paused downloads\&. \fIoffset\fR is of type integer and specifies the offset from the download waiting at the front\&. \fInum\fR is of type integer and specifies the number of downloads to be returned\&. For \fIkeys\fR parameter, please refer to \fBaria2\&.tellStatus\fR method\&.
.sp
If offset is a positive integer, this method returns downloads in the range of [\fIoffset\fR, \fIoffset\fR+\fInum\fR)\&.
.sp
\fIoffset\fR can be a negative integer\&. \fIoffset\fR == \-1 points last download in the waiting queue and \fIoffset\fR == \-2 points the download before the last download, and so on\&. The downloads in the response are in reversed order\&.
.sp
For example, imagine that three downloads "A","B" and "C" are waiting in this order\&. aria2\&.tellWaiting(0, 1) returns ["A"]\&. aria2\&.tellWaiting(1, 2) returns ["B", "C"]\&. aria2\&.tellWaiting(\-1, 2) returns ["C", "B"]\&.
.sp
The response is of type array and its element is the same struct returned by \fBaria2\&.tellStatus\fR method\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.tellStopped (offset, num, [keys])\fR
.RS 4
.sp
This method returns the list of stopped download\&. \fIoffset\fR is of type integer and specifies the offset from the oldest download\&. \fInum\fR is of type integer and specifies the number of downloads to be returned\&. For \fIkeys\fR parameter, please refer to \fBaria2\&.tellStatus\fR method\&.
.sp
\fIoffset\fR and \fInum\fR have the same semantics as \fBaria2\&.tellWaiting\fR method\&.
.sp
The response is of type array and its element is the same struct returned by \fBaria2\&.tellStatus\fR method\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.changePosition (gid, pos, how)\fR
.RS 4
.sp
This method changes the position of the download denoted by \fIgid\fR\&. \fIpos\fR is of type integer\&. \fIhow\fR is of type string\&. If \fIhow\fR is "POS_SET", it moves the download to a position relative to the beginning of the queue\&. If \fIhow\fR is "POS_CUR", it moves the download to a position relative to the current position\&. If \fIhow\fR is "POS_END", it moves the download to a position relative to the end of the queue\&. If the destination position is less than 0 or beyond the end of the queue, it moves the download to the beginning or the end of the queue respectively\&. The response is of type integer and it is the destination position\&.
.sp
For example, if GID#1 is placed in position 3, aria2\&.changePosition(1, \-1, POS_CUR) will change its position to 2\&. Additional aria2\&.changePosition(1, 0, POS_SET) will change its position to 0(the beginning of the queue)\&.
.sp
The following example moves the download whose GID is "3" to the front of the waiting queue:
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json\&.dumps({\*(Aqjsonrpc\*(Aq:\*(Aq2\&.0\*(Aq, \*(Aqid\*(Aq:\*(Aqqwer\*(Aq,
\&.\&.\&.                       \*(Aqmethod\*(Aq:\*(Aqaria2\&.changePosition\*(Aq,
\&.\&.\&.                       \*(Aqparams\*(Aq:[\*(Aq3\*(Aq, 0, \*(AqPOS_SET\*(Aq]})
>>> c = urllib2\&.urlopen(\*(Aqhttp://localhost:6800/jsonrpc\*(Aq, jsonreq)
>>> pprint(json\&.loads(c\&.read()))
{u\*(Aqid\*(Aq: u\*(Aqqwer\*(Aq, u\*(Aqjsonrpc\*(Aq: u\*(Aq2\&.0\*(Aq, u\*(Aqresult\*(Aq: 0}
.fi
.if n \{\
.RE
.\}
.sp
The following example moves the download whose GID is "3" to the front of the waiting queue:
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import xmlrpclib
>>> s = xmlrpclib\&.ServerProxy(\*(Aqhttp://localhost:6800/rpc\*(Aq)
>>> s\&.aria2\&.changePosition(\*(Aq3\*(Aq, 0, \*(AqPOS_SET\*(Aq)
0
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.changeUri (gid, fileIndex, delUris, addUris[, position])\fR
.RS 4
.sp
This method removes URIs in \fIdelUris\fR from and appends URIs in \fIaddUris\fR to download denoted by \fIgid\fR\&. \fIdelUris\fR and \fIaddUris\fR are list of string\&. A download can contain multiple files and URIs are attached to each file\&. \fIfileIndex\fR is used to select which file to remove/attach given URIs\&. \fIfileIndex\fR is 1\-based\&. \fIposition\fR is used to specify where URIs are inserted in the existing waiting URI list\&. \fIposition\fR is 0\-based\&. When \fIposition\fR is omitted, URIs are appended to the back of the list\&. This method first execute removal and then addition\&. \fIposition\fR is the position after URIs are removed, not the position when this method is called\&. When removing URI, if same URIs exist in download, only one of them is removed for each URI in \fIdelUris\fR\&. In other words, there are three URIs "http://example\&.org/aria2" and you want remove them all, you have to specify (at least) 3 "http://example\&.org/aria2" in \fIdelUris\fR\&. This method returns a list which contains 2 integers\&. The first integer is the number of URIs deleted\&. The second integer is the number of URIs added\&.
.sp
The following example adds 1 URI http://example\&.org/file to the file whose index is "1" and belongs to the download whose GID is "2":
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json\&.dumps({\*(Aqjsonrpc\*(Aq:\*(Aq2\&.0\*(Aq, \*(Aqid\*(Aq:\*(Aqqwer\*(Aq,
\&.\&.\&.                       \*(Aqmethod\*(Aq:\*(Aqaria2\&.changeUri\*(Aq,
\&.\&.\&.                       \*(Aqparams\*(Aq:[\*(Aq2\*(Aq, 1, [], [\*(Aqhttp://example\&.org/file\*(Aq]]})
>>> c = urllib2\&.urlopen(\*(Aqhttp://localhost:6800/jsonrpc\*(Aq, jsonreq)
>>> pprint(json\&.loads(c\&.read()))
{u\*(Aqid\*(Aq: u\*(Aqqwer\*(Aq, u\*(Aqjsonrpc\*(Aq: u\*(Aq2\&.0\*(Aq, u\*(Aqresult\*(Aq: [0, 1]}
.fi
.if n \{\
.RE
.\}
.sp
The following example adds 1 URI http://example\&.org/file to the file whose index is "1" and belongs to the download whose GID is "2":
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import xmlrpclib
>>> s = xmlrpclib\&.ServerProxy(\*(Aqhttp://localhost:6800/rpc\*(Aq)
>>> s\&.aria2\&.changeUri(\*(Aq2\*(Aq, 1, [], [\*(Aqhttp://example\&.org/file\*(Aq])
[0, 1]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.getOption (gid)\fR
.RS 4
.sp
This method returns options of the download denoted by \fIgid\fR\&. The response is of type struct\&. Its key is the name of option\&. The value type is string\&.
.sp
The following example gets options of the download whose GID is "1":
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json\&.dumps({\*(Aqjsonrpc\*(Aq:\*(Aq2\&.0\*(Aq, \*(Aqid\*(Aq:\*(Aqqwer\*(Aq,
\&.\&.\&.                       \*(Aqmethod\*(Aq:\*(Aqaria2\&.getOption\*(Aq, \*(Aqparams\*(Aq:[\*(Aq1\*(Aq]})
>>> c = urllib2\&.urlopen(\*(Aqhttp://localhost:6800/jsonrpc\*(Aq, jsonreq)
>>> pprint(json\&.loads(c\&.read()))
{u\*(Aqid\*(Aq: u\*(Aqqwer\*(Aq,
 u\*(Aqjsonrpc\*(Aq: u\*(Aq2\&.0\*(Aq,
 u\*(Aqresult\*(Aq: {u\*(Aqallow\-overwrite\*(Aq: u\*(Aqfalse\*(Aq,
             u\*(Aqallow\-piece\-length\-change\*(Aq: u\*(Aqfalse\*(Aq,
             u\*(Aqalways\-resume\*(Aq: u\*(Aqtrue\*(Aq,
             u\*(Aqasync\-dns\*(Aq: u\*(Aqtrue\*(Aq,
 \&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
The following example gets options of the download whose GID is "1":
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib\&.ServerProxy(\*(Aqhttp://localhost:6800/rpc\*(Aq)
>>> r = s\&.aria2\&.getOption(\*(Aq1\*(Aq)
>>> pprint(r)
{\*(Aqallow\-overwrite\*(Aq: \*(Aqfalse\*(Aq,
 \*(Aqallow\-piece\-length\-change\*(Aq: \*(Aqfalse\*(Aq,
 \*(Aqalways\-resume\*(Aq: \*(Aqtrue\*(Aq,
 \*(Aqasync\-dns\*(Aq: \*(Aqtrue\*(Aq,
 \&.\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.changeOption (gid, options)\fR
.RS 4
.sp
This method changes options of the download denoted by \fIgid\fR dynamically\&. \fIgid\fR is of type string\&. \fIoptions\fR is of type struct\&. The following options are available for active downloads:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBbt\-max\-peers\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBbt\-request\-peer\-speed\-limit\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBmax\-download\-limit\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBmax\-upload\-limit\fR
.RE
.sp
For waiting or paused downloads, in addition to the above options, options listed in \fBInput File\fR subsection are available, except for following options: \fBdry\-run\fR, \fBmetalink\-base\-uri\fR, \fBparameterized\-uri\fR, \fBpause\fR and \fBpiece_length\fR\&. This method returns "OK" for success\&.
.sp
The following example sets \fBmax\-download\-limit\fR option to "20K" for the download whose GID is "1"\&.
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json\&.dumps({\*(Aqjsonrpc\*(Aq:\*(Aq2\&.0\*(Aq, \*(Aqid\*(Aq:\*(Aqqwer\*(Aq,
\&.\&.\&.                       \*(Aqmethod\*(Aq:\*(Aqaria2\&.changeOption\*(Aq,
\&.\&.\&.                       \*(Aqparams\*(Aq:[\*(Aq1\*(Aq, {\*(Aqmax\-download\-limit\*(Aq:\*(Aq10K\*(Aq}]})
>>> c = urllib2\&.urlopen(\*(Aqhttp://localhost:6800/jsonrpc\*(Aq, jsonreq)
>>> pprint(json\&.loads(c\&.read()))
{u\*(Aqid\*(Aq: u\*(Aqqwer\*(Aq, u\*(Aqjsonrpc\*(Aq: u\*(Aq2\&.0\*(Aq, u\*(Aqresult\*(Aq: u\*(AqOK\*(Aq}
.fi
.if n \{\
.RE
.\}
.sp
The following example sets \fBmax\-download\-limit\fR option to "20K" for the download whose GID is "1"\&.
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import xmlrpclib
>>> s = xmlrpclib\&.ServerProxy(\*(Aqhttp://localhost:6800/rpc\*(Aq)
>>> s\&.aria2\&.changeOption(\*(Aq1\*(Aq, {\*(Aqmax\-download\-limit\*(Aq:\*(Aq20K\*(Aq})
\*(AqOK\*(Aq
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.getGlobalOption ()\fR
.RS 4
.sp
This method returns global options\&. The response is of type struct\&. Its key is the name of option\&. The value type is string\&. Because global options are used as a template for the options of newly added download, the response contains keys returned by \fBaria2\&.getOption\fR method\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.changeGlobalOption (options)\fR
.RS 4
.sp
This method changes global options dynamically\&. \fIoptions\fR is of type struct\&. The following options are available:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBdownload\-result\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBlog\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBlog\-level\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBmax\-concurrent\-downloads\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBmax\-download\-result\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBmax\-overall\-download\-limit\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBmax\-overall\-upload\-limit\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBsave\-cookies\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBsave\-session\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

\fBserver\-stat\-of\fR
.RE
.sp
In addition to them, options listed in \fBInput File\fR subsection are available, except for following options: \fBchecksum\fR, \fBindex\-out\fR, \fBout\fR, \fBpause\fR and \fBselect\-file\fR\&.
.sp
Using \fBlog\fR option, you can dynamically start logging or change log file\&. To stop logging, give empty string("") as a parameter value\&. Note that log file is always opened in append mode\&. This method returns "OK" for success\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.getGlobalStat ()\fR
.RS 4
.sp
This method returns global statistics such as overall download and upload speed\&. The response is of type struct and contains following keys\&. The value type is string\&.
.PP
downloadSpeed
.RS 4
Overall download speed (byte/sec)\&.
.RE
.PP
uploadSpeed
.RS 4
Overall upload speed(byte/sec)\&.
.RE
.PP
numActive
.RS 4
The number of active downloads\&.
.RE
.PP
numWaiting
.RS 4
The number of waiting downloads\&.
.RE
.PP
numStopped
.RS 4
The number of stopped downloads\&.
.RE
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json\&.dumps({\*(Aqjsonrpc\*(Aq:\*(Aq2\&.0\*(Aq, \*(Aqid\*(Aq:\*(Aqqwer\*(Aq,
\&.\&.\&.                       \*(Aqmethod\*(Aq:\*(Aqaria2\&.getGlobalStat\*(Aq})
>>> c = urllib2\&.urlopen(\*(Aqhttp://localhost:6800/jsonrpc\*(Aq, jsonreq)
>>> pprint(json\&.loads(c\&.read()))
{u\*(Aqid\*(Aq: u\*(Aqqwer\*(Aq,
 u\*(Aqjsonrpc\*(Aq: u\*(Aq2\&.0\*(Aq,
 u\*(Aqresult\*(Aq: {u\*(AqdownloadSpeed\*(Aq: u\*(Aq21846\*(Aq,
             u\*(AqnumActive\*(Aq: u\*(Aq2\*(Aq,
             u\*(AqnumStopped\*(Aq: u\*(Aq0\*(Aq,
             u\*(AqnumWaiting\*(Aq: u\*(Aq0\*(Aq,
             u\*(AquploadSpeed\*(Aq: u\*(Aq0\*(Aq}}
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib\&.ServerProxy(\*(Aqhttp://localhost:6800/rpc\*(Aq)
>>> r = s\&.aria2\&.getGlobalStat()
>>> pprint(r)
{\*(AqdownloadSpeed\*(Aq: \*(Aq23136\*(Aq,
 \*(AqnumActive\*(Aq: \*(Aq2\*(Aq,
 \*(AqnumStopped\*(Aq: \*(Aq0\*(Aq,
 \*(AqnumWaiting\*(Aq: \*(Aq0\*(Aq,
 \*(AquploadSpeed\*(Aq: \*(Aq0\*(Aq}
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.purgeDownloadResult ()\fR
.RS 4
.sp
This method purges completed/error/removed downloads to free memory\&. This method returns "OK"\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.removeDownloadResult (gid)\fR
.RS 4
.sp
This method removes completed/error/removed download denoted by \fIgid\fR from memory\&. This method returns "OK" for success\&.
.sp
The following example removes the download result of the download whose GID is "1"\&.
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json\&.dumps({\*(Aqjsonrpc\*(Aq:\*(Aq2\&.0\*(Aq, \*(Aqid\*(Aq:\*(Aqqwer\*(Aq,
\&.\&.\&.                       \*(Aqmethod\*(Aq:\*(Aqaria2\&.removeDownloadResult\*(Aq,
\&.\&.\&.                       \*(Aqparams\*(Aq:[\*(Aq1\*(Aq]})
>>> c = urllib2\&.urlopen(\*(Aqhttp://localhost:6800/jsonrpc\*(Aq, jsonreq)
>>> pprint(json\&.loads(c\&.read()))
{u\*(Aqid\*(Aq: u\*(Aqqwer\*(Aq, u\*(Aqjsonrpc\*(Aq: u\*(Aq2\&.0\*(Aq, u\*(Aqresult\*(Aq: u\*(AqOK\*(Aq}
.fi
.if n \{\
.RE
.\}
.sp
The following example removes the download result of the download whose GID is "1"\&.
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import xmlrpclib
>>> s = xmlrpclib\&.ServerProxy(\*(Aqhttp://localhost:6800/rpc\*(Aq)
>>> s\&.aria2\&.removeDownloadResult(\*(Aq1\*(Aq)
\*(AqOK\*(Aq
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.getVersion ()\fR
.RS 4
.sp
This method returns version of the program and the list of enabled features\&. The response is of type struct and contains following keys\&.
.PP
version
.RS 4
Version number of the program in string\&.
.RE
.PP
enabledFeatures
.RS 4
List of enabled features\&. Each feature name is of type string\&.
.RE
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json\&.dumps({\*(Aqjsonrpc\*(Aq:\*(Aq2\&.0\*(Aq, \*(Aqid\*(Aq:\*(Aqqwer\*(Aq,
\&.\&.\&.                       \*(Aqmethod\*(Aq:\*(Aqaria2\&.getVersion\*(Aq})
>>> c = urllib2\&.urlopen(\*(Aqhttp://localhost:6800/jsonrpc\*(Aq, jsonreq)
>>> pprint(json\&.loads(c\&.read()))
{u\*(Aqid\*(Aq: u\*(Aqqwer\*(Aq,
 u\*(Aqjsonrpc\*(Aq: u\*(Aq2\&.0\*(Aq,
 u\*(Aqresult\*(Aq: {u\*(AqenabledFeatures\*(Aq: [u\*(AqAsync DNS\*(Aq,
                                  u\*(AqBitTorrent\*(Aq,
                                  u\*(AqFirefox3 Cookie\*(Aq,
                                  u\*(AqGZip\*(Aq,
                                  u\*(AqHTTPS\*(Aq,
                                  u\*(AqMessage Digest\*(Aq,
                                  u\*(AqMetalink\*(Aq,
                                  u\*(AqXML\-RPC\*(Aq],
             u\*(Aqversion\*(Aq: u\*(Aq1\&.11\&.0\*(Aq}}
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib\&.ServerProxy(\*(Aqhttp://localhost:6800/rpc\*(Aq)
>>> r = s\&.aria2\&.getVersion()
>>> pprint(r)
{\*(AqenabledFeatures\*(Aq: [\*(AqAsync DNS\*(Aq,
                     \*(AqBitTorrent\*(Aq,
                     \*(AqFirefox3 Cookie\*(Aq,
                     \*(AqGZip\*(Aq,
                     \*(AqHTTPS\*(Aq,
                     \*(AqMessage Digest\*(Aq,
                     \*(AqMetalink\*(Aq,
                     \*(AqXML\-RPC\*(Aq],
 \*(Aqversion\*(Aq: \*(Aq1\&.11\&.0\*(Aq}
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.getSessionInfo ()\fR
.RS 4
.sp
This method returns session information\&. The response is of type struct and contains following key\&.
.PP
sessionId
.RS 4
Session ID, which is generated each time when aria2 is invoked\&.
.RE
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json\&.dumps({\*(Aqjsonrpc\*(Aq:\*(Aq2\&.0\*(Aq, \*(Aqid\*(Aq:\*(Aqqwer\*(Aq,
\&.\&.\&.                       \*(Aqmethod\*(Aq:\*(Aqaria2\&.getSessionInfo\*(Aq})
>>> c = urllib2\&.urlopen(\*(Aqhttp://localhost:6800/jsonrpc\*(Aq, jsonreq)
>>> pprint(json\&.loads(c\&.read()))
{u\*(Aqid\*(Aq: u\*(Aqqwer\*(Aq,
 u\*(Aqjsonrpc\*(Aq: u\*(Aq2\&.0\*(Aq,
 u\*(Aqresult\*(Aq: {u\*(AqsessionId\*(Aq: u\*(Aqcd6a3bc6a1de28eb5bfa181e5f6b916d44af31a9\*(Aq}}
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import xmlrpclib
>>> s = xmlrpclib\&.ServerProxy(\*(Aqhttp://localhost:6800/rpc\*(Aq)
>>> s\&.aria2\&.getSessionInfo()
{\*(AqsessionId\*(Aq: \*(Aqcd6a3bc6a1de28eb5bfa181e5f6b916d44af31a9\*(Aq}
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.shutdown ()\fR
.RS 4
.sp
This method shutdowns aria2\&. This method returns "OK"\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBaria2.forceShutdown ()\fR
.RS 4
.sp
This method shutdowns aria2\&. This method behaves like \fBaria2\&.shutdown\fR except that any actions which takes time such as contacting BitTorrent tracker are skipped\&. This method returns "OK"\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBsystem.multicall (methods)\fR
.RS 4
.sp
This methods encapsulates multiple method calls in a single request\&. \fImethods\fR is of type array and its element is struct\&. The struct contains two keys: "methodName" and "params"\&. "methodName" is the method name to call and "params" is array containing parameters to the method\&. This method returns array of responses\&. The element of array will either be a one\-item array containing the return value of each method call or struct of fault element if an encapsulated method call fails\&.
.sp
In the following example, we add 2 downloads\&. First one is http://example\&.org/file and second one is file\&.torrent:
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import urllib2, json, base64
>>> from pprint import pprint
>>> jsonreq = json\&.dumps({\*(Aqjsonrpc\*(Aq:\*(Aq2\&.0\*(Aq, \*(Aqid\*(Aq:\*(Aqqwer\*(Aq,
\&.\&.\&.                       \*(Aqmethod\*(Aq:\*(Aqsystem\&.multicall\*(Aq,
\&.\&.\&.                       \*(Aqparams\*(Aq:[[{\*(AqmethodName\*(Aq:\*(Aqaria2\&.addUri\*(Aq,
\&.\&.\&.                                   \*(Aqparams\*(Aq:[[\*(Aqhttp://example\&.org\*(Aq]]},
\&.\&.\&.                                  {\*(AqmethodName\*(Aq:\*(Aqaria2\&.addTorrent\*(Aq,
\&.\&.\&.                                   \*(Aqparams\*(Aq:[base64\&.b64encode(open(\*(Aqfile\&.torrent\*(Aq)\&.read())]}]]})
>>> c = urllib2\&.urlopen(\*(Aqhttp://localhost:6800/jsonrpc\*(Aq, jsonreq)
>>> pprint(json\&.loads(c\&.read()))
{u\*(Aqid\*(Aq: u\*(Aqqwer\*(Aq, u\*(Aqjsonrpc\*(Aq: u\*(Aq2\&.0\*(Aq, u\*(Aqresult\*(Aq: [[u\*(Aq1\*(Aq], [u\*(Aq2\*(Aq]]}
.fi
.if n \{\
.RE
.\}
.sp
JSON\-RPC also supports Batch request described in JSON\-RPC 2\&.0 Specification:
.sp
.if n \{\
.RS 4
.\}
.nf
>>> jsonreq = json\&.dumps([{\*(Aqjsonrpc\*(Aq:\*(Aq2\&.0\*(Aq, \*(Aqid\*(Aq:\*(Aqqwer\*(Aq,
\&.\&.\&.                        \*(Aqmethod\*(Aq:\*(Aqaria2\&.addUri\*(Aq,
\&.\&.\&.                        \*(Aqparams\*(Aq:[[\*(Aqhttp://example\&.org\*(Aq]]},
\&.\&.\&.                       {\*(Aqjsonrpc\*(Aq:\*(Aq2\&.0\*(Aq, \*(Aqid\*(Aq:\*(Aqasdf\*(Aq,
\&.\&.\&.                        \*(Aqmethod\*(Aq:\*(Aqaria2\&.addTorrent\*(Aq,
\&.\&.\&.                        \*(Aqparams\*(Aq:[base64\&.b64encode(open(\*(Aqfile\&.torrent\*(Aq)\&.read())]}])
>>> c = urllib2\&.urlopen(\*(Aqhttp://localhost:6800/jsonrpc\*(Aq, jsonreq)
>>> pprint(json\&.loads(c\&.read()))
[{u\*(Aqid\*(Aq: u\*(Aqqwer\*(Aq, u\*(Aqjsonrpc\*(Aq: u\*(Aq2\&.0\*(Aq, u\*(Aqresult\*(Aq: u\*(Aq1\*(Aq},
 {u\*(Aqid\*(Aq: u\*(Aqasdf\*(Aq, u\*(Aqjsonrpc\*(Aq: u\*(Aq2\&.0\*(Aq, u\*(Aqresult\*(Aq: u\*(Aq2\*(Aq}]
.fi
.if n \{\
.RE
.\}
.sp
In the following example, we add 2 downloads\&. First one is http://example\&.org/file and second one is file\&.torrent:
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import xmlrpclib
>>> s = xmlrpclib\&.ServerProxy(\*(Aqhttp://localhost:6800/rpc\*(Aq)
>>> mc = xmlrpclib\&.MultiCall(s)
>>> mc\&.aria2\&.addUri([\*(Aqhttp://example\&.org/file\*(Aq])
>>> mc\&.aria2\&.addTorrent(xmlrpclib\&.Binary(open(\*(Aqfile\&.torrent\*(Aq)\&.read()))
>>> r = mc()
>>> tuple(r)
(\*(Aq2\*(Aq, \*(Aq3\*(Aq)
.fi
.if n \{\
.RE
.\}
.RE
.SS "Error Handling"
.sp
In JSON\-RPC, aria2 returns JSON object which contains error code in code and the error message in message\&.
.sp
In XML\-RPC, aria2 returns faultCode=1 and the error message in faultString\&.
.SS "Options"
.sp
Same options for \fB\-i\fR list are available\&. See \fBInput File\fR subsection for complete list of options\&.
.sp
In the option struct, name element is option name(without preceding "\-\-") and value element is argument as string\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBJSON-RPC Example\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
{\*(Aqsplit\*(Aq:\*(Aq1\*(Aq, \*(Aqhttp\-proxy\*(Aq:\*(Aqhttp://proxy/\*(Aq}
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBXML-RPC Example\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
<struct>
  <member>
    <name>split</name>
    <value><string>1</string></value>
  </member>
  <member>
    <name>http\-proxy</name>
    <value><string>http://proxy/</string></value>
  </member>
</struct>
.fi
.if n \{\
.RE
.\}
.sp
\fBheader\fR and \fBindex\-out\fR option are allowed multiple times in command\-line\&. Since name should be unique in struct(many XML\-RPC library implementation uses hash or dict for struct), single string is not enough\&. To overcome this situation, they can take array as value as well as string\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBJSON-RPC Example\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
{\*(Aqheader\*(Aq:[\*(AqAccept\-Language: ja\*(Aq, \*(AqAccept\-Charset: utf\-8\*(Aq]}
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBXML-RPC Example\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
<struct>
  <member>
    <name>header</name>
    <value>
      <array>
        <data>
          <value><string>Accept\-Language: ja</string></value>
          <value><string>Accept\-Charset: utf\-8</string></value>
        </data>
      </array>
    </value>
  </member>
</struct>
.fi
.if n \{\
.RE
.\}
.sp
Following example adds a download with 2 options: dir and header\&. header option has 2 values, so it uses a list:
.sp
.if n \{\
.RS 4
.\}
.nf
>>> import xmlrpclib
>>> s = xmlrpclib\&.ServerProxy(\*(Aqhttp://localhost:6800/rpc\*(Aq)
>>> opts = dict(dir=\*(Aq/tmp\*(Aq,
\&.\&.\&.             header=[\*(AqAccept\-Language: ja\*(Aq,
\&.\&.\&.                     \*(AqAccept\-Charset: utf\-8\*(Aq])
>>> s\&.aria2\&.addUri([\*(Aqhttp://example\&.org/file\*(Aq], opts)
\*(Aq1\*(Aq
.fi
.if n \{\
.RE
.\}
.RE
.SS "JSON\-RPC using HTTP GET"
.sp
The JSON\-RPC interface also supports request via HTTP GET\&. The encoding scheme in GET parameters is based on JSON\-RPC over HTTP Specification (2008\-1\-15(RC1))\&. The encoding of GET parameters are follows:
.sp
.if n \{\
.RS 4
.\}
.nf
/jsonrpc?method=METHOD_NAME&id=ID&params=BASE64_ENCODED_PARAMS
.fi
.if n \{\
.RE
.\}
.sp
The \fImethod\fR and \fIid\fR are always treated as JSON string and their encoding must be UTF\-8\&.
.sp
For example, The encoded string of aria2\&.tellStatus(\fI3\fR) with id=\fIfoo\fR looks like this:
.sp
.if n \{\
.RS 4
.\}
.nf
/jsonrpc?method=aria2\&.tellStatus&id=foo&params=WyIzIl0%3D
.fi
.if n \{\
.RE
.\}
.sp
The \fIparams\fR parameter is Base64\-encoded JSON array which usually appears in \fIparams\fR attribute in JSON\-RPC request object\&. In the above example, the params is [\fI3\fR], therefore:
.sp
.if n \{\
.RS 4
.\}
.nf
[\*(Aq3\*(Aq] \-\-(Base64)\-\-> WyIzIl0= \-\-(Percent Encode)\-\-> WyIzIl0%3D
.fi
.if n \{\
.RE
.\}
.sp
The JSON\-RPC interface supports JSONP\&. You can specify the callback function in \fIjsoncallback\fR parameter\&.
.sp
.if n \{\
.RS 4
.\}
.nf
/jsonrpc?method=aria2\&.tellStatus&id=foo&params=WyIzIl0%3D&jsoncallback=cb
.fi
.if n \{\
.RE
.\}
.sp
For Batch request, \fImethod\fR and \fIid\fR parameter must not be specified\&. Whole request must be specified in \fIparams\fR parameter\&. For example, Batch request
.sp
.if n \{\
.RS 4
.\}
.nf
[{\*(Aqjsonrpc\*(Aq:\*(Aq2\&.0\*(Aq, \*(Aqid\*(Aq:\*(Aqqwer\*(Aq, \*(Aqmethod\*(Aq:\*(Aqaria2\&.getVersion\*(Aq},
 {\*(Aqjsonrpc\*(Aq:\*(Aq2\&.0\*(Aq, \*(Aqid\*(Aq:\*(Aqasdf\*(Aq, \*(Aqmethod\*(Aq:\*(Aqaria2\&.tellActive\*(Aq}]
.fi
.if n \{\
.RE
.\}
.sp
will be encoded like this:
.sp
.if n \{\
.RS 4
.\}
.nf
/jsonrpc?params=W3sianNvbnJwYyI6ICIyLjAiLCAiaWQiOiAicXdlciIsICJtZXRob2QiOiAiYXJpYTIuZ2V0VmVyc2lvbiJ9LCB7Impzb25ycGMiOiAiMi4wIiwgImlkIjogImFzZGYiLCAibWV0aG9kIjogImFyaWEyLnRlbGxBY3RpdmUifV0%3D
.fi
.if n \{\
.RE
.\}
.SS "Sample XML\-RPC Client Code"
.sp
The following Ruby script adds \fIhttp://localhost/aria2\&.tar\&.bz2\fR to aria2c operated on localhost with option \fB\-\-dir\fR=\fI/downloads\fR and prints its reponse\&.
.sp
.if n \{\
.RS 4
.\}
.nf
#!/usr/bin/env ruby

require \*(Aqxmlrpc/client\*(Aq
require \*(Aqpp\*(Aq

client=XMLRPC::Client\&.new2("http://localhost:6800/rpc")

options={ "dir" => "/downloads" }
result=client\&.call("aria2\&.addUri", [ "http://localhost/aria2\&.tar\&.bz2" ], options)

pp result
.fi
.if n \{\
.RE
.\}
.sp
If you are a Python lover, you can use xmlrpclib(for Python3\&.x, use xmlrpc\&.client instead) to interact with aria2\&.
.sp
.if n \{\
.RS 4
.\}
.nf
import xmlrpclib
from pprint import pprint

s = xmlrpclib\&.ServerProxy("http://localhost:6800/rpc")
r = s\&.aria2\&.addUri(["http://localhost/aria2\&.tar\&.bz2"], {"dir":"/downloads"})
pprint(r)
.fi
.if n \{\
.RE
.\}
.SH "EXAMPLE"
.SS "HTTP/FTP Segmented Download"
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBDownload a file\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c "http://host/file\&.zip"
.fi
.if n \{\
.RE
.\}
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
To stop a download, press Ctrl\-C\&. You can resume the transfer by running aria2c with the same argument in the same directory\&. You can change URIs as long as they are pointing to the same file\&.
.sp .5v
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBDownload a file from 2 different HTTP servers\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c "http://host/file\&.zip" "http://mirror/file\&.zip"
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBDownload a file from 1 host using 2 connections\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-x2 \-k1M "http://host/file\&.zip"
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBDownload a file from HTTP and FTP servers\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c "http://host1/file\&.zip" "ftp://host2/file\&.zip"
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBDownload files listed in a text file concurrently\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-ifiles\&.txt \-j2
.fi
.if n \{\
.RE
.\}
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
\-j option specifies the number of parallel downloads\&.
.sp .5v
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBUsing proxy\fR
.RS 4
.sp
For HTTP:
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-http\-proxy="http://proxy:8080" "http://host/file"
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-http\-proxy="http://proxy:8080" \-\-no\-proxy="localhost,127\&.0\&.0\&.1,192\&.168\&.0\&.0/16" "http://host/file"
.fi
.if n \{\
.RE
.\}
.sp
For FTP:
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-ftp\-proxy="http://proxy:8080" "ftp://host/file"
.fi
.if n \{\
.RE
.\}
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
See \fB\-\-http\-proxy\fR, \fB\-\-https\-proxy\fR, \fB\-\-ftp\-proxy\fR, \fB\-\-all\-proxy\fR and \fB\-\-no\-proxy\fR for details\&. You can specify proxy in the environment variables\&. See \fBENVIRONMENT\fR section\&.
.sp .5v
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBProxy with authorization\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-http\-proxy="http://username:password@proxy:8080" "http://host/file"
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-http\-proxy="http://proxy:8080" \-\-http\-proxy\-user="username" \-\-http\-proxy\-passwd="password" "http://host/file"
.fi
.if n \{\
.RE
.\}
.RE
.SS "Metalink Download"
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBDownload files with remote Metalink\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-follow\-metalink=mem "http://host/file\&.metalink"
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBDownload using a local metalink file\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-p \-\-lowest\-speed\-limit=4000 file\&.metalink
.fi
.if n \{\
.RE
.\}
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
To stop a download, press Ctrl\-C\&. You can resume the transfer by running aria2c with the same argument in the same directory\&.
.sp .5v
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBDownload several local metalink files\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-j2 file1\&.metalink file2\&.metalink
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBDownload only selected files using index\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-select\-file=1\-4,8 file\&.metalink
.fi
.if n \{\
.RE
.\}
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
The index is printed to the console using \-S option\&.
.sp .5v
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBDownload a file using a local .metalink file with user preference\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-metalink\-location=jp,us \-\-metalink\-version=1\&.1 \-\-metalink\-language=en\-US file\&.metalink
.fi
.if n \{\
.RE
.\}
.RE
.SS "BitTorrent Download"
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBDownload files from remote BitTorrent file\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-follow\-torrent=mem "http://host/file\&.torrent"
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBDownload using a local torrent file\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-max\-upload\-limit=40K file\&.torrent
.fi
.if n \{\
.RE
.\}
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
\-\-max\-upload\-limit specifies the max of upload rate\&.
.sp .5v
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
To stop a download, press Ctrl\-C\&. You can resume the transfer by running aria2c with the same argument in the same directory\&.
.sp .5v
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBDownload using BitTorrent Magnet URI\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c "magnet:?xt=urn:btih:248D0A1CD08284299DE78D5C1ED359BB46717D8C&dn=aria2"
.fi
.if n \{\
.RE
.\}
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
Don\(cqt forget to quote BitTorrent Magnet URI which includes "&" character with single(\*(Aq) or double(") quotation\&.
.sp .5v
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBDownload 2 torrents\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-j2 file1\&.torrent file2\&.torrent
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBDownload a file using torrent and HTTP/FTP server\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-Ttest\&.torrent "http://host1/file" "ftp://host2/file"
.fi
.if n \{\
.RE
.\}
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
Downloading multi file torrent with HTTP/FTP is not supported\&.
.sp .5v
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBDownload only selected files using index(usually called "selectable download")\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-select\-file=1\-4,8 file\&.torrent
.fi
.if n \{\
.RE
.\}
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
The index is printed to the console using \-S option\&.
.sp .5v
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBSpecify output filename\fR
.RS 4
.sp
To specify output filename for BitTorrent downloads, you need to know the index of file in torrent file using \fB\-S\fR option\&. For example, the output looks like this:
.sp
.if n \{\
.RS 4
.\}
.nf
idx|path/length
===+======================
  1|dist/base\-2\&.6\&.18\&.iso
   |99\&.9MiB
\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
  2|dist/driver\-2\&.6\&.18\&.iso
   |169\&.0MiB
\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.fi
.if n \{\
.RE
.\}
.sp
To save \fIdist/base\-2\&.6\&.18\&.iso\fR in \fI/tmp/mydir/base\&.iso\fR and \fIdist/driver\-2\&.6\&.18\&.iso\fR in \fI/tmp/dir/driver\&.iso\fR, use the following command:
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-dir=/tmp \-\-index\-out=1=mydir/base\&.iso \-\-index\-out=2=dir/driver\&.iso file\&.torrent
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBChange the listening port for incoming peer\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-listen\-port=7000\-7001,8000 file\&.torrent
.fi
.if n \{\
.RE
.\}
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
Since aria2 doesn\(cqt configure firewall or router for port forwarding, it\(cqs up to you to do it manually\&.
.sp .5v
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBSpecify the condition to stop program after torrent download finished\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-seed\-time=120 \-\-seed\-ratio=1\&.0 file\&.torrent
.fi
.if n \{\
.RE
.\}
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
In the above example, the program exits when the 120 minutes has elapsed since download completed or seed ratio reaches 1\&.0\&.
.sp .5v
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBThrottle upload speed\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-max\-upload\-limit=100K file\&.torrent
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBEnable IPv4 DHT\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-enable\-dht \-\-dht\-listen\-port=6881 file\&.torrent
.fi
.if n \{\
.RE
.\}
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
DHT uses udp port\&. Since aria2 doesn\(cqt configure firewall or router for port forwarding, it\(cqs up to you to do it manually\&.
.sp .5v
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBEnable IPv6 DHT\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-enable\-dht6 \-\-dht\-listen\-port=6881 \-\-dht\-listen\-addr6=YOUR_GLOBAL_UNICAST_IPV6_ADDR \-\-enable\-async\-dns6
.fi
.if n \{\
.RE
.\}
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
If aria2c is not built with c\-ares, \fB\-\-enable\-async\-dns6\fR is unnecessary\&. aria2 shares same port between IPv4 and IPv6 DHT\&.
.sp .5v
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBAdd and remove tracker URI\fR
.RS 4
.sp
Removes all tracker announce URIs described in file\&.torrent and use "http://tracker1/announce" and "http://tracker2/announce" instead\&.
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-bt\-exclude\-tracker="*" \-\-bt\-tracker="http://tracker1/announce,http://tracker2/announce" file\&.torrent
.fi
.if n \{\
.RE
.\}
.RE
.SS "More advanced HTTP features"
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBLoad cookies\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-load\-cookies=cookies\&.txt "http://host/file\&.zip"
.fi
.if n \{\
.RE
.\}
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
You can use Firefox/Mozilla/Chromium\(cqs cookie file without modification\&.
.sp .5v
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBResume download started by web browsers or another programs\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-c \-s2 "http://host/partiallydownloadedfile\&.zip"
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBClient certificate authorization for SSL/TLS\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-certificate=/path/to/mycert\&.pem \-\-private\-key=/path/to/mykey\&.pem https://host/file
.fi
.if n \{\
.RE
.\}
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
The file specified in \fB\-\-private\-key\fR must be decrypted\&. The behavior when encrypted one is given is undefined\&.
.sp .5v
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBVerify peer in SSL/TLS using given CA certificates\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-ca\-certificate=/path/to/ca\-certificates\&.crt \-\-check\-certificate https://host/file
.fi
.if n \{\
.RE
.\}
.RE
.SS "And more advanced features"
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBThrottle download speed\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-max\-download\-limit=100K file\&.metalink
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBRepair a damaged download\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-V file\&.metalink
.fi
.if n \{\
.RE
.\}
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
Repairing damaged downloads can be done efficiently when used with BitTorrent or Metalink with chunk checksums\&.
.sp .5v
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBDrop connection if download speed is lower than specified value\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-lowest\-speed\-limit=10K file\&.metalink
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBParameterized URI support\fR
.RS 4
.sp
You can specify set of parts:
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-P "http://{host1,host2,host3}/file\&.iso"
.fi
.if n \{\
.RE
.\}
.sp
You can specify numeric sequence:
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-Z \-P "http://host/image[000\-100]\&.png"
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
\-Z option is required if the all URIs don\(cqt point to the same file, such as the above example\&.
.sp .5v
.RE
.sp
You can specify step counter:
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-Z \-P "http://host/image[A\-Z:2]\&.png"
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBVerify checksum\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-checksum=sha\-1=0192ba11326fe2298c8cb4de616f4d4140213837 http://example\&.org/file
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBParallel downloads of arbitrary number of URI,metalink,torrent\fR
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-j3 \-Z "http://host/file1" file2\&.torrent file3\&.metalink
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBBitTorrent Encryption\fR
.RS 4
.sp
Encrypt whole payload using ARC4:
.sp
.if n \{\
.RS 4
.\}
.nf
aria2c \-\-bt\-min\-crypto\-level=arc4 \-\-bt\-require\-crypto=true file\&.torrent
.fi
.if n \{\
.RE
.\}
.RE
.SH "SEE ALSO"
.sp
Project Web Site: http://aria2\&.sourceforge\&.net/
.sp
aria2 Wiki: http://sourceforge\&.net/apps/trac/aria2/wiki
.sp
Metalink Homepage: http://www\&.metalinker\&.org/
.sp
The Metalink Download Description Format: http://tools\&.ietf\&.org/html/rfc5854
.SH "COPYRIGHT"
.sp
Copyright \(co 2006, 2011 Tatsuhiro Tsujikawa
.sp
This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version\&.
.sp
This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE\&. See the GNU General Public License for more details\&.
.sp
You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc\&., 51 Franklin Street, Fifth Floor, Boston, MA 02110\-1301 USA
.sp
In addition, as a special exception, the copyright holders give permission to link the code of portions of this program with the OpenSSL library under certain conditions as described in each individual source file, and distribute linked combinations including the two\&. You must obey the GNU General Public License in all respects for all of the code used other than OpenSSL\&. If you modify file(s) with this exception, you may extend this exception to your version of the file(s), but you are not obligated to do so\&. If you do not wish to do so, delete this exception statement from your version\&. If you delete this exception statement from all source files in the program, then also delete it here\&.
.SH "AUTHOR"
.PP
\fBTatsuhiro Tsujikawa\fR <\&t\-tujikawa@users\&.sourceforge\&.net\&>
.RS 4
Author.
.RE
